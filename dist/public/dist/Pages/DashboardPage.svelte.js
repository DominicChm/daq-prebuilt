import './DashboardPage.svelte.css.proxy.js';
/* src\Pages\DashboardPage.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Grid from '../../_snowpack/pkg/svelte-grid.js';
import gridHelp from '../../_snowpack/pkg/svelte-grid/build/helper.js';
import DrivenTimeline from "../Components/DrivenTimeline.svelte.js";
import RunHeader from "../Components/RunHeader.svelte.js";
import RadialGauge from "../Components/RadialGauge.svelte.js";
import Reset32 from "../../_snowpack/pkg/carbon-icons-svelte/lib/Reset32.js";

import {
	Button,
	ComboBox,
	LocalStorage,
	Search,
	MultiSelect
} from "../../_snowpack/pkg/carbon-components-svelte.js";

import { activeRun, DAQSchema } from "../stores.js";
import { findFreeSpaceForItem } from "../../_snowpack/pkg/svelte-grid/src/utils/item.js";
import ModuleDashboard from "../ModuleWidgets/ModuleDashboard.svelte.js";

function create_else_block(ctx) {
	let div2;
	let runheader;
	let t0;
	let div0;
	let grid;
	let updating_items;
	let t1;
	let div1;
	let driventimeline;
	let t2;
	let localstorage;
	let updating_value;
	let current;

	runheader = new RunHeader({
			props: {
				$$slots: { actions: [create_actions_slot] },
				$$scope: { ctx }
			}
		});

	function grid_items_binding(value) {
		/*grid_items_binding*/ ctx[13](value);
	}

	let grid_props = {
		rowHeight: 200,
		cols: /*cols*/ ctx[9],
		scroller: /*container*/ ctx[2],
		$$slots: {
			default: [
				create_default_slot,
				({ item, dataItem, index }) => ({ 19: item, 20: dataItem, 21: index }),
				({ item, dataItem, index }) => (item ? 524288 : 0) | (dataItem ? 1048576 : 0) | (index ? 2097152 : 0)
			]
		},
		$$scope: { ctx }
	};

	if (/*items*/ ctx[0] !== void 0) {
		grid_props.items = /*items*/ ctx[0];
	}

	grid = new Grid({ props: grid_props });
	binding_callbacks.push(() => bind(grid, 'items', grid_items_binding));
	driventimeline = new DrivenTimeline({});

	function localstorage_value_binding(value) {
		/*localstorage_value_binding*/ ctx[15](value);
	}

	let localstorage_props = { key: "dashboard-layout" };

	if (/*items*/ ctx[0] !== void 0) {
		localstorage_props.value = /*items*/ ctx[0];
	}

	localstorage = new LocalStorage({ props: localstorage_props });
	binding_callbacks.push(() => bind(localstorage, 'value', localstorage_value_binding));
	/*localstorage_binding*/ ctx[16](localstorage);
	localstorage.$on("update", /*onUpdate*/ ctx[7]);

	return {
		c() {
			div2 = element("div");
			create_component(runheader.$$.fragment);
			t0 = space();
			div0 = element("div");
			create_component(grid.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(driventimeline.$$.fragment);
			t2 = space();
			create_component(localstorage.$$.fragment);
			set_style(div0, "flex", "1");
			set_style(div0, "overflow-y", "scroll");
			set_style(div0, "overflow-x", "hidden");
			set_style(div1, "width", "100%");
			set_style(div1, "height", "6rem");
			attr(div2, "class", "root svelte-1vwz7l5");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			mount_component(runheader, div2, null);
			append(div2, t0);
			append(div2, div0);
			mount_component(grid, div0, null);
			/*div0_binding*/ ctx[14](div0);
			append(div2, t1);
			append(div2, div1);
			mount_component(driventimeline, div1, null);
			insert(target, t2, anchor);
			mount_component(localstorage, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const runheader_changes = {};

			if (dirty & /*$$scope, selectItems, shownIds*/ 4194352) {
				runheader_changes.$$scope = { dirty, ctx };
			}

			runheader.$set(runheader_changes);
			const grid_changes = {};
			if (dirty & /*container*/ 4) grid_changes.scroller = /*container*/ ctx[2];

			if (dirty & /*$$scope, $DAQSchema, dataItem*/ 5242882) {
				grid_changes.$$scope = { dirty, ctx };
			}

			if (!updating_items && dirty & /*items*/ 1) {
				updating_items = true;
				grid_changes.items = /*items*/ ctx[0];
				add_flush_callback(() => updating_items = false);
			}

			grid.$set(grid_changes);
			const localstorage_changes = {};

			if (!updating_value && dirty & /*items*/ 1) {
				updating_value = true;
				localstorage_changes.value = /*items*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			localstorage.$set(localstorage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(runheader.$$.fragment, local);
			transition_in(grid.$$.fragment, local);
			transition_in(driventimeline.$$.fragment, local);
			transition_in(localstorage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(runheader.$$.fragment, local);
			transition_out(grid.$$.fragment, local);
			transition_out(driventimeline.$$.fragment, local);
			transition_out(localstorage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(runheader);
			destroy_component(grid);
			/*div0_binding*/ ctx[14](null);
			destroy_component(driventimeline);
			if (detaching) detach(t2);
			/*localstorage_binding*/ ctx[16](null);
			destroy_component(localstorage, detaching);
		}
	};
}

// (85:0) {#if (!$activeRun)}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("NO ACTIVE RUN!!!");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (90:12) <svelte:fragment slot="actions">
function create_actions_slot(ctx) {
	let multiselect;
	let updating_selectedIds;
	let t;
	let button;
	let current;

	function multiselect_selectedIds_binding(value) {
		/*multiselect_selectedIds_binding*/ ctx[11](value);
	}

	let multiselect_props = {
		spellcheck: "false",
		filterable: true,
		placeholder: "Select Shown Modules",
		items: /*selectItems*/ ctx[5]
	};

	if (/*shownIds*/ ctx[4] !== void 0) {
		multiselect_props.selectedIds = /*shownIds*/ ctx[4];
	}

	multiselect = new MultiSelect({ props: multiselect_props });
	binding_callbacks.push(() => bind(multiselect, 'selectedIds', multiselect_selectedIds_binding));
	multiselect.$on("select", /*syncSelect*/ ctx[8]);

	button = new Button({
			props: {
				icon: Reset32,
				iconDescription: "Reset Dashboard",
				kind: "secondary"
			}
		});

	button.$on("click", /*resetDash*/ ctx[10]);

	return {
		c() {
			create_component(multiselect.$$.fragment);
			t = space();
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(multiselect, target, anchor);
			insert(target, t, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const multiselect_changes = {};
			if (dirty & /*selectItems*/ 32) multiselect_changes.items = /*selectItems*/ ctx[5];

			if (!updating_selectedIds && dirty & /*shownIds*/ 16) {
				updating_selectedIds = true;
				multiselect_changes.selectedIds = /*shownIds*/ ctx[4];
				add_flush_callback(() => updating_selectedIds = false);
			}

			multiselect.$set(multiselect_changes);
		},
		i(local) {
			if (current) return;
			transition_in(multiselect.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(multiselect.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(multiselect, detaching);
			if (detaching) detach(t);
			destroy_component(button, detaching);
		}
	};
}

// (104:12) <Grid bind:items={items} rowHeight={200} let:item let:dataItem {cols} let:index scroller={container}>
function create_default_slot(ctx) {
	let div;
	let moduledashboard;
	let current;

	function func(...args) {
		return /*func*/ ctx[12](/*dataItem*/ ctx[20], ...args);
	}

	moduledashboard = new ModuleDashboard({
			props: {
				typename: /*$DAQSchema*/ ctx[1]?.modules.find(func)?.type,
				id: /*dataItem*/ ctx[20].id
			}
		});

	return {
		c() {
			div = element("div");
			create_component(moduledashboard.$$.fragment);
			attr(div, "class", "content svelte-1vwz7l5");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(moduledashboard, div, null);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const moduledashboard_changes = {};
			if (dirty & /*$DAQSchema*/ 2) moduledashboard_changes.typename = /*$DAQSchema*/ ctx[1]?.modules.find(func)?.type;
			if (dirty & /*dataItem*/ 1048576) moduledashboard_changes.id = /*dataItem*/ ctx[20].id;
			moduledashboard.$set(moduledashboard_changes);
		},
		i(local) {
			if (current) return;
			transition_in(moduledashboard.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(moduledashboard.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(moduledashboard);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*$activeRun*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let selectItems;
	let $DAQSchema;
	let $activeRun;
	component_subscribe($$self, DAQSchema, $$value => $$invalidate(1, $DAQSchema = $$value));
	component_subscribe($$self, activeRun, $$value => $$invalidate(6, $activeRun = $$value));
	const { item, findSpace } = gridHelp;
	const id = () => "_" + Math.random().toString(36).substr(2, 9);
	let container;
	let storage;
	let items = [];
	let shownIds = [];

	function onUpdate({ detail }) {
		$$invalidate(4, shownIds = detail.value?.map(d => d.id) ?? []);
	}

	function syncSelect() {
		$$invalidate(0, items = items.filter(i => shownIds.includes(i.id)));
		const newIds = shownIds.filter(i => !items.find(j => j.id === i));

		for (const id of newIds) {
			let newItem = {
				id,
				5: item({ x: 0, w: 1, h: 1, y: 0 }),
				3: item({ x: 0, w: 1, h: 1, y: 0 }),
				2: item({ x: 0, w: 1, h: 1, y: 0 })
			};

			//Position new item.
			const positions = {
				5: {
					...newItem[5],
					...gridHelp.findSpace(newItem, items, 5)
				},
				3: {
					...newItem[3],
					...gridHelp.findSpace(newItem, items, 3)
				},
				2: {
					...newItem[2],
					...gridHelp.findSpace(newItem, items, 2)
				}
			};

			newItem = { ...newItem, ...positions };
			$$invalidate(0, items = [...items, newItem]);
		}
	}

	const cols = [[1500, 5], [1056, 3], [750, 2]];

	function resetDash() {
		$$invalidate(0, items = []);
	}

	function multiselect_selectedIds_binding(value) {
		shownIds = value;
		$$invalidate(4, shownIds);
	}

	const func = (dataItem, m) => m.id === dataItem.id;

	function grid_items_binding(value) {
		items = value;
		$$invalidate(0, items);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(2, container);
		});
	}

	function localstorage_value_binding(value) {
		items = value;
		$$invalidate(0, items);
	}

	function localstorage_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			storage = $$value;
			$$invalidate(3, storage);
		});
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$DAQSchema*/ 2) {
			$: $$invalidate(5, selectItems = $DAQSchema?.modules?.map(m => ({ id: m.id, text: m.name })) ?? []);
		}

		if ($$self.$$.dirty & /*items*/ 1) {
			$: $$invalidate(0, items = gridHelp.normalize(items, 5));
		}
	};

	return [
		items,
		$DAQSchema,
		container,
		storage,
		shownIds,
		selectItems,
		$activeRun,
		onUpdate,
		syncSelect,
		cols,
		resetDash,
		multiselect_selectedIds_binding,
		func,
		grid_items_binding,
		div0_binding,
		localstorage_value_binding,
		localstorage_binding
	];
}

class DashboardPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default DashboardPage;