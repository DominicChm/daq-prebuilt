import './OverviewPage.svelte.css.proxy.js';
/* src\Pages\OverviewPage.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import DrivenTimeline from "../Components/DrivenTimeline.svelte.js";
import { activeRun } from "../stores.js";

function create_else_block(ctx) {
	let div2;
	let div0;
	let t1;
	let div1;
	let driventimeline;
	let current;
	driventimeline = new DrivenTimeline({});

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			div0.textContent = "test";
			t1 = space();
			div1 = element("div");
			create_component(driventimeline.$$.fragment);
			set_style(div0, "flex", "1");
			set_style(div1, "width", "100%");
			set_style(div1, "height", "6rem");
			attr(div2, "class", "root svelte-lc15z");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t1);
			append(div2, div1);
			mount_component(driventimeline, div1, null);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(driventimeline.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(driventimeline.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(driventimeline);
		}
	};
}

// (12:0) {#if (!$activeRun)}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("NO ACTIVE RUN!!!");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*$activeRun*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $activeRun;
	component_subscribe($$self, activeRun, $$value => $$invalidate(0, $activeRun = $$value));
	return [$activeRun];
}

class OverviewPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default OverviewPage;