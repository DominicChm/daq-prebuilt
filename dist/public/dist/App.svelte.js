import './App.svelte.css.proxy.js';
/* src\App.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	add_flush_callback,
	bind,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import "../_snowpack/pkg/carbon-components-svelte/css/all.css.proxy.js";

import {
	Content,
	Header,
	HeaderUtilities,
	SideNav,
	SideNavDivider,
	SideNavItems,
	SideNavLink,
	SkipToContent
} from "../_snowpack/pkg/carbon-components-svelte.js";

import Archive16 from "../_snowpack/pkg/carbon-icons-svelte/lib/Archive16.js";
import "../_snowpack/pkg/carbon-icons-svelte/lib/Archive24.js";
import Router, { location } from '../_snowpack/pkg/svelte-spa-router.js';
import { routes } from "./Pages/routes.js";
import { errorState } from "./stores.js";
import DAQConnectionStatus from "./Icons/DAQConnectionStatus.svelte.js";
import Toast from "./Components/Toast.svelte.js";
import "../_snowpack/pkg/svelte.js";
import PageNav from "./Components/PageNav.svelte.js";
import SidebarRunSelector from "./Components/SidebarRunSelector.svelte.js";

function create_default_slot_4(ctx) {
	let daqconnectionstatus;
	let t;
	let sidebarrunselector;
	let current;
	daqconnectionstatus = new DAQConnectionStatus({});
	sidebarrunselector = new SidebarRunSelector({});

	return {
		c() {
			create_component(daqconnectionstatus.$$.fragment);
			t = space();
			create_component(sidebarrunselector.$$.fragment);
		},
		m(target, anchor) {
			mount_component(daqconnectionstatus, target, anchor);
			insert(target, t, anchor);
			mount_component(sidebarrunselector, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(daqconnectionstatus.$$.fragment, local);
			transition_in(sidebarrunselector.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(daqconnectionstatus.$$.fragment, local);
			transition_out(sidebarrunselector.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(daqconnectionstatus, detaching);
			if (detaching) detach(t);
			destroy_component(sidebarrunselector, detaching);
		}
	};
}

// (38:0) <Header company="SAE Baja" platformName="DAQ v0.0.1" bind:isSideNavOpen>
function create_default_slot_3(ctx) {
	let headerutilities;
	let current;

	headerutilities = new HeaderUtilities({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(headerutilities.$$.fragment);
		},
		m(target, anchor) {
			mount_component(headerutilities, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const headerutilities_changes = {};

			if (dirty & /*$$scope*/ 16) {
				headerutilities_changes.$$scope = { dirty, ctx };
			}

			headerutilities.$set(headerutilities_changes);
		},
		i(local) {
			if (current) return;
			transition_in(headerutilities.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(headerutilities.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(headerutilities, detaching);
		}
	};
}

// (39:4) <svelte:fragment slot="skip-to-content">
function create_skip_to_content_slot(ctx) {
	let skiptocontent;
	let current;
	skiptocontent = new SkipToContent({});

	return {
		c() {
			create_component(skiptocontent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(skiptocontent, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(skiptocontent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(skiptocontent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(skiptocontent, detaching);
		}
	};
}

// (50:4) <SideNavItems>
function create_default_slot_2(ctx) {
	let pagenav;
	let t0;
	let sidenavdivider;
	let t1;
	let sidenavlink;
	let current;
	pagenav = new PageNav({});
	sidenavdivider = new SideNavDivider({});

	sidenavlink = new SideNavLink({
			props: {
				icon: Archive16,
				text: "Runs",
				href: "#/",
				isSelected: /*$location*/ ctx[1] === "/"
			}
		});

	return {
		c() {
			create_component(pagenav.$$.fragment);
			t0 = space();
			create_component(sidenavdivider.$$.fragment);
			t1 = space();
			create_component(sidenavlink.$$.fragment);
		},
		m(target, anchor) {
			mount_component(pagenav, target, anchor);
			insert(target, t0, anchor);
			mount_component(sidenavdivider, target, anchor);
			insert(target, t1, anchor);
			mount_component(sidenavlink, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const sidenavlink_changes = {};
			if (dirty & /*$location*/ 2) sidenavlink_changes.isSelected = /*$location*/ ctx[1] === "/";
			sidenavlink.$set(sidenavlink_changes);
		},
		i(local) {
			if (current) return;
			transition_in(pagenav.$$.fragment, local);
			transition_in(sidenavdivider.$$.fragment, local);
			transition_in(sidenavlink.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pagenav.$$.fragment, local);
			transition_out(sidenavdivider.$$.fragment, local);
			transition_out(sidenavlink.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(pagenav, detaching);
			if (detaching) detach(t0);
			destroy_component(sidenavdivider, detaching);
			if (detaching) detach(t1);
			destroy_component(sidenavlink, detaching);
		}
	};
}

// (49:0) <SideNav bind:isOpen={isSideNavOpen}>
function create_default_slot_1(ctx) {
	let sidenavitems;
	let current;

	sidenavitems = new SideNavItems({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(sidenavitems.$$.fragment);
		},
		m(target, anchor) {
			mount_component(sidenavitems, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const sidenavitems_changes = {};

			if (dirty & /*$$scope, $location*/ 18) {
				sidenavitems_changes.$$scope = { dirty, ctx };
			}

			sidenavitems.$set(sidenavitems_changes);
		},
		i(local) {
			if (current) return;
			transition_in(sidenavitems.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(sidenavitems.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(sidenavitems, detaching);
		}
	};
}

// (60:0) <Content style="flex: 1;">
function create_default_slot(ctx) {
	let router;
	let current;
	router = new Router({ props: { routes } });

	return {
		c() {
			create_component(router.$$.fragment);
		},
		m(target, anchor) {
			mount_component(router, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(router, detaching);
		}
	};
}

function create_fragment(ctx) {
	let header;
	let updating_isSideNavOpen;
	let t0;
	let sidenav;
	let updating_isOpen;
	let t1;
	let content;
	let t2;
	let toast;
	let current;

	function header_isSideNavOpen_binding(value) {
		/*header_isSideNavOpen_binding*/ ctx[2](value);
	}

	let header_props = {
		company: "SAE Baja",
		platformName: "DAQ v0.0.1",
		$$slots: {
			"skip-to-content": [create_skip_to_content_slot],
			default: [create_default_slot_3]
		},
		$$scope: { ctx }
	};

	if (/*isSideNavOpen*/ ctx[0] !== void 0) {
		header_props.isSideNavOpen = /*isSideNavOpen*/ ctx[0];
	}

	header = new Header({ props: header_props });
	binding_callbacks.push(() => bind(header, 'isSideNavOpen', header_isSideNavOpen_binding));

	function sidenav_isOpen_binding(value) {
		/*sidenav_isOpen_binding*/ ctx[3](value);
	}

	let sidenav_props = {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*isSideNavOpen*/ ctx[0] !== void 0) {
		sidenav_props.isOpen = /*isSideNavOpen*/ ctx[0];
	}

	sidenav = new SideNav({ props: sidenav_props });
	binding_callbacks.push(() => bind(sidenav, 'isOpen', sidenav_isOpen_binding));

	content = new Content({
			props: {
				style: "flex: 1;",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	toast = new Toast({});

	return {
		c() {
			create_component(header.$$.fragment);
			t0 = space();
			create_component(sidenav.$$.fragment);
			t1 = space();
			create_component(content.$$.fragment);
			t2 = space();
			create_component(toast.$$.fragment);
		},
		m(target, anchor) {
			mount_component(header, target, anchor);
			insert(target, t0, anchor);
			mount_component(sidenav, target, anchor);
			insert(target, t1, anchor);
			mount_component(content, target, anchor);
			insert(target, t2, anchor);
			mount_component(toast, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const header_changes = {};

			if (dirty & /*$$scope*/ 16) {
				header_changes.$$scope = { dirty, ctx };
			}

			if (!updating_isSideNavOpen && dirty & /*isSideNavOpen*/ 1) {
				updating_isSideNavOpen = true;
				header_changes.isSideNavOpen = /*isSideNavOpen*/ ctx[0];
				add_flush_callback(() => updating_isSideNavOpen = false);
			}

			header.$set(header_changes);
			const sidenav_changes = {};

			if (dirty & /*$$scope, $location*/ 18) {
				sidenav_changes.$$scope = { dirty, ctx };
			}

			if (!updating_isOpen && dirty & /*isSideNavOpen*/ 1) {
				updating_isOpen = true;
				sidenav_changes.isOpen = /*isSideNavOpen*/ ctx[0];
				add_flush_callback(() => updating_isOpen = false);
			}

			sidenav.$set(sidenav_changes);
			const content_changes = {};

			if (dirty & /*$$scope*/ 16) {
				content_changes.$$scope = { dirty, ctx };
			}

			content.$set(content_changes);
		},
		i(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(sidenav.$$.fragment, local);
			transition_in(content.$$.fragment, local);
			transition_in(toast.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(header.$$.fragment, local);
			transition_out(sidenav.$$.fragment, local);
			transition_out(content.$$.fragment, local);
			transition_out(toast.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach(t0);
			destroy_component(sidenav, detaching);
			if (detaching) detach(t1);
			destroy_component(content, detaching);
			if (detaching) detach(t2);
			destroy_component(toast, detaching);
		}
	};
}

let runsOpen = false;

function instance($$self, $$props, $$invalidate) {
	let $location;
	component_subscribe($$self, location, $$value => $$invalidate(1, $location = $$value));
	let isSideNavOpen = false;

	//Errors? Keep as console log for now :/ TODO: ERRORS.
	errorState.subscribe(value => {
		console.log(value);
	}); // notifications.danger(value, value.length * 50)

	function header_isSideNavOpen_binding(value) {
		isSideNavOpen = value;
		$$invalidate(0, isSideNavOpen);
	}

	function sidenav_isOpen_binding(value) {
		isSideNavOpen = value;
		$$invalidate(0, isSideNavOpen);
	}

	return [isSideNavOpen, $location, header_isSideNavOpen_binding, sidenav_isOpen_binding];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;