/* src\ModuleWidgets\ModuleDashboard.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import brake_pressure from "./BrakePressure/Dashboard.svelte.js";
import { createEventDispatcher } from "../../_snowpack/pkg/svelte.js";
import { dataStore } from "../stores.js";

function create_else_block(ctx) {
	let p;
	let t0;
	let t1;

	return {
		c() {
			p = element("p");
			t0 = text("Unknown typename ");
			t1 = text(/*typename*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*typename*/ 2) set_data(t1, /*typename*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (15:0) {#if (typeMap[typename])}
function create_if_block(ctx) {
	let switch_instance;
	let updating_id;
	let switch_instance_anchor;
	let current;

	function switch_instance_id_binding(value) {
		/*switch_instance_id_binding*/ ctx[4](value);
	}

	var switch_value = /*typeMap*/ ctx[3][/*typename*/ ctx[1]];

	function switch_props(ctx) {
		let switch_instance_props = { data: /*$dataStore*/ ctx[2] };

		if (/*id*/ ctx[0] !== void 0) {
			switch_instance_props.id = /*id*/ ctx[0];
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
		binding_callbacks.push(() => bind(switch_instance, 'id', switch_instance_id_binding));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty & /*$dataStore*/ 4) switch_instance_changes.data = /*$dataStore*/ ctx[2];

			if (!updating_id && dirty & /*id*/ 1) {
				updating_id = true;
				switch_instance_changes.id = /*id*/ ctx[0];
				add_flush_callback(() => updating_id = false);
			}

			if (switch_value !== (switch_value = /*typeMap*/ ctx[3][/*typename*/ ctx[1]])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					binding_callbacks.push(() => bind(switch_instance, 'id', switch_instance_id_binding));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*typeMap*/ ctx[3][/*typename*/ ctx[1]]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $dataStore;
	component_subscribe($$self, dataStore, $$value => $$invalidate(2, $dataStore = $$value));
	const dispatch = createEventDispatcher();
	let { typename } = $$props;
	let { id } = $$props;
	const typeMap = { brake_pressure };

	function switch_instance_id_binding(value) {
		id = value;
		$$invalidate(0, id);
	}

	$$self.$$set = $$props => {
		if ('typename' in $$props) $$invalidate(1, typename = $$props.typename);
		if ('id' in $$props) $$invalidate(0, id = $$props.id);
	};

	return [id, typename, $dataStore, typeMap, switch_instance_id_binding];
}

class ModuleDashboard extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { typename: 1, id: 0 });
	}
}

export default ModuleDashboard;