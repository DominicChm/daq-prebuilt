import './Dashboard.svelte.css.proxy.js';
/* src\ModuleWidgets\BrakePressure\Dashboard.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../../_snowpack/pkg/svelte/internal.js";

import RadialGauge from "../../Components/RadialGauge.svelte.js";

function create_fragment(ctx) {
	let main;
	let t0;
	let div;
	let pre0;
	let t1_value = JSON.stringify(/*data*/ ctx[0]) + "";
	let t1;
	let t2;
	let pre1;
	let t3;
	let t4;
	let radialgauge;
	let current;

	radialgauge = new RadialGauge({
			props: {
				value: /*data*/ ctx[0][/*id*/ ctx[1]]?.psi ?? -1,
				minValue: "0",
				maxValue: "1024"
			}
		});

	return {
		c() {
			main = element("main");
			t0 = text("Brake Pressure!\r\n    ");
			div = element("div");
			pre0 = element("pre");
			t1 = text(t1_value);
			t2 = space();
			pre1 = element("pre");
			t3 = text(/*id*/ ctx[1]);
			t4 = space();
			create_component(radialgauge.$$.fragment);
			attr(div, "class", "svelte-qojrye");
			attr(main, "class", "svelte-qojrye");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, t0);
			append(main, div);
			append(div, pre0);
			append(pre0, t1);
			append(div, t2);
			append(div, pre1);
			append(pre1, t3);
			append(div, t4);
			mount_component(radialgauge, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*data*/ 1) && t1_value !== (t1_value = JSON.stringify(/*data*/ ctx[0]) + "")) set_data(t1, t1_value);
			if (!current || dirty & /*id*/ 2) set_data(t3, /*id*/ ctx[1]);
			const radialgauge_changes = {};
			if (dirty & /*data, id*/ 3) radialgauge_changes.value = /*data*/ ctx[0][/*id*/ ctx[1]]?.psi ?? -1;
			radialgauge.$set(radialgauge_changes);
		},
		i(local) {
			if (current) return;
			transition_in(radialgauge.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(radialgauge.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(radialgauge);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { data = {} } = $$props;
	let { id = null } = $$props;

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(0, data = $$props.data);
		if ('id' in $$props) $$invalidate(1, id = $$props.id);
	};

	return [data, id];
}

class Dashboard extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { data: 0, id: 1 });
	}
}

export default Dashboard;