/* src\BrakePressure.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from "../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let div;
	let meter;
	let meter_value_value;

	return {
		c() {
			div = element("div");
			meter = element("meter");
			meter.value = meter_value_value = /*data*/ ctx[0][/*uuid*/ ctx[1]]?.analog ?? 0;
			attr(meter, "max", "1023");
			attr(meter, "min", "0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, meter);
		},
		p(ctx, [dirty]) {
			if (dirty & /*data, uuid*/ 3 && meter_value_value !== (meter_value_value = /*data*/ ctx[0][/*uuid*/ ctx[1]]?.analog ?? 0)) {
				meter.value = meter_value_value;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { data = {} } = $$props;
	let { uuid = "" } = $$props;

	$$self.$$set = $$props => {
		if ('data' in $$props) $$invalidate(0, data = $$props.data);
		if ('uuid' in $$props) $$invalidate(1, uuid = $$props.uuid);
	};

	return [data, uuid];
}

class BrakePressure extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { data: 0, uuid: 1 });
	}
}

export default BrakePressure;