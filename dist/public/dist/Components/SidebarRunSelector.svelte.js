/* src\Components\SidebarRunSelector.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	add_flush_callback,
	bind,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import {
	ComboBox,
	HeaderAction,
	HeaderPanelDivider,
	HeaderPanelLink,
	HeaderPanelLinks
} from "../../_snowpack/pkg/carbon-components-svelte.js";

import Archive24 from "../../_snowpack/pkg/carbon-icons-svelte/lib/Archive24.js";
import { runs } from "../stores.js";

function create_default_slot_8(ctx) {
	let t;

	return {
		c() {
			t = text("Realtime Runs");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (22:8) <HeaderPanelLink>
function create_default_slot_7(ctx) {
	let t;

	return {
		c() {
			t = text("Switcher item 1");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (23:8) <HeaderPanelDivider>
function create_default_slot_6(ctx) {
	let t;

	return {
		c() {
			t = text("Stored Runs");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (30:8) <HeaderPanelLink>
function create_default_slot_5(ctx) {
	let t;

	return {
		c() {
			t = text("Switcher item 2");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (31:8) <HeaderPanelLink>
function create_default_slot_4(ctx) {
	let t;

	return {
		c() {
			t = text("Switcher item 3");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (32:8) <HeaderPanelLink>
function create_default_slot_3(ctx) {
	let t;

	return {
		c() {
			t = text("Switcher item 4");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (33:8) <HeaderPanelLink>
function create_default_slot_2(ctx) {
	let t;

	return {
		c() {
			t = text("Switcher item 5");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (20:4) <HeaderPanelLinks>
function create_default_slot_1(ctx) {
	let headerpaneldivider0;
	let t0;
	let headerpanellink0;
	let t1;
	let headerpaneldivider1;
	let t2;
	let div;
	let combobox;
	let updating_items;
	let t3;
	let headerpanellink1;
	let t4;
	let headerpanellink2;
	let t5;
	let headerpanellink3;
	let t6;
	let headerpanellink4;
	let current;

	headerpaneldivider0 = new HeaderPanelDivider({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	headerpanellink0 = new HeaderPanelLink({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	headerpaneldivider1 = new HeaderPanelDivider({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	function combobox_items_binding(value) {
		/*combobox_items_binding*/ ctx[2](value);
	}

	let combobox_props = { placeholder: "Select run" };

	if (/*items*/ ctx[1] !== void 0) {
		combobox_props.items = /*items*/ ctx[1];
	}

	combobox = new ComboBox({ props: combobox_props });
	binding_callbacks.push(() => bind(combobox, 'items', combobox_items_binding));

	headerpanellink1 = new HeaderPanelLink({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	headerpanellink2 = new HeaderPanelLink({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	headerpanellink3 = new HeaderPanelLink({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	headerpanellink4 = new HeaderPanelLink({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(headerpaneldivider0.$$.fragment);
			t0 = space();
			create_component(headerpanellink0.$$.fragment);
			t1 = space();
			create_component(headerpaneldivider1.$$.fragment);
			t2 = space();
			div = element("div");
			create_component(combobox.$$.fragment);
			t3 = space();
			create_component(headerpanellink1.$$.fragment);
			t4 = space();
			create_component(headerpanellink2.$$.fragment);
			t5 = space();
			create_component(headerpanellink3.$$.fragment);
			t6 = space();
			create_component(headerpanellink4.$$.fragment);
			set_style(div, "padding", ".375rem 1rem");
		},
		m(target, anchor) {
			mount_component(headerpaneldivider0, target, anchor);
			insert(target, t0, anchor);
			mount_component(headerpanellink0, target, anchor);
			insert(target, t1, anchor);
			mount_component(headerpaneldivider1, target, anchor);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			mount_component(combobox, div, null);
			insert(target, t3, anchor);
			mount_component(headerpanellink1, target, anchor);
			insert(target, t4, anchor);
			mount_component(headerpanellink2, target, anchor);
			insert(target, t5, anchor);
			mount_component(headerpanellink3, target, anchor);
			insert(target, t6, anchor);
			mount_component(headerpanellink4, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const headerpaneldivider0_changes = {};

			if (dirty & /*$$scope*/ 32) {
				headerpaneldivider0_changes.$$scope = { dirty, ctx };
			}

			headerpaneldivider0.$set(headerpaneldivider0_changes);
			const headerpanellink0_changes = {};

			if (dirty & /*$$scope*/ 32) {
				headerpanellink0_changes.$$scope = { dirty, ctx };
			}

			headerpanellink0.$set(headerpanellink0_changes);
			const headerpaneldivider1_changes = {};

			if (dirty & /*$$scope*/ 32) {
				headerpaneldivider1_changes.$$scope = { dirty, ctx };
			}

			headerpaneldivider1.$set(headerpaneldivider1_changes);
			const combobox_changes = {};

			if (!updating_items && dirty & /*items*/ 2) {
				updating_items = true;
				combobox_changes.items = /*items*/ ctx[1];
				add_flush_callback(() => updating_items = false);
			}

			combobox.$set(combobox_changes);
			const headerpanellink1_changes = {};

			if (dirty & /*$$scope*/ 32) {
				headerpanellink1_changes.$$scope = { dirty, ctx };
			}

			headerpanellink1.$set(headerpanellink1_changes);
			const headerpanellink2_changes = {};

			if (dirty & /*$$scope*/ 32) {
				headerpanellink2_changes.$$scope = { dirty, ctx };
			}

			headerpanellink2.$set(headerpanellink2_changes);
			const headerpanellink3_changes = {};

			if (dirty & /*$$scope*/ 32) {
				headerpanellink3_changes.$$scope = { dirty, ctx };
			}

			headerpanellink3.$set(headerpanellink3_changes);
			const headerpanellink4_changes = {};

			if (dirty & /*$$scope*/ 32) {
				headerpanellink4_changes.$$scope = { dirty, ctx };
			}

			headerpanellink4.$set(headerpanellink4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(headerpaneldivider0.$$.fragment, local);
			transition_in(headerpanellink0.$$.fragment, local);
			transition_in(headerpaneldivider1.$$.fragment, local);
			transition_in(combobox.$$.fragment, local);
			transition_in(headerpanellink1.$$.fragment, local);
			transition_in(headerpanellink2.$$.fragment, local);
			transition_in(headerpanellink3.$$.fragment, local);
			transition_in(headerpanellink4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(headerpaneldivider0.$$.fragment, local);
			transition_out(headerpanellink0.$$.fragment, local);
			transition_out(headerpaneldivider1.$$.fragment, local);
			transition_out(combobox.$$.fragment, local);
			transition_out(headerpanellink1.$$.fragment, local);
			transition_out(headerpanellink2.$$.fragment, local);
			transition_out(headerpanellink3.$$.fragment, local);
			transition_out(headerpanellink4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(headerpaneldivider0, detaching);
			if (detaching) detach(t0);
			destroy_component(headerpanellink0, detaching);
			if (detaching) detach(t1);
			destroy_component(headerpaneldivider1, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			destroy_component(combobox);
			if (detaching) detach(t3);
			destroy_component(headerpanellink1, detaching);
			if (detaching) detach(t4);
			destroy_component(headerpanellink2, detaching);
			if (detaching) detach(t5);
			destroy_component(headerpanellink3, detaching);
			if (detaching) detach(t6);
			destroy_component(headerpanellink4, detaching);
		}
	};
}

// (19:0) <HeaderAction bind:isOpen icon={Archive24}>
function create_default_slot(ctx) {
	let headerpanellinks;
	let current;

	headerpanellinks = new HeaderPanelLinks({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(headerpanellinks.$$.fragment);
		},
		m(target, anchor) {
			mount_component(headerpanellinks, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const headerpanellinks_changes = {};

			if (dirty & /*$$scope, items*/ 34) {
				headerpanellinks_changes.$$scope = { dirty, ctx };
			}

			headerpanellinks.$set(headerpanellinks_changes);
		},
		i(local) {
			if (current) return;
			transition_in(headerpanellinks.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(headerpanellinks.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(headerpanellinks, detaching);
		}
	};
}

function create_fragment(ctx) {
	let headeraction;
	let updating_isOpen;
	let current;

	function headeraction_isOpen_binding(value) {
		/*headeraction_isOpen_binding*/ ctx[3](value);
	}

	let headeraction_props = {
		icon: Archive24,
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*isOpen*/ ctx[0] !== void 0) {
		headeraction_props.isOpen = /*isOpen*/ ctx[0];
	}

	headeraction = new HeaderAction({ props: headeraction_props });
	binding_callbacks.push(() => bind(headeraction, 'isOpen', headeraction_isOpen_binding));

	return {
		c() {
			create_component(headeraction.$$.fragment);
		},
		m(target, anchor) {
			mount_component(headeraction, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const headeraction_changes = {};

			if (dirty & /*$$scope, items*/ 34) {
				headeraction_changes.$$scope = { dirty, ctx };
			}

			if (!updating_isOpen && dirty & /*isOpen*/ 1) {
				updating_isOpen = true;
				headeraction_changes.isOpen = /*isOpen*/ ctx[0];
				add_flush_callback(() => updating_isOpen = false);
			}

			headeraction.$set(headeraction_changes);
		},
		i(local) {
			if (current) return;
			transition_in(headeraction.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(headeraction.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(headeraction, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $runs;
	component_subscribe($$self, runs, $$value => $$invalidate(4, $runs = $$value));
	let { isOpen = true } = $$props;
	let items = $runs?.map(r => ({ id: r.id, text: r.meta.name }));

	function combobox_items_binding(value) {
		items = value;
		$$invalidate(1, items);
	}

	function headeraction_isOpen_binding(value) {
		isOpen = value;
		$$invalidate(0, isOpen);
	}

	$$self.$$set = $$props => {
		if ('isOpen' in $$props) $$invalidate(0, isOpen = $$props.isOpen);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*items*/ 2) {
			$: console.log(items);
		}
	};

	return [isOpen, items, combobox_items_binding, headeraction_isOpen_binding];
}

class SidebarRunSelector extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { isOpen: 0 });
	}
}

export default SidebarRunSelector;