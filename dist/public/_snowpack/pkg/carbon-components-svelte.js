import { S as SvelteComponent, i as init, s as safe_not_equal, c as create_slot, e as empty, a as insert, b as svg_element, t as text, d as append, f as set_data, g as detach, h as assign, j as attr, k as set_svg_attributes, l as listen, u as update_slot_base, m as get_all_dirty_from_scope, n as get_slot_changes, o as get_spread_update, p as transition_in, q as transition_out, r as run_all, v as exclude_internal_props, w as bubble, x as noop, y as compute_rest_props, z as element, A as set_attributes, B as toggle_class, C as group_outros, D as check_outros, E as getContext, F as compute_slots, G as binding_callbacks, H as space, I as create_component, J as mount_component, K as destroy_component, L as get_spread_object, M as createEventDispatcher, N as setContext, O as afterUpdate, P as prevent_default, Q as onMount, R as stop_propagation, T as add_flush_callback, U as tick, V as bind, W as update_keyed_each, X as outro_and_destroy_block, Y as component_subscribe, Z as destroy_block, _ as HtmlTag, $ as destroy_each, a0 as set_input_value, a1 as add_render_callback, a2 as append_styles, a3 as create_bidirectional_transition } from './common/index-26537503.js';
import { w as writable, d as derived } from './common/index-7e8bc369.js';
import { s as slide } from './common/index-d62ac288.js';

/* node_modules\carbon-components-svelte\src\icons\ChevronRight16.svelte generated by Svelte v3.46.4 */

function create_if_block(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (44:8)      
function fallback_block(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ChevronRight16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M11 8L6 13 5.3 12.3 9.6 8 5.3 3.7 6 3z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ChevronRight16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ChevronRight16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\Button\ButtonSkeleton.svelte generated by Svelte v3.46.4 */

function create_else_block(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === 'small' || /*small*/ ctx[2]);
			toggle_class(div, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_1*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === 'small' || /*small*/ ctx[2]);
			toggle_class(div, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (22:0) {#if href}
function create_if_block$1(ctx) {
	let a;
	let t_value = "" + "";
	let t;
	let a_rel_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[3].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		{ role: "button" },
		/*$$restProps*/ ctx[3]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			t = text(t_value);
			set_attributes(a, a_data);
			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === 'small' || /*small*/ ctx[2]);
			toggle_class(a, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(a, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[4]),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*href*/ 1 && { href: /*href*/ ctx[0] },
				dirty & /*$$restProps*/ 8 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[3].target === '_blank'
				? 'noopener noreferrer'
				: undefined) && { rel: a_rel_value },
				{ role: "button" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === 'small' || /*small*/ ctx[2]);
			toggle_class(a, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(a, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return create_if_block$1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","size","small"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { href = undefined } = $$props;
	let { size = "default" } = $$props;
	let { small = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('small' in $$new_props) $$invalidate(2, small = $$new_props.small);
	};

	return [
		href,
		size,
		small,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class ButtonSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { href: 0, size: 1, small: 2 });
	}
}

/* node_modules\carbon-components-svelte\src\Button\Button.svelte generated by Svelte v3.46.4 */
const get_default_slot_changes = dirty => ({ props: dirty[0] & /*buttonProps*/ 512 });
const get_default_slot_context = ctx => ({ props: /*buttonProps*/ ctx[9] });

// (169:0) {:else}
function create_else_block$1(ctx) {
	let button;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[0] && create_if_block_4(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[4]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [/*buttonProps*/ ctx[9]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t);

			if (default_slot) {
				default_slot.m(button, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[33](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_2*/ ctx[24]),
					listen(button, "mouseover", /*mouseover_handler_2*/ ctx[25]),
					listen(button, "mouseenter", /*mouseenter_handler_2*/ ctx[26]),
					listen(button, "mouseleave", /*mouseleave_handler_2*/ ctx[27])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 16) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[4];

			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[33](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (149:28) 
function create_if_block_2(ctx) {
	let a;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[0] && create_if_block_3(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[4]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let a_levels = [/*buttonProps*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			if (if_block) if_block.m(a, null);
			append(a, t);

			if (default_slot) {
				default_slot.m(a, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, a, null);
			}

			/*a_binding*/ ctx[32](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler_1*/ ctx[20]),
					listen(a, "mouseover", /*mouseover_handler_1*/ ctx[21]),
					listen(a, "mouseenter", /*mouseenter_handler_1*/ ctx[22]),
					listen(a, "mouseleave", /*mouseleave_handler_1*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(a, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 16) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[4];

			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, a, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*a_binding*/ ctx[32](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (147:13) 
function create_if_block_1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope, buttonProps*/ 262656)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (136:0) {#if skeleton}
function create_if_block$2(ctx) {
	let buttonskeleton;
	let current;

	const buttonskeleton_spread_levels = [
		{ href: /*href*/ ctx[8] },
		{ size: /*size*/ ctx[2] },
		/*$$restProps*/ ctx[10],
		{
			style: /*hasIconOnly*/ ctx[0] && 'width: 3rem;'
		}
	];

	let buttonskeleton_props = {};

	for (let i = 0; i < buttonskeleton_spread_levels.length; i += 1) {
		buttonskeleton_props = assign(buttonskeleton_props, buttonskeleton_spread_levels[i]);
	}

	buttonskeleton = new ButtonSkeleton({ props: buttonskeleton_props });
	buttonskeleton.$on("click", /*click_handler*/ ctx[28]);
	buttonskeleton.$on("mouseover", /*mouseover_handler*/ ctx[29]);
	buttonskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[30]);
	buttonskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[31]);

	return {
		c() {
			create_component(buttonskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(buttonskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const buttonskeleton_changes = (dirty[0] & /*href, size, $$restProps, hasIconOnly*/ 1285)
			? get_spread_update(buttonskeleton_spread_levels, [
					dirty[0] & /*href*/ 256 && { href: /*href*/ ctx[8] },
					dirty[0] & /*size*/ 4 && { size: /*size*/ ctx[2] },
					dirty[0] & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10]),
					dirty[0] & /*hasIconOnly*/ 1 && {
						style: /*hasIconOnly*/ ctx[0] && 'width: 3rem;'
					}
				])
			: {};

			buttonskeleton.$set(buttonskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(buttonskeleton, detaching);
		}
	};
}

// (178:4) {#if hasIconOnly}
function create_if_block_4(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[4]);
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 16) set_data(t, /*iconDescription*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (159:4) {#if hasIconOnly}
function create_if_block_3(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[4]);
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 16) set_data(t, /*iconDescription*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$2, create_if_block_1, create_if_block_2, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[6]) return 0;
		if (/*as*/ ctx[5]) return 1;
		if (/*href*/ ctx[8] && !/*disabled*/ ctx[7]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let buttonProps;

	const omit_props_names = [
		"kind","size","expressive","isSelected","hasIconOnly","icon","iconDescription","tooltipAlignment","tooltipPosition","as","skeleton","disabled","href","tabindex","type","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { kind = "primary" } = $$props;
	let { size = "default" } = $$props;
	let { expressive = false } = $$props;
	let { isSelected = false } = $$props;
	let { hasIconOnly = false } = $$props;
	let { icon = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { tooltipAlignment = "center" } = $$props;
	let { tooltipPosition = "bottom" } = $$props;
	let { as = false } = $$props;
	let { skeleton = false } = $$props;
	let { disabled = false } = $$props;
	let { href = undefined } = $$props;
	let { tabindex = "0" } = $$props;
	let { type = "button" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ComposedModal");

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(11, kind = $$new_props.kind);
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('expressive' in $$new_props) $$invalidate(12, expressive = $$new_props.expressive);
		if ('isSelected' in $$new_props) $$invalidate(13, isSelected = $$new_props.isSelected);
		if ('hasIconOnly' in $$new_props) $$invalidate(0, hasIconOnly = $$new_props.hasIconOnly);
		if ('icon' in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ('iconDescription' in $$new_props) $$invalidate(4, iconDescription = $$new_props.iconDescription);
		if ('tooltipAlignment' in $$new_props) $$invalidate(14, tooltipAlignment = $$new_props.tooltipAlignment);
		if ('tooltipPosition' in $$new_props) $$invalidate(15, tooltipPosition = $$new_props.tooltipPosition);
		if ('as' in $$new_props) $$invalidate(5, as = $$new_props.as);
		if ('skeleton' in $$new_props) $$invalidate(6, skeleton = $$new_props.skeleton);
		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ('href' in $$new_props) $$invalidate(8, href = $$new_props.href);
		if ('tabindex' in $$new_props) $$invalidate(16, tabindex = $$new_props.tabindex);
		if ('type' in $$new_props) $$invalidate(17, type = $$new_props.type);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*ref*/ 2) {
			 if (ctx && ref) {
				ctx.declareRef(ref);
			}
		}

		if ($$self.$$.dirty[0] & /*icon*/ 8) {
			 $$invalidate(0, hasIconOnly = icon && !$$slots.default);
		}

		 $$invalidate(9, buttonProps = {
			type: href && !disabled ? undefined : type,
			tabindex,
			disabled: disabled === true ? true : undefined,
			href,
			"aria-pressed": hasIconOnly && kind === "ghost" && !href
			? isSelected
			: undefined,
			...$$restProps,
			class: [
				"bx--btn",
				expressive && "bx--btn--expressive",
				(size === "small" && !expressive || size === "sm" && !expressive || size === "small" && !expressive) && "bx--btn--sm",
				size === "field" && !expressive || size === "md" && !expressive && "bx--btn--md",
				size === "field" && "bx--btn--field",
				size === "small" && "bx--btn--sm",
				size === "lg" && "bx--btn--lg",
				size === "xl" && "bx--btn--xl",
				kind && `bx--btn--${kind}`,
				disabled && "bx--btn--disabled",
				hasIconOnly && "bx--btn--icon-only",
				hasIconOnly && "bx--tooltip__trigger",
				hasIconOnly && "bx--tooltip--a11y",
				hasIconOnly && tooltipPosition && `bx--btn--icon-only--${tooltipPosition}`,
				hasIconOnly && tooltipAlignment && `bx--tooltip--align-${tooltipAlignment}`,
				hasIconOnly && isSelected && kind === "ghost" && "bx--btn--selected",
				$$restProps.class
			].filter(Boolean).join(" ")
		});
	};

	return [
		hasIconOnly,
		ref,
		size,
		icon,
		iconDescription,
		as,
		skeleton,
		disabled,
		href,
		buttonProps,
		$$restProps,
		kind,
		expressive,
		isSelected,
		tooltipAlignment,
		tooltipPosition,
		tabindex,
		type,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		button_binding
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2,
			create_fragment$2,
			safe_not_equal,
			{
				kind: 11,
				size: 2,
				expressive: 12,
				isSelected: 13,
				hasIconOnly: 0,
				icon: 3,
				iconDescription: 4,
				tooltipAlignment: 14,
				tooltipPosition: 15,
				as: 5,
				skeleton: 6,
				disabled: 7,
				href: 8,
				tabindex: 16,
				type: 17,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

/* node_modules\carbon-components-svelte\src\Checkbox\CheckboxSkeleton.svelte generated by Svelte v3.46.4 */

function create_fragment$3(ctx) {
	let div;
	let span;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			span = element("span");
			toggle_class(span, "bx--checkbox-label-text", true);
			toggle_class(span, "bx--skeleton", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
			toggle_class(div, "bx--checkbox-label", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[1]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
			toggle_class(div, "bx--checkbox-label", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class CheckboxSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\Checkbox\Checkbox.svelte generated by Svelte v3.46.4 */
const get_labelText_slot_changes = dirty => ({});
const get_labelText_slot_context = ctx => ({});

// (76:0) {:else}
function create_else_block$2(ctx) {
	let div;
	let input;
	let t;
	let label;
	let span;
	let current;
	let mounted;
	let dispose;
	const labelText_slot_template = /*#slots*/ ctx[17].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[16], get_labelText_slot_context);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$1(ctx);
	let div_levels = [/*$$restProps*/ ctx[15]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t = space();
			label = element("label");
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(input, "type", "checkbox");
			input.value = /*value*/ ctx[3];
			input.checked = /*checked*/ ctx[0];
			input.disabled = /*disabled*/ ctx[8];
			attr(input, "id", /*id*/ ctx[13]);
			input.indeterminate = /*indeterminate*/ ctx[4];
			attr(input, "name", /*name*/ ctx[11]);
			input.required = /*required*/ ctx[6];
			input.readOnly = /*readonly*/ ctx[7];
			toggle_class(input, "bx--checkbox", true);
			toggle_class(span, "bx--checkbox-label-text", true);
			toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			attr(label, "for", /*id*/ ctx[13]);
			attr(label, "title", /*title*/ ctx[12]);
			toggle_class(label, "bx--checkbox-label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			/*input_binding*/ ctx[28](input);
			append(div, t);
			append(div, label);
			append(label, span);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler_1*/ ctx[29]),
					listen(input, "change", /*change_handler*/ ctx[22]),
					listen(input, "blur", /*blur_handler*/ ctx[23]),
					listen(div, "click", /*click_handler_1*/ ctx[18]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[19]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[20]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*value*/ 8) {
				input.value = /*value*/ ctx[3];
			}

			if (!current || dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (!current || dirty & /*disabled*/ 256) {
				input.disabled = /*disabled*/ ctx[8];
			}

			if (!current || dirty & /*id*/ 8192) {
				attr(input, "id", /*id*/ ctx[13]);
			}

			if (!current || dirty & /*indeterminate*/ 16) {
				input.indeterminate = /*indeterminate*/ ctx[4];
			}

			if (!current || dirty & /*name*/ 2048) {
				attr(input, "name", /*name*/ ctx[11]);
			}

			if (!current || dirty & /*required*/ 64) {
				input.required = /*required*/ ctx[6];
			}

			if (!current || dirty & /*readonly*/ 128) {
				input.readOnly = /*readonly*/ ctx[7];
			}

			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[16],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[16], dirty, get_labelText_slot_changes),
						get_labelText_slot_context
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 512)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (dirty & /*hideLabel*/ 1024) {
				toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			}

			if (!current || dirty & /*id*/ 8192) {
				attr(label, "for", /*id*/ ctx[13]);
			}

			if (!current || dirty & /*title*/ 4096) {
				attr(label, "title", /*title*/ ctx[12]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 32768 && /*$$restProps*/ ctx[15]]));
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*input_binding*/ ctx[28](null);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (68:0) {#if skeleton}
function create_if_block$3(ctx) {
	let checkboxskeleton;
	let current;
	const checkboxskeleton_spread_levels = [/*$$restProps*/ ctx[15]];
	let checkboxskeleton_props = {};

	for (let i = 0; i < checkboxskeleton_spread_levels.length; i += 1) {
		checkboxskeleton_props = assign(checkboxskeleton_props, checkboxskeleton_spread_levels[i]);
	}

	checkboxskeleton = new CheckboxSkeleton({ props: checkboxskeleton_props });
	checkboxskeleton.$on("click", /*click_handler*/ ctx[24]);
	checkboxskeleton.$on("mouseover", /*mouseover_handler*/ ctx[25]);
	checkboxskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[26]);
	checkboxskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[27]);

	return {
		c() {
			create_component(checkboxskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkboxskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkboxskeleton_changes = (dirty & /*$$restProps*/ 32768)
			? get_spread_update(checkboxskeleton_spread_levels, [get_spread_object(/*$$restProps*/ ctx[15])])
			: {};

			checkboxskeleton.$set(checkboxskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkboxskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkboxskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkboxskeleton, detaching);
		}
	};
}

// (115:31)            
function fallback_block$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 512) set_data(t, /*labelText*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$4(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$3, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let useGroup;

	const omit_props_names = [
		"value","checked","group","indeterminate","skeleton","required","readonly","disabled","labelText","hideLabel","name","title","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = "" } = $$props;
	let { checked = false } = $$props;
	let { group = undefined } = $$props;
	let { indeterminate = false } = $$props;
	let { skeleton = false } = $$props;
	let { required = false } = $$props;
	let { readonly = false } = $$props;
	let { disabled = false } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { name = "" } = $$props;
	let { title = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(2, ref);
		});
	}

	const change_handler_1 = () => {
		if (useGroup) {
			$$invalidate(1, group = group.includes(value)
			? group.filter(_value => _value !== value)
			: [...group, value]);
		} else {
			$$invalidate(0, checked = !checked);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(3, value = $$new_props.value);
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('group' in $$new_props) $$invalidate(1, group = $$new_props.group);
		if ('indeterminate' in $$new_props) $$invalidate(4, indeterminate = $$new_props.indeterminate);
		if ('skeleton' in $$new_props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ('required' in $$new_props) $$invalidate(6, required = $$new_props.required);
		if ('readonly' in $$new_props) $$invalidate(7, readonly = $$new_props.readonly);
		if ('disabled' in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ('labelText' in $$new_props) $$invalidate(9, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(10, hideLabel = $$new_props.hideLabel);
		if ('name' in $$new_props) $$invalidate(11, name = $$new_props.name);
		if ('title' in $$new_props) $$invalidate(12, title = $$new_props.title);
		if ('id' in $$new_props) $$invalidate(13, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(2, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*group*/ 2) {
			 $$invalidate(14, useGroup = Array.isArray(group));
		}

		if ($$self.$$.dirty & /*useGroup, group, value, checked*/ 16395) {
			 $$invalidate(0, checked = useGroup ? group.includes(value) : checked);
		}

		if ($$self.$$.dirty & /*checked*/ 1) {
			 dispatch("check", checked);
		}
	};

	return [
		checked,
		group,
		ref,
		value,
		indeterminate,
		skeleton,
		required,
		readonly,
		disabled,
		labelText,
		hideLabel,
		name,
		title,
		id,
		useGroup,
		$$restProps,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		change_handler,
		blur_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		input_binding,
		change_handler_1
	];
}

class Checkbox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			value: 3,
			checked: 0,
			group: 1,
			indeterminate: 4,
			skeleton: 5,
			required: 6,
			readonly: 7,
			disabled: 8,
			labelText: 9,
			hideLabel: 10,
			name: 11,
			title: 12,
			id: 13,
			ref: 2
		});
	}
}

/* node_modules\carbon-components-svelte\src\Checkbox\InlineCheckbox.svelte generated by Svelte v3.46.4 */

function create_fragment$5(ctx) {
	let input;
	let input_checked_value;
	let input_aria_checked_value;
	let t;
	let label;
	let label_aria_label_value;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "checkbox" },
		{
			checked: input_checked_value = /*indeterminate*/ ctx[2] ? false : /*checked*/ ctx[1]
		},
		{ indeterminate: /*indeterminate*/ ctx[2] },
		{ id: /*id*/ ctx[4] },
		/*$$restProps*/ ctx[5],
		{ "aria-label": undefined },
		{
			"aria-checked": input_aria_checked_value = /*indeterminate*/ ctx[2] ? 'mixed' : /*checked*/ ctx[1]
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			t = space();
			label = element("label");
			set_attributes(input, input_data);
			toggle_class(input, "bx--checkbox", true);
			attr(label, "for", /*id*/ ctx[4]);
			attr(label, "title", /*title*/ ctx[3]);
			attr(label, "aria-label", label_aria_label_value = /*$$props*/ ctx[6]['aria-label']);
			toggle_class(label, "bx--checkbox-label", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[8](input);
			insert(target, t, anchor);
			insert(target, label, anchor);

			if (!mounted) {
				dispose = listen(input, "change", /*change_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "checkbox" },
				dirty & /*indeterminate, checked*/ 6 && input_checked_value !== (input_checked_value = /*indeterminate*/ ctx[2] ? false : /*checked*/ ctx[1]) && { checked: input_checked_value },
				dirty & /*indeterminate*/ 4 && { indeterminate: /*indeterminate*/ ctx[2] },
				dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
				{ "aria-label": undefined },
				dirty & /*indeterminate, checked*/ 6 && input_aria_checked_value !== (input_aria_checked_value = /*indeterminate*/ ctx[2] ? 'mixed' : /*checked*/ ctx[1]) && { "aria-checked": input_aria_checked_value }
			]));

			toggle_class(input, "bx--checkbox", true);

			if (dirty & /*id*/ 16) {
				attr(label, "for", /*id*/ ctx[4]);
			}

			if (dirty & /*title*/ 8) {
				attr(label, "title", /*title*/ ctx[3]);
			}

			if (dirty & /*$$props*/ 64 && label_aria_label_value !== (label_aria_label_value = /*$$props*/ ctx[6]['aria-label'])) {
				attr(label, "aria-label", label_aria_label_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[8](null);
			if (detaching) detach(t);
			if (detaching) detach(label);
			mounted = false;
			dispose();
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","indeterminate","title","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { checked = false } = $$props;
	let { indeterminate = false } = $$props;
	let { title = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('checked' in $$new_props) $$invalidate(1, checked = $$new_props.checked);
		if ('indeterminate' in $$new_props) $$invalidate(2, indeterminate = $$new_props.indeterminate);
		if ('title' in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ('id' in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	$$props = exclude_internal_props($$props);

	return [
		ref,
		checked,
		indeterminate,
		title,
		id,
		$$restProps,
		$$props,
		change_handler,
		input_binding
	];
}

class InlineCheckbox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
			checked: 1,
			indeterminate: 2,
			title: 3,
			id: 4,
			ref: 0
		});
	}
}

/* node_modules\carbon-components-svelte\src\ContentSwitcher\ContentSwitcher.svelte generated by Svelte v3.46.4 */

function create_fragment$6(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let div_levels = [{ role: "tablist" }, /*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--content-switcher", true);
			toggle_class(div, "bx--content-switcher--light", /*light*/ ctx[0]);
			toggle_class(div, "bx--content-switcher--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(div, "bx--content-switcher--xl", /*size*/ ctx[1] === 'xl');
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "tablist" }, dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--content-switcher", true);
			toggle_class(div, "bx--content-switcher--light", /*light*/ ctx[0]);
			toggle_class(div, "bx--content-switcher--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(div, "bx--content-switcher--xl", /*size*/ ctx[1] === 'xl');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	let currentIndex;
	let switches;
	const omit_props_names = ["selectedIndex","light","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selectedIndex = 0 } = $$props;
	let { light = false } = $$props;
	let { size = undefined } = $$props;
	const dispatch = createEventDispatcher();
	const currentId = writable(null);

	setContext("ContentSwitcher", {
		currentId,
		add: ({ id, text, selected }) => {
			if (selected) {
				$$invalidate(3, selectedIndex = switches.length);
			}

			$$invalidate(5, switches = [...switches, { id, text, selected }]);
		},
		update: id => {
			$$invalidate(3, selectedIndex = switches.map(({ id }) => id).indexOf(id));
		},
		change: direction => {
			let index = currentIndex + direction;

			if (index < 0) {
				index = switches.length - 1;
			} else if (index >= switches.length) {
				index = 0;
			}

			$$invalidate(3, selectedIndex = index);
		}
	});

	afterUpdate(() => {
		if (selectedIndex !== currentIndex) {
			$$invalidate(4, currentIndex = selectedIndex);
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selectedIndex' in $$new_props) $$invalidate(3, selectedIndex = $$new_props.selectedIndex);
		if ('light' in $$new_props) $$invalidate(0, light = $$new_props.light);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*switches, currentIndex*/ 48) {
			 if (switches[currentIndex]) {
				dispatch("change", currentIndex);
				currentId.set(switches[currentIndex].id);
			}
		}
	};

	 $$invalidate(4, currentIndex = -1);
	 $$invalidate(5, switches = []);

	return [
		light,
		size,
		$$restProps,
		selectedIndex,
		currentIndex,
		switches,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ContentSwitcher extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { selectedIndex: 3, light: 0, size: 1 });
	}
}

/* node_modules\carbon-components-svelte\src\ContentSwitcher\Switch.svelte generated by Svelte v3.46.4 */

function fallback_block$2(ctx) {
	let t;

	return {
		c() {
			t = text(/*text*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 4) set_data(t, /*text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$7(ctx) {
	let button;
	let span;
	let button_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$2(ctx);

	let button_levels = [
		{ type: "button" },
		{ role: "tab" },
		{
			tabindex: button_tabindex_value = /*selected*/ ctx[0] ? '0' : '-1'
		},
		{ "aria-selected": /*selected*/ ctx[0] },
		{ disabled: /*disabled*/ ctx[3] },
		{ id: /*id*/ ctx[4] },
		/*$$restProps*/ ctx[6]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			span = element("span");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			toggle_class(span, "bx--content-switcher__label", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--content-switcher-btn", true);
			toggle_class(button, "bx--content-switcher--selected", /*selected*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, span);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(span, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[14](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[9]),
					listen(button, "click", prevent_default(/*click_handler_1*/ ctx[15])),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[12]),
					listen(button, "keydown", /*keydown_handler*/ ctx[13]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ role: "tab" },
				(!current || dirty & /*selected*/ 1 && button_tabindex_value !== (button_tabindex_value = /*selected*/ ctx[0] ? '0' : '-1')) && { tabindex: button_tabindex_value },
				(!current || dirty & /*selected*/ 1) && { "aria-selected": /*selected*/ ctx[0] },
				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
				(!current || dirty & /*id*/ 16) && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(button, "bx--content-switcher-btn", true);
			toggle_class(button, "bx--content-switcher--selected", /*selected*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	const omit_props_names = ["text","selected","disabled","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { text = "Provide text" } = $$props;
	let { selected = false } = $$props;
	let { disabled = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ContentSwitcher");
	ctx.add({ id, text, selected });

	const unsubscribe = ctx.currentId.subscribe($ => {
		$$invalidate(0, selected = $ === id);
	});

	afterUpdate(() => {
		if (selected) {
			ref.focus();
		}
	});

	onMount(() => {
		return () => unsubscribe();
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		ctx.update(id);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'ArrowRight') {
			ctx.change(1);
		} else if (key === 'ArrowLeft') {
			ctx.change(-1);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('text' in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ('selected' in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('id' in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		selected,
		ref,
		text,
		disabled,
		id,
		ctx,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		button_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class Switch extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			text: 2,
			selected: 0,
			disabled: 3,
			id: 4,
			ref: 1
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\Checkmark16.svelte generated by Svelte v3.46.4 */

function create_if_block$4(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (44:8)      
function fallback_block$3(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$8(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$3(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Checkmark16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M13 24L4 15 5.414 13.586 13 21.171 26.586 7.586 28 9 13 24z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Checkmark16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$8($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Checkmark16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\WarningFilled16.svelte generated by Svelte v3.46.4 */

function create_if_block$5(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (49:8)      
function fallback_block$4(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$5(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$9(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$4(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M8,1C4.2,1,1,4.2,1,8s3.2,7,7,7s7-3.1,7-7S11.9,1,8,1z M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2\tc-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z");
			attr(path1, "d", "M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8\tc0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$9($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningFilled16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\WarningAltFilled16.svelte generated by Svelte v3.46.4 */

function create_if_block$6(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (51:8)      
function fallback_block$5(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$6(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$6(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$a(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$5(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningAltFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Zm-1.125-5h2.25V12h-2.25Z");
			attr(path0, "data-icon-path", "inner-path");
			attr(path1, "d", "M16.002,6.1714h-.004L4.6487,27.9966,4.6506,28H27.3494l.0019-.0034ZM14.875,12h2.25v9h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z");
			attr(path2, "d", "M29,30H3a1,1,0,0,1-.8872-1.4614l13-25a1,1,0,0,1,1.7744,0l13,25A1,1,0,0,1,29,30ZM4.6507,28H27.3493l.002-.0033L16.002,6.1714h-.004L4.6487,27.9967Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);
			append(svg, path2);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningAltFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$a($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningAltFilled16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\ListBox\ListBox.svelte generated by Svelte v3.46.4 */

function create_if_block_1$1(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[6]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*invalidText*/ 64) set_data(t, /*invalidText*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (62:0) {#if !invalid && warn}
function create_if_block$7(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[8]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*warnText*/ 256) set_data(t, /*warnText*/ ctx[8]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$b(ctx) {
	let div;
	let div_data_invalid_value;
	let t0;
	let t1;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		{ role: "listbox" },
		{ tabindex: "-1" },
		{
			"data-invalid": div_data_invalid_value = /*invalid*/ ctx[5] || undefined
		},
		/*$$restProps*/ ctx[9]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[5] && create_if_block_1$1(ctx);
	let if_block1 = !/*invalid*/ ctx[5] && /*warn*/ ctx[7] && create_if_block$7(ctx);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box", true);
			toggle_class(div, "bx--list-box--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div, "bx--list-box--xl", /*size*/ ctx[0] === 'xl');
			toggle_class(div, "bx--list-box--inline", /*type*/ ctx[1] === 'inline');
			toggle_class(div, "bx--list-box--disabled", /*disabled*/ ctx[4]);
			toggle_class(div, "bx--list-box--expanded", /*open*/ ctx[2]);
			toggle_class(div, "bx--list-box--light", /*light*/ ctx[3]);
			toggle_class(div, "bx--list-box--warning", !/*invalid*/ ctx[5] && /*warn*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "keydown", /*keydown_handler*/ ctx[12]),
					listen(div, "keydown", keydown_handler_1),
					listen(div, "click", prevent_default(/*click_handler*/ ctx[13]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "listbox" },
				{ tabindex: "-1" },
				(!current || dirty & /*invalid*/ 32 && div_data_invalid_value !== (div_data_invalid_value = /*invalid*/ ctx[5] || undefined)) && { "data-invalid": div_data_invalid_value },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(div, "bx--list-box", true);
			toggle_class(div, "bx--list-box--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div, "bx--list-box--xl", /*size*/ ctx[0] === 'xl');
			toggle_class(div, "bx--list-box--inline", /*type*/ ctx[1] === 'inline');
			toggle_class(div, "bx--list-box--disabled", /*disabled*/ ctx[4]);
			toggle_class(div, "bx--list-box--expanded", /*open*/ ctx[2]);
			toggle_class(div, "bx--list-box--light", /*light*/ ctx[3]);
			toggle_class(div, "bx--list-box--warning", !/*invalid*/ ctx[5] && /*warn*/ ctx[7]);

			if (/*invalid*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$1(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*invalid*/ ctx[5] && /*warn*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$7(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

const keydown_handler_1 = e => {
	if (e.key === 'Escape') {
		e.stopPropagation();
	}
};

function instance$b($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","type","open","light","disabled","invalid","invalidText","warn","warnText"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { type = "default" } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('type' in $$new_props) $$invalidate(1, type = $$new_props.type);
		if ('open' in $$new_props) $$invalidate(2, open = $$new_props.open);
		if ('light' in $$new_props) $$invalidate(3, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('invalid' in $$new_props) $$invalidate(5, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(6, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(7, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(8, warnText = $$new_props.warnText);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	return [
		size,
		type,
		open,
		light,
		disabled,
		invalid,
		invalidText,
		warn,
		warnText,
		$$restProps,
		$$scope,
		slots,
		keydown_handler,
		click_handler
	];
}

class ListBox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
			size: 0,
			type: 1,
			open: 2,
			light: 3,
			disabled: 4,
			invalid: 5,
			invalidText: 6,
			warn: 7,
			warnText: 8
		});
	}
}

/* node_modules\carbon-components-svelte\src\ListBox\ListBoxField.svelte generated by Svelte v3.46.4 */

function create_fragment$c(ctx) {
	let div;
	let div_aria_owns_value;
	let div_aria_controls_value;
	let div_aria_label_value;
	let div_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		{ role: /*role*/ ctx[2] },
		{ "aria-expanded": /*ariaExpanded*/ ctx[6] },
		{
			"aria-owns": div_aria_owns_value = /*ariaExpanded*/ ctx[6] && /*menuId*/ ctx[5] || undefined
		},
		{
			"aria-controls": div_aria_controls_value = /*ariaExpanded*/ ctx[6] && /*menuId*/ ctx[5] || undefined
		},
		{ "aria-disabled": /*disabled*/ ctx[1] },
		{
			"aria-label": div_aria_label_value = /*ariaExpanded*/ ctx[6]
			? /*translateWithId*/ ctx[4]('close')
			: /*translateWithId*/ ctx[4]('open')
		},
		{
			tabindex: div_tabindex_value = /*disabled*/ ctx[1] ? '-1' : /*tabindex*/ ctx[3]
		},
		/*$$restProps*/ ctx[7]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__field", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[19](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[12]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(div, "keydown", stop_propagation(/*keydown_handler*/ ctx[16])),
					listen(div, "focus", /*focus_handler*/ ctx[17]),
					listen(div, "blur", /*blur_handler*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*role*/ 4) && { role: /*role*/ ctx[2] },
				(!current || dirty & /*ariaExpanded*/ 64) && { "aria-expanded": /*ariaExpanded*/ ctx[6] },
				(!current || dirty & /*ariaExpanded, menuId*/ 96 && div_aria_owns_value !== (div_aria_owns_value = /*ariaExpanded*/ ctx[6] && /*menuId*/ ctx[5] || undefined)) && { "aria-owns": div_aria_owns_value },
				(!current || dirty & /*ariaExpanded, menuId*/ 96 && div_aria_controls_value !== (div_aria_controls_value = /*ariaExpanded*/ ctx[6] && /*menuId*/ ctx[5] || undefined)) && { "aria-controls": div_aria_controls_value },
				(!current || dirty & /*disabled*/ 2) && { "aria-disabled": /*disabled*/ ctx[1] },
				(!current || dirty & /*ariaExpanded, translateWithId*/ 80 && div_aria_label_value !== (div_aria_label_value = /*ariaExpanded*/ ctx[6]
				? /*translateWithId*/ ctx[4]('close')
				: /*translateWithId*/ ctx[4]('open'))) && { "aria-label": div_aria_label_value },
				(!current || dirty & /*disabled, tabindex*/ 10 && div_tabindex_value !== (div_tabindex_value = /*disabled*/ ctx[1] ? '-1' : /*tabindex*/ ctx[3])) && { tabindex: div_tabindex_value },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(div, "bx--list-box__field", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$c($$self, $$props, $$invalidate) {
	let ariaExpanded;
	let menuId;
	const omit_props_names = ["disabled","role","tabindex","translationIds","translateWithId","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { disabled = false } = $$props;
	let { role = "combobox" } = $$props;
	let { tabindex = "-1" } = $$props;
	const translationIds = { close: "close", open: "open" };
	let { translateWithId = id => defaultTranslations[id] } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.close]: "Close menu",
		[translationIds.open]: "Open menu"
	};

	const ctx = getContext("MultiSelect");

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(22, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('disabled' in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
		if ('role' in $$new_props) $$invalidate(2, role = $$new_props.role);
		if ('tabindex' in $$new_props) $$invalidate(3, tabindex = $$new_props.tabindex);
		if ('translateWithId' in $$new_props) $$invalidate(4, translateWithId = $$new_props.translateWithId);
		if ('id' in $$new_props) $$invalidate(9, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ref*/ 1) {
			 if (ctx && ref) {
				ctx.declareRef({ key: "field", ref });
			}
		}

		 $$invalidate(6, ariaExpanded = $$props["aria-expanded"]);

		if ($$self.$$.dirty & /*id*/ 512) {
			 $$invalidate(5, menuId = `menu-${id}`);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		ref,
		disabled,
		role,
		tabindex,
		translateWithId,
		menuId,
		ariaExpanded,
		$$restProps,
		translationIds,
		id,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		focus_handler,
		blur_handler,
		div_binding
	];
}

class ListBoxField extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
			disabled: 1,
			role: 2,
			tabindex: 3,
			translationIds: 8,
			translateWithId: 4,
			id: 9,
			ref: 0
		});
	}

	get translationIds() {
		return this.$$.ctx[8];
	}
}

/* node_modules\carbon-components-svelte\src\ListBox\ListBoxMenu.svelte generated by Svelte v3.46.4 */

function create_fragment$d(ctx) {
	let div;
	let div_id_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let div_levels = [
		{ role: "listbox" },
		{
			id: div_id_value = "menu-" + /*id*/ ctx[1]
		},
		/*$$restProps*/ ctx[2]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__menu", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[6](div);
			current = true;

			if (!mounted) {
				dispose = listen(div, "scroll", /*scroll_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "listbox" },
				(!current || dirty & /*id*/ 2 && div_id_value !== (div_id_value = "menu-" + /*id*/ ctx[1])) && { id: div_id_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(div, "bx--list-box__menu", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$d($$self, $$props, $$invalidate) {
	const omit_props_names = ["id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	function scroll_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [ref, id, $$restProps, $$scope, slots, scroll_handler, div_binding];
}

class ListBoxMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$d, create_fragment$d, safe_not_equal, { id: 1, ref: 0 });
	}
}

/* node_modules\carbon-components-svelte\src\icons\ChevronDown16.svelte generated by Svelte v3.46.4 */

function create_if_block$8(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (44:8)      
function fallback_block$6(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$8(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$e(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$6(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ChevronDown16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M8 11L3 6 3.7 5.3 8 9.6 12.3 5.3 13 6z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ChevronDown16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$e($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ChevronDown16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\ListBox\ListBoxMenuIcon.svelte generated by Svelte v3.46.4 */

function create_fragment$f(ctx) {
	let div;
	let chevrondown16;
	let current;
	let mounted;
	let dispose;

	chevrondown16 = new ChevronDown16({
			props: {
				"aria-label": /*description*/ ctx[1],
				title: /*description*/ ctx[1]
			}
		});

	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			create_component(chevrondown16.$$.fragment);
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__menu-icon", true);
			toggle_class(div, "bx--list-box__menu-icon--open", /*open*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(chevrondown16, div, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", prevent_default(/*click_handler*/ ctx[5]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const chevrondown16_changes = {};
			if (dirty & /*description*/ 2) chevrondown16_changes["aria-label"] = /*description*/ ctx[1];
			if (dirty & /*description*/ 2) chevrondown16_changes.title = /*description*/ ctx[1];
			chevrondown16.$set(chevrondown16_changes);
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--list-box__menu-icon", true);
			toggle_class(div, "bx--list-box__menu-icon--open", /*open*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(chevrondown16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondown16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(chevrondown16);
			mounted = false;
			dispose();
		}
	};
}

function instance$f($$self, $$props, $$invalidate) {
	let description;
	const omit_props_names = ["open","translationIds","translateWithId"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { open = false } = $$props;
	const translationIds = { close: "close", open: "open" };
	let { translateWithId = id => defaultTranslations[id] } = $$props;

	const defaultTranslations = {
		[translationIds.close]: "Close menu",
		[translationIds.open]: "Open menu"
	};

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('translateWithId' in $$new_props) $$invalidate(4, translateWithId = $$new_props.translateWithId);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open, translateWithId*/ 17) {
			 $$invalidate(1, description = open
			? translateWithId("close")
			: translateWithId("open"));
		}
	};

	return [open, description, $$restProps, translationIds, translateWithId, click_handler];
}

class ListBoxMenuIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
			open: 0,
			translationIds: 3,
			translateWithId: 4
		});
	}

	get translationIds() {
		return this.$$.ctx[3];
	}
}

/* node_modules\carbon-components-svelte\src\ListBox\ListBoxMenuItem.svelte generated by Svelte v3.46.4 */

function create_fragment$g(ctx) {
	let div1;
	let div0;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let div1_levels = [/*$$restProps*/ ctx[2]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div0, "bx--list-box__menu-item__option", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--list-box__menu-item", true);
			toggle_class(div1, "bx--list-box__menu-item--active", /*active*/ ctx[0]);
			toggle_class(div1, "bx--list-box__menu-item--highlighted", /*highlighted*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[5]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div1, "bx--list-box__menu-item", true);
			toggle_class(div1, "bx--list-box__menu-item--active", /*active*/ ctx[0]);
			toggle_class(div1, "bx--list-box__menu-item--highlighted", /*highlighted*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$g($$self, $$props, $$invalidate) {
	const omit_props_names = ["active","highlighted"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { active = false } = $$props;
	let { highlighted = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('active' in $$new_props) $$invalidate(0, active = $$new_props.active);
		if ('highlighted' in $$new_props) $$invalidate(1, highlighted = $$new_props.highlighted);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [
		active,
		highlighted,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ListBoxMenuItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$g, create_fragment$g, safe_not_equal, { active: 0, highlighted: 1 });
	}
}

/* node_modules\carbon-components-svelte\src\icons\Close16.svelte generated by Svelte v3.46.4 */

function create_if_block$9(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$7(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$9(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$9(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$h(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$7(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Close16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Close16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$h($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Close16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\ListBox\ListBoxSelection.svelte generated by Svelte v3.46.4 */

function create_else_block$3(ctx) {
	let div;
	let t;
	let close16;
	let div_tabindex_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*selectionCount*/ ctx[1] !== undefined && create_if_block_1$2(ctx);
	close16 = new Close16({});

	let div_levels = [
		{ role: "button" },
		{ "aria-label": /*description*/ ctx[4] },
		{ title: /*description*/ ctx[4] },
		{
			tabindex: div_tabindex_value = /*disabled*/ ctx[2] ? '-1' : '0'
		},
		/*$$restProps*/ ctx[6]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			create_component(close16.$$.fragment);
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__selection", true);
			toggle_class(div, "bx--tag--filter", /*selectionCount*/ ctx[1]);
			toggle_class(div, "bx--list-box__selection--multi", /*selectionCount*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);
			mount_component(close16, div, null);
			/*div_binding*/ ctx[11](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", stop_propagation(prevent_default(/*click_handler_1*/ ctx[12]))),
					listen(div, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[13]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*selectionCount*/ ctx[1] !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$2(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "button" },
				(!current || dirty & /*description*/ 16) && { "aria-label": /*description*/ ctx[4] },
				(!current || dirty & /*description*/ 16) && { title: /*description*/ ctx[4] },
				(!current || dirty & /*disabled*/ 4 && div_tabindex_value !== (div_tabindex_value = /*disabled*/ ctx[2] ? '-1' : '0')) && { tabindex: div_tabindex_value },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(div, "bx--list-box__selection", true);
			toggle_class(div, "bx--tag--filter", /*selectionCount*/ ctx[1]);
			toggle_class(div, "bx--list-box__selection--multi", /*selectionCount*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(close16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			destroy_component(close16);
			/*div_binding*/ ctx[11](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (49:0) {#if selectionCount !== undefined}
function create_if_block$a(ctx) {
	let div1;
	let span;
	let t0;
	let t1;
	let div0;
	let close16;
	let div0_tabindex_value;
	let current;
	let mounted;
	let dispose;
	close16 = new Close16({});

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text(/*selectionCount*/ ctx[1]);
			t1 = space();
			div0 = element("div");
			create_component(close16.$$.fragment);
			attr(span, "title", /*selectionCount*/ ctx[1]);
			toggle_class(span, "bx--tag__label", true);
			attr(div0, "role", "button");
			attr(div0, "tabindex", div0_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0);
			attr(div0, "disabled", /*disabled*/ ctx[2]);
			attr(div0, "aria-label", /*translationIds*/ ctx[3].clearAll);
			attr(div0, "title", /*description*/ ctx[4]);
			toggle_class(div0, "bx--tag__close-icon", true);
			toggle_class(div1, "bx--tag", true);
			toggle_class(div1, "bx--tag--filter", true);
			toggle_class(div1, "bx--tag--high-contrast", true);
			toggle_class(div1, "bx--tag--disabled", /*disabled*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(div1, t1);
			append(div1, div0);
			mount_component(close16, div0, null);
			/*div0_binding*/ ctx[8](div0);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", stop_propagation(prevent_default(/*click_handler*/ ctx[9]))),
					listen(div0, "keydown", stop_propagation(/*keydown_handler*/ ctx[10]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*selectionCount*/ 2) set_data(t0, /*selectionCount*/ ctx[1]);

			if (!current || dirty & /*selectionCount*/ 2) {
				attr(span, "title", /*selectionCount*/ ctx[1]);
			}

			if (!current || dirty & /*disabled*/ 4 && div0_tabindex_value !== (div0_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0)) {
				attr(div0, "tabindex", div0_tabindex_value);
			}

			if (!current || dirty & /*disabled*/ 4) {
				attr(div0, "disabled", /*disabled*/ ctx[2]);
			}

			if (!current || dirty & /*description*/ 16) {
				attr(div0, "title", /*description*/ ctx[4]);
			}

			if (dirty & /*disabled*/ 4) {
				toggle_class(div1, "bx--tag--disabled", /*disabled*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(close16);
			/*div0_binding*/ ctx[8](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (103:4) {#if selectionCount !== undefined}
function create_if_block_1$2(ctx) {
	let t;

	return {
		c() {
			t = text(/*selectionCount*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*selectionCount*/ 2) set_data(t, /*selectionCount*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$i(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$a, create_else_block$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*selectionCount*/ ctx[1] !== undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$i($$self, $$props, $$invalidate) {
	let description;
	const omit_props_names = ["selectionCount","disabled","translationIds","translateWithId","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { selectionCount = undefined } = $$props;
	let { disabled = false } = $$props;

	const translationIds = {
		clearAll: "clearAll",
		clearSelection: "clearSelection"
	};

	let { translateWithId = id => defaultTranslations[id] } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.clearAll]: "Clear all selected items",
		[translationIds.clearSelection]: "Clear selected item"
	};

	const dispatch = createEventDispatcher();
	const ctx = getContext("MultiSelect");

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler = e => {
		if (!disabled) {
			dispatch('clear', e);
		}
	};

	const keydown_handler = e => {
		if (!disabled && e.key === 'Enter') {
			dispatch('clear', e);
		}
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_1 = e => {
		if (!disabled) {
			dispatch('clear', e);
		}
	};

	const keydown_handler_1 = e => {
		if (!disabled && e.key === 'Enter') {
			dispatch('clear', e);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selectionCount' in $$new_props) $$invalidate(1, selectionCount = $$new_props.selectionCount);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('translateWithId' in $$new_props) $$invalidate(7, translateWithId = $$new_props.translateWithId);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ref*/ 1) {
			 if (ctx && ref) {
				ctx.declareRef({ key: "selection", ref });
			}
		}

		if ($$self.$$.dirty & /*selectionCount, translateWithId*/ 130) {
			 $$invalidate(4, description = selectionCount
			? translateWithId("clearAll")
			: translateWithId("clearSelection"));
		}
	};

	return [
		ref,
		selectionCount,
		disabled,
		translationIds,
		description,
		dispatch,
		$$restProps,
		translateWithId,
		div0_binding,
		click_handler,
		keydown_handler,
		div_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class ListBoxSelection extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
			selectionCount: 1,
			disabled: 2,
			translationIds: 3,
			translateWithId: 7,
			ref: 0
		});
	}

	get translationIds() {
		return this.$$.ctx[3];
	}
}

/* node_modules\carbon-components-svelte\src\ComboBox\ComboBox.svelte generated by Svelte v3.46.4 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[52] = list[i];
	child_ctx[54] = i;
	return child_ctx;
}

// (199:2) {#if titleText}
function create_if_block_6(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*titleText*/ ctx[8]);
			attr(label, "for", /*id*/ ctx[17]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*titleText*/ 256) set_data(t, /*titleText*/ ctx[8]);

			if (dirty[0] & /*id*/ 131072) {
				attr(label, "for", /*id*/ ctx[17]);
			}

			if (dirty[0] & /*disabled*/ 128) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[7]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (315:6) {#if invalid}
function create_if_block_5(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (318:6) {#if !invalid && warn}
function create_if_block_4$1(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (323:6) {#if inputValue}
function create_if_block_3$1(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection({
			props: {
				translateWithId: /*translateWithId*/ ctx[16],
				disabled: /*disabled*/ ctx[7],
				open: /*open*/ ctx[1]
			}
		});

	listboxselection.$on("clear", /*clear_handler*/ ctx[43]);
	listboxselection.$on("clear", /*clear*/ ctx[19]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[0] & /*translateWithId*/ 65536) listboxselection_changes.translateWithId = /*translateWithId*/ ctx[16];
			if (dirty[0] & /*disabled*/ 128) listboxselection_changes.disabled = /*disabled*/ ctx[7];
			if (dirty[0] & /*open*/ 2) listboxselection_changes.open = /*open*/ ctx[1];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (222:4) <ListBoxField       role="button"       aria-expanded="{open}"       on:click="{async () => {         if (disabled) return;         open = true;         await tick();         ref.focus();       }}"       id="{id}"       disabled="{disabled}"       translateWithId="{translateWithId}"     >
function create_default_slot_3(ctx) {
	let input;
	let input_aria_controls_value;
	let input_aria_owns_value;
	let t0;
	let t1;
	let t2;
	let t3;
	let listboxmenuicon;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		{ tabindex: "0" },
		{ autocomplete: "off" },
		{ "aria-autocomplete": "list" },
		{ "aria-expanded": /*open*/ ctx[1] },
		{
			"aria-activedescendant": /*highlightedId*/ ctx[24]
		},
		{ "aria-labelledby": /*comboId*/ ctx[25] },
		{ "aria-disabled": /*disabled*/ ctx[7] },
		{
			"aria-controls": input_aria_controls_value = /*open*/ ctx[1] ? /*menuId*/ ctx[26] : undefined
		},
		{
			"aria-owns": input_aria_owns_value = /*open*/ ctx[1] ? /*menuId*/ ctx[26] : undefined
		},
		{ disabled: /*disabled*/ ctx[7] },
		{ placeholder: /*placeholder*/ ctx[9] },
		{ id: /*id*/ ctx[17] },
		{ value: /*inputValue*/ ctx[21] },
		{ name: /*name*/ ctx[18] },
		/*$$restProps*/ ctx[29]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[12] && create_if_block_5();
	let if_block1 = !/*invalid*/ ctx[12] && /*warn*/ ctx[13] && create_if_block_4$1();
	let if_block2 = /*inputValue*/ ctx[21] && create_if_block_3$1(ctx);

	listboxmenuicon = new ListBoxMenuIcon({
			props: {
				translateWithId: /*translateWithId*/ ctx[16],
				open: /*open*/ ctx[1]
			}
		});

	listboxmenuicon.$on("click", /*click_handler_1*/ ctx[44]);

	return {
		c() {
			input = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			create_component(listboxmenuicon.$$.fragment);
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[15]);
			toggle_class(input, "bx--text-input--empty", /*inputValue*/ ctx[21] === '');
		},
		m(target, anchor) {
			insert(target, input, anchor);
			input.value = input_data.value;
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[39](input);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t3, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_handler*/ ctx[40]),
					listen(input, "keydown", /*keydown_handler*/ ctx[34]),
					listen(input, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[41])),
					listen(input, "keyup", /*keyup_handler*/ ctx[35]),
					listen(input, "focus", /*focus_handler*/ ctx[36]),
					listen(input, "blur", /*blur_handler*/ ctx[37]),
					listen(input, "blur", /*blur_handler_1*/ ctx[42])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ tabindex: "0" },
				{ autocomplete: "off" },
				{ "aria-autocomplete": "list" },
				(!current || dirty[0] & /*open*/ 2) && { "aria-expanded": /*open*/ ctx[1] },
				(!current || dirty[0] & /*highlightedId*/ 16777216) && {
					"aria-activedescendant": /*highlightedId*/ ctx[24]
				},
				(!current || dirty[0] & /*comboId*/ 33554432) && { "aria-labelledby": /*comboId*/ ctx[25] },
				(!current || dirty[0] & /*disabled*/ 128) && { "aria-disabled": /*disabled*/ ctx[7] },
				(!current || dirty[0] & /*open, menuId*/ 67108866 && input_aria_controls_value !== (input_aria_controls_value = /*open*/ ctx[1] ? /*menuId*/ ctx[26] : undefined)) && {
					"aria-controls": input_aria_controls_value
				},
				(!current || dirty[0] & /*open, menuId*/ 67108866 && input_aria_owns_value !== (input_aria_owns_value = /*open*/ ctx[1] ? /*menuId*/ ctx[26] : undefined)) && { "aria-owns": input_aria_owns_value },
				(!current || dirty[0] & /*disabled*/ 128) && { disabled: /*disabled*/ ctx[7] },
				(!current || dirty[0] & /*placeholder*/ 512) && { placeholder: /*placeholder*/ ctx[9] },
				(!current || dirty[0] & /*id*/ 131072) && { id: /*id*/ ctx[17] },
				(!current || dirty[0] & /*inputValue*/ 2097152 && input.value !== /*inputValue*/ ctx[21]) && { value: /*inputValue*/ ctx[21] },
				(!current || dirty[0] & /*name*/ 262144) && { name: /*name*/ ctx[18] },
				dirty[0] & /*$$restProps*/ 536870912 && /*$$restProps*/ ctx[29]
			]));

			if ('value' in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[15]);
			toggle_class(input, "bx--text-input--empty", /*inputValue*/ ctx[21] === '');

			if (/*invalid*/ ctx[12]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 4096) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[12] && /*warn*/ ctx[13]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 12288) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$1();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*inputValue*/ ctx[21]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*inputValue*/ 2097152) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_3$1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t3.parentNode, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			const listboxmenuicon_changes = {};
			if (dirty[0] & /*translateWithId*/ 65536) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[16];
			if (dirty[0] & /*open*/ 2) listboxmenuicon_changes.open = /*open*/ ctx[1];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[39](null);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t3);
			destroy_component(listboxmenuicon, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (342:4) {#if open}
function create_if_block_1$3(ctx) {
	let listboxmenu;
	let updating_ref;
	let current;

	function listboxmenu_ref_binding(value) {
		/*listboxmenu_ref_binding*/ ctx[48](value);
	}

	let listboxmenu_props = {
		"aria-label": /*ariaLabel*/ ctx[27],
		id: /*id*/ ctx[17],
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*listRef*/ ctx[3] !== void 0) {
		listboxmenu_props.ref = /*listRef*/ ctx[3];
	}

	listboxmenu = new ListBoxMenu({ props: listboxmenu_props });
	binding_callbacks.push(() => bind(listboxmenu, 'ref', listboxmenu_ref_binding));
	listboxmenu.$on("scroll", /*scroll_handler*/ ctx[49]);

	return {
		c() {
			create_component(listboxmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxmenu_changes = {};
			if (dirty[0] & /*ariaLabel*/ 134217728) listboxmenu_changes["aria-label"] = /*ariaLabel*/ ctx[27];
			if (dirty[0] & /*id*/ 131072) listboxmenu_changes.id = /*id*/ ctx[17];

			if (dirty[0] & /*filteredItems, selectedId, highlightedIndex, open, inputValue, selectedItem, itemToString*/ 15728659 | dirty[1] & /*$$scope*/ 16777216) {
				listboxmenu_changes.$$scope = { dirty, ctx };
			}

			if (!updating_ref && dirty[0] & /*listRef*/ 8) {
				updating_ref = true;
				listboxmenu_changes.ref = /*listRef*/ ctx[3];
				add_flush_callback(() => updating_ref = false);
			}

			listboxmenu.$set(listboxmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxmenu, detaching);
		}
	};
}

// (367:12) {#if selectedItem && selectedItem.id === item.id}
function create_if_block_2$1(ctx) {
	let checkmark16;
	let current;

	checkmark16 = new Checkmark16({
			props: {
				class: "bx--list-box__menu-item__selected-icon"
			}
		});

	return {
		c() {
			create_component(checkmark16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkmark16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(checkmark16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkmark16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkmark16, detaching);
		}
	};
}

// (350:10) <ListBoxMenuItem             id="{item.id}"             active="{selectedId === item.id}"             highlighted="{highlightedIndex === i}"             on:click="{() => {               selectedId = item.id;               open = false;                if (filteredItems[i]) {                 inputValue = filteredItems[i].text;               }             }}"             on:mouseenter="{() => {               highlightedIndex = i;             }}"           >
function create_default_slot_2(ctx) {
	let t0_value = /*itemToString*/ ctx[4](/*item*/ ctx[52]) + "";
	let t0;
	let t1;
	let t2;
	let current;
	let if_block = /*selectedItem*/ ctx[20] && /*selectedItem*/ ctx[20].id === /*item*/ ctx[52].id && create_if_block_2$1();

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, t2, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty[0] & /*itemToString, filteredItems*/ 8388624) && t0_value !== (t0_value = /*itemToString*/ ctx[4](/*item*/ ctx[52]) + "")) set_data(t0, t0_value);

			if (/*selectedItem*/ ctx[20] && /*selectedItem*/ ctx[20].id === /*item*/ ctx[52].id) {
				if (if_block) {
					if (dirty[0] & /*selectedItem, filteredItems*/ 9437184) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$1();
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t2.parentNode, t2);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t2);
		}
	};
}

// (349:8) {#each filteredItems as item, i (item.id)}
function create_each_block(key_1, ctx) {
	let first;
	let listboxmenuitem;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[46](/*item*/ ctx[52], /*i*/ ctx[54]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[47](/*i*/ ctx[54]);
	}

	listboxmenuitem = new ListBoxMenuItem({
			props: {
				id: /*item*/ ctx[52].id,
				active: /*selectedId*/ ctx[0] === /*item*/ ctx[52].id,
				highlighted: /*highlightedIndex*/ ctx[22] === /*i*/ ctx[54],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	listboxmenuitem.$on("click", click_handler_3);
	listboxmenuitem.$on("mouseenter", mouseenter_handler);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listboxmenuitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(listboxmenuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listboxmenuitem_changes = {};
			if (dirty[0] & /*filteredItems*/ 8388608) listboxmenuitem_changes.id = /*item*/ ctx[52].id;
			if (dirty[0] & /*selectedId, filteredItems*/ 8388609) listboxmenuitem_changes.active = /*selectedId*/ ctx[0] === /*item*/ ctx[52].id;
			if (dirty[0] & /*highlightedIndex, filteredItems*/ 12582912) listboxmenuitem_changes.highlighted = /*highlightedIndex*/ ctx[22] === /*i*/ ctx[54];

			if (dirty[0] & /*selectedItem, filteredItems, itemToString*/ 9437200 | dirty[1] & /*$$scope*/ 16777216) {
				listboxmenuitem_changes.$$scope = { dirty, ctx };
			}

			listboxmenuitem.$set(listboxmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listboxmenuitem, detaching);
		}
	};
}

// (343:6) <ListBoxMenu         aria-label="{ariaLabel}"         id="{id}"         on:scroll         bind:ref="{listRef}"       >
function create_default_slot_1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*filteredItems*/ ctx[23];
	const get_key = ctx => /*item*/ ctx[52].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredItems, selectedId, highlightedIndex, open, inputValue, selectedItem, itemToString*/ 15728659) {
				each_value = /*filteredItems*/ ctx[23];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (208:2) <ListBox     class="bx--combo-box {direction === 'top' &&       'bx--list-box--up'} {!invalid && warn && 'bx--combo-box--warning'}"     id="{comboId}"     aria-label="{ariaLabel}"     disabled="{disabled}"     invalid="{invalid}"     invalidText="{invalidText}"     open="{open}"     light="{light}"     size="{size}"     warn="{warn}"     warnText="{warnText}"   >
function create_default_slot(ctx) {
	let listboxfield;
	let t;
	let if_block_anchor;
	let current;

	listboxfield = new ListBoxField({
			props: {
				role: "button",
				"aria-expanded": /*open*/ ctx[1],
				id: /*id*/ ctx[17],
				disabled: /*disabled*/ ctx[7],
				translateWithId: /*translateWithId*/ ctx[16],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	listboxfield.$on("click", /*click_handler_2*/ ctx[45]);
	let if_block = /*open*/ ctx[1] && create_if_block_1$3(ctx);

	return {
		c() {
			create_component(listboxfield.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(listboxfield, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxfield_changes = {};
			if (dirty[0] & /*open*/ 2) listboxfield_changes["aria-expanded"] = /*open*/ ctx[1];
			if (dirty[0] & /*id*/ 131072) listboxfield_changes.id = /*id*/ ctx[17];
			if (dirty[0] & /*disabled*/ 128) listboxfield_changes.disabled = /*disabled*/ ctx[7];
			if (dirty[0] & /*translateWithId*/ 65536) listboxfield_changes.translateWithId = /*translateWithId*/ ctx[16];

			if (dirty[0] & /*translateWithId, open, disabled, inputValue, invalid, warn, highlightedId, comboId, menuId, placeholder, id, name, $$restProps, ref, light, highlightedIndex, filteredItems, selectedId, selectedItem*/ 670544519 | dirty[1] & /*$$scope*/ 16777216) {
				listboxfield_changes.$$scope = { dirty, ctx };
			}

			listboxfield.$set(listboxfield_changes);

			if (/*open*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*open*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(listboxfield.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(listboxfield.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxfield, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (375:2) {#if !invalid && helperText && !warn}
function create_if_block$b(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[10]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 1024) set_data(t, /*helperText*/ ctx[10]);

			if (dirty[0] & /*disabled*/ 128) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[7]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$j(ctx) {
	let div;
	let t0;
	let listbox;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleText*/ ctx[8] && create_if_block_6(ctx);

	listbox = new ListBox({
			props: {
				class: "bx--combo-box " + (/*direction*/ ctx[5] === 'top' && 'bx--list-box--up') + " " + (!/*invalid*/ ctx[12] && /*warn*/ ctx[13] && 'bx--combo-box--warning'),
				id: /*comboId*/ ctx[25],
				"aria-label": /*ariaLabel*/ ctx[27],
				disabled: /*disabled*/ ctx[7],
				invalid: /*invalid*/ ctx[12],
				invalidText: /*invalidText*/ ctx[11],
				open: /*open*/ ctx[1],
				light: /*light*/ ctx[15],
				size: /*size*/ ctx[6],
				warn: /*warn*/ ctx[13],
				warnText: /*warnText*/ ctx[14],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	let if_block1 = !/*invalid*/ ctx[12] && /*helperText*/ ctx[10] && !/*warn*/ ctx[13] && create_if_block$b(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(listbox.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--list-box__wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			mount_component(listbox, div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(window, "click", /*click_handler*/ ctx[38]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*titleText*/ ctx[8]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			const listbox_changes = {};
			if (dirty[0] & /*direction, invalid, warn*/ 12320) listbox_changes.class = "bx--combo-box " + (/*direction*/ ctx[5] === 'top' && 'bx--list-box--up') + " " + (!/*invalid*/ ctx[12] && /*warn*/ ctx[13] && 'bx--combo-box--warning');
			if (dirty[0] & /*comboId*/ 33554432) listbox_changes.id = /*comboId*/ ctx[25];
			if (dirty[0] & /*ariaLabel*/ 134217728) listbox_changes["aria-label"] = /*ariaLabel*/ ctx[27];
			if (dirty[0] & /*disabled*/ 128) listbox_changes.disabled = /*disabled*/ ctx[7];
			if (dirty[0] & /*invalid*/ 4096) listbox_changes.invalid = /*invalid*/ ctx[12];
			if (dirty[0] & /*invalidText*/ 2048) listbox_changes.invalidText = /*invalidText*/ ctx[11];
			if (dirty[0] & /*open*/ 2) listbox_changes.open = /*open*/ ctx[1];
			if (dirty[0] & /*light*/ 32768) listbox_changes.light = /*light*/ ctx[15];
			if (dirty[0] & /*size*/ 64) listbox_changes.size = /*size*/ ctx[6];
			if (dirty[0] & /*warn*/ 8192) listbox_changes.warn = /*warn*/ ctx[13];
			if (dirty[0] & /*warnText*/ 16384) listbox_changes.warnText = /*warnText*/ ctx[14];

			if (dirty[0] & /*ariaLabel, id, listRef, filteredItems, selectedId, highlightedIndex, open, inputValue, selectedItem, itemToString, disabled, translateWithId, ref, invalid, warn, highlightedId, comboId, menuId, placeholder, name, $$restProps, light*/ 804762271 | dirty[1] & /*$$scope*/ 16777216) {
				listbox_changes.$$scope = { dirty, ctx };
			}

			listbox.$set(listbox_changes);

			if (!/*invalid*/ ctx[12] && /*helperText*/ ctx[10] && !/*warn*/ ctx[13]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$b(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(listbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			destroy_component(listbox);
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function instance$j($$self, $$props, $$invalidate) {
	let ariaLabel;
	let menuId;
	let comboId;
	let highlightedId;
	let filteredItems;

	const omit_props_names = [
		"items","itemToString","selectedId","value","direction","size","disabled","titleText","placeholder","helperText","invalidText","invalid","warn","warnText","light","open","shouldFilterItem","translateWithId","id","name","ref","listRef","clear"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { items = [] } = $$props;
	let { itemToString = item => item.text || item.id } = $$props;
	let { selectedId = undefined } = $$props;
	let { value = "" } = $$props;
	let { direction = "bottom" } = $$props;
	let { size = undefined } = $$props;
	let { disabled = false } = $$props;
	let { titleText = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { helperText = "" } = $$props;
	let { invalidText = "" } = $$props;
	let { invalid = false } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { light = false } = $$props;
	let { open = false } = $$props;
	let { shouldFilterItem = () => true } = $$props;
	let { translateWithId = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	let { listRef = null } = $$props;
	const dispatch = createEventDispatcher();
	let selectedItem = undefined;
	let inputValue = value;
	let prevSelectedId = null;
	let highlightedIndex = -1;

	function change(dir) {
		let index = highlightedIndex + dir;
		let _items = !filteredItems?.length ? items : filteredItems;

		if (index < 0) {
			index = _items.length - 1;
		} else if (index >= _items.length) {
			index = 0;
		}

		$$invalidate(22, highlightedIndex = index);
	}

	function clear(options = {}) {
		$$invalidate(33, prevSelectedId = null);
		$$invalidate(22, highlightedIndex = -1);
		$$invalidate(24, highlightedId = undefined);
		$$invalidate(0, selectedId = undefined);
		$$invalidate(20, selectedItem = undefined);
		$$invalidate(1, open = false);
		$$invalidate(21, inputValue = "");
		if (options?.focus !== false) ref?.focus();
	}

	afterUpdate(() => {
		if (open) {
			ref.focus();
			$$invalidate(23, filteredItems = items.filter(item => shouldFilterItem(item, value)));
		} else {
			$$invalidate(22, highlightedIndex = -1);
			$$invalidate(23, filteredItems = []);

			if (!selectedItem) {
				$$invalidate(0, selectedId = undefined);
				$$invalidate(21, inputValue = "");
				$$invalidate(22, highlightedIndex = -1);
				$$invalidate(24, highlightedId = undefined);
			} else {
				// programmatically set inputValue
				$$invalidate(21, inputValue = selectedItem.text);
			}
		}
	});

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler = ({ target }) => {
		if (open && ref && !ref.contains(target)) {
			$$invalidate(1, open = false);
		}
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(2, ref);
		});
	}

	const input_handler = async ({ target }) => {
		if (!open && target.value.length > 0) {
			$$invalidate(1, open = true);
		}

		$$invalidate(21, inputValue = target.value);

		if (!inputValue.length) {
			clear();
			$$invalidate(1, open = true);
		}
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'Enter') {
			$$invalidate(1, open = !open);

			if (highlightedIndex > -1 && filteredItems[highlightedIndex]?.id !== selectedId) {
				$$invalidate(1, open = false);

				if (filteredItems[highlightedIndex]) {
					$$invalidate(21, inputValue = filteredItems[highlightedIndex].text);
					$$invalidate(20, selectedItem = filteredItems[highlightedIndex]);
					$$invalidate(0, selectedId = filteredItems[highlightedIndex].id);
				}
			} else {
				$$invalidate(1, open = false);

				if (filteredItems[0]) {
					$$invalidate(21, inputValue = filteredItems[0].text);
					$$invalidate(20, selectedItem = filteredItems[0]);
					$$invalidate(0, selectedId = filteredItems[0].id);
				}
			}

			$$invalidate(22, highlightedIndex = -1);
		} else if (key === 'Tab') {
			$$invalidate(1, open = false);
		} else if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		} else if (key === 'Escape') {
			$$invalidate(1, open = false);
		}
	};

	const blur_handler_1 = ({ relatedTarget }) => {
		if (!open || !relatedTarget) return;

		if (relatedTarget && !['INPUT', 'SELECT', 'TEXTAREA'].includes(relatedTarget.tagName) && relatedTarget.getAttribute('role') !== 'button' && relatedTarget.getAttribute('role') !== 'searchbox') {
			ref.focus();
		}
	};

	function clear_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = e => {
		if (disabled) return;
		e.stopPropagation();
		$$invalidate(1, open = !open);
	};

	const click_handler_2 = async () => {
		if (disabled) return;
		$$invalidate(1, open = true);
		await tick();
		ref.focus();
	};

	const click_handler_3 = (item, i) => {
		$$invalidate(0, selectedId = item.id);
		$$invalidate(1, open = false);

		if (filteredItems[i]) {
			$$invalidate(21, inputValue = filteredItems[i].text);
		}
	};

	const mouseenter_handler = i => {
		$$invalidate(22, highlightedIndex = i);
	};

	function listboxmenu_ref_binding(value) {
		listRef = value;
		$$invalidate(3, listRef);
	}

	function scroll_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(51, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(29, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('items' in $$new_props) $$invalidate(31, items = $$new_props.items);
		if ('itemToString' in $$new_props) $$invalidate(4, itemToString = $$new_props.itemToString);
		if ('selectedId' in $$new_props) $$invalidate(0, selectedId = $$new_props.selectedId);
		if ('value' in $$new_props) $$invalidate(30, value = $$new_props.value);
		if ('direction' in $$new_props) $$invalidate(5, direction = $$new_props.direction);
		if ('size' in $$new_props) $$invalidate(6, size = $$new_props.size);
		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ('titleText' in $$new_props) $$invalidate(8, titleText = $$new_props.titleText);
		if ('placeholder' in $$new_props) $$invalidate(9, placeholder = $$new_props.placeholder);
		if ('helperText' in $$new_props) $$invalidate(10, helperText = $$new_props.helperText);
		if ('invalidText' in $$new_props) $$invalidate(11, invalidText = $$new_props.invalidText);
		if ('invalid' in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ('warn' in $$new_props) $$invalidate(13, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
		if ('light' in $$new_props) $$invalidate(15, light = $$new_props.light);
		if ('open' in $$new_props) $$invalidate(1, open = $$new_props.open);
		if ('shouldFilterItem' in $$new_props) $$invalidate(32, shouldFilterItem = $$new_props.shouldFilterItem);
		if ('translateWithId' in $$new_props) $$invalidate(16, translateWithId = $$new_props.translateWithId);
		if ('id' in $$new_props) $$invalidate(17, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(18, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(2, ref = $$new_props.ref);
		if ('listRef' in $$new_props) $$invalidate(3, listRef = $$new_props.listRef);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*inputValue*/ 2097152) {
			 $$invalidate(30, value = inputValue);
		}

		if ($$self.$$.dirty[0] & /*value*/ 1073741824 | $$self.$$.dirty[1] & /*items, shouldFilterItem*/ 3) {
			 $$invalidate(23, filteredItems = items.filter(item => shouldFilterItem(item, value)));
		}

		if ($$self.$$.dirty[0] & /*selectedId, filteredItems, open, selectedItem*/ 9437187 | $$self.$$.dirty[1] & /*prevSelectedId, items*/ 5) {
			 if (selectedId !== undefined) {
				if (prevSelectedId !== selectedId) {
					$$invalidate(33, prevSelectedId = selectedId);

					if (filteredItems?.length === 1 && open) {
						$$invalidate(0, selectedId = filteredItems[0].id);
						$$invalidate(20, selectedItem = filteredItems[0]);
						$$invalidate(22, highlightedIndex = -1);
						$$invalidate(24, highlightedId = undefined);
					} else {
						$$invalidate(20, selectedItem = items.find(item => item.id === selectedId));
					}

					dispatch("select", { selectedId, selectedItem });
				}
			} else {
				$$invalidate(33, prevSelectedId = selectedId);
				$$invalidate(20, selectedItem = undefined);
			}
		}

		 $$invalidate(27, ariaLabel = $$props["aria-label"] || "Choose an item");

		if ($$self.$$.dirty[0] & /*id*/ 131072) {
			 $$invalidate(26, menuId = `menu-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 131072) {
			 $$invalidate(25, comboId = `combo-${id}`);
		}

		if ($$self.$$.dirty[0] & /*highlightedIndex*/ 4194304 | $$self.$$.dirty[1] & /*items*/ 1) {
			 $$invalidate(24, highlightedId = items[highlightedIndex] ? items[highlightedIndex].id : 0);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		selectedId,
		open,
		ref,
		listRef,
		itemToString,
		direction,
		size,
		disabled,
		titleText,
		placeholder,
		helperText,
		invalidText,
		invalid,
		warn,
		warnText,
		light,
		translateWithId,
		id,
		name,
		clear,
		selectedItem,
		inputValue,
		highlightedIndex,
		filteredItems,
		highlightedId,
		comboId,
		menuId,
		ariaLabel,
		change,
		$$restProps,
		value,
		items,
		shouldFilterItem,
		prevSelectedId,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		click_handler,
		input_binding,
		input_handler,
		keydown_handler_1,
		blur_handler_1,
		clear_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		mouseenter_handler,
		listboxmenu_ref_binding,
		scroll_handler
	];
}

class ComboBox extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$j,
			create_fragment$j,
			safe_not_equal,
			{
				items: 31,
				itemToString: 4,
				selectedId: 0,
				value: 30,
				direction: 5,
				size: 6,
				disabled: 7,
				titleText: 8,
				placeholder: 9,
				helperText: 10,
				invalidText: 11,
				invalid: 12,
				warn: 13,
				warnText: 14,
				light: 15,
				open: 1,
				shouldFilterItem: 32,
				translateWithId: 16,
				id: 17,
				name: 18,
				ref: 2,
				listRef: 3,
				clear: 19
			},
			null,
			[-1, -1]
		);
	}

	get clear() {
		return this.$$.ctx[19];
	}
}

/* node_modules\carbon-components-svelte\src\icons\Close20.svelte generated by Svelte v3.46.4 */

function create_if_block$c(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$8(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$c(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$c(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$k(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$8(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Close20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Close20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$k($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Close20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\RadioButton\RadioButton.svelte generated by Svelte v3.46.4 */
const get_labelText_slot_changes$1 = dirty => ({});
const get_labelText_slot_context$1 = ctx => ({});

// (74:4) {#if labelText || $$slots.labelText}
function create_if_block$d(ctx) {
	let span;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[16].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[15], get_labelText_slot_context$1);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$9(ctx);

	return {
		c() {
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[15], dirty, get_labelText_slot_changes$1),
						get_labelText_slot_context$1
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 64)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (dirty & /*hideLabel*/ 128) {
				toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (76:31)            
function fallback_block$9(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 64) set_data(t, /*labelText*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$l(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let span;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*labelText*/ ctx[6] || /*$$slots*/ ctx[13].labelText) && create_if_block$d(ctx);
	let div_levels = [/*$$restProps*/ ctx[12]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			span = element("span");
			t1 = space();
			if (if_block) if_block.c();
			attr(input, "type", "radio");
			attr(input, "id", /*id*/ ctx[8]);
			attr(input, "name", /*name*/ ctx[9]);
			input.checked = /*checked*/ ctx[0];
			input.disabled = /*disabled*/ ctx[3];
			input.required = /*required*/ ctx[4];
			input.value = /*value*/ ctx[2];
			toggle_class(input, "bx--radio-button", true);
			toggle_class(span, "bx--radio-button__appearance", true);
			attr(label, "for", /*id*/ ctx[8]);
			toggle_class(label, "bx--radio-button__label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--radio-button-wrapper", true);
			toggle_class(div, "bx--radio-button-wrapper--label-left", /*labelPosition*/ ctx[5] === 'left');
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			/*input_binding*/ ctx[18](input);
			append(div, t0);
			append(div, label);
			append(label, span);
			append(label, t1);
			if (if_block) if_block.m(label, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[17]),
					listen(input, "change", /*change_handler_1*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*id*/ 256) {
				attr(input, "id", /*id*/ ctx[8]);
			}

			if (!current || dirty & /*name*/ 512) {
				attr(input, "name", /*name*/ ctx[9]);
			}

			if (!current || dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (!current || dirty & /*disabled*/ 8) {
				input.disabled = /*disabled*/ ctx[3];
			}

			if (!current || dirty & /*required*/ 16) {
				input.required = /*required*/ ctx[4];
			}

			if (!current || dirty & /*value*/ 4) {
				input.value = /*value*/ ctx[2];
			}

			if (/*labelText*/ ctx[6] || /*$$slots*/ ctx[13].labelText) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*labelText, $$slots*/ 8256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$d(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(label, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*id*/ 256) {
				attr(label, "for", /*id*/ ctx[8]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]]));
			toggle_class(div, "bx--radio-button-wrapper", true);
			toggle_class(div, "bx--radio-button-wrapper--label-left", /*labelPosition*/ ctx[5] === 'left');
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*input_binding*/ ctx[18](null);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$l($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"value","checked","disabled","required","labelPosition","labelText","hideLabel","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { value = "" } = $$props;
	let { checked = false } = $$props;
	let { disabled = false } = $$props;
	let { required = false } = $$props;
	let { labelPosition = "right" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("RadioButtonGroup");

	const selectedValue = ctx
	? ctx.selectedValue
	: writable(checked ? value : undefined);

	component_subscribe($$self, selectedValue, value => $$invalidate(14, $selectedValue = value));

	if (ctx) {
		ctx.add({ id, checked, disabled, value });
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler_1 = () => {
		if (ctx) {
			ctx.update(value);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('required' in $$new_props) $$invalidate(4, required = $$new_props.required);
		if ('labelPosition' in $$new_props) $$invalidate(5, labelPosition = $$new_props.labelPosition);
		if ('labelText' in $$new_props) $$invalidate(6, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(7, hideLabel = $$new_props.hideLabel);
		if ('id' in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(9, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue, value*/ 16388) {
			 $$invalidate(0, checked = $selectedValue === value);
		}
	};

	return [
		checked,
		ref,
		value,
		disabled,
		required,
		labelPosition,
		labelText,
		hideLabel,
		id,
		name,
		ctx,
		selectedValue,
		$$restProps,
		$$slots,
		$selectedValue,
		$$scope,
		slots,
		change_handler,
		input_binding,
		change_handler_1
	];
}

class RadioButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
			value: 2,
			checked: 0,
			disabled: 3,
			required: 4,
			labelPosition: 5,
			labelText: 6,
			hideLabel: 7,
			id: 8,
			name: 9,
			ref: 1
		});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\Table.svelte generated by Svelte v3.46.4 */

function create_else_block$4(ctx) {
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let table_levels = [/*$$restProps*/ ctx[6]];
	let table_data = {};

	for (let i = 0; i < table_levels.length; i += 1) {
		table_data = assign(table_data, table_levels[i]);
	}

	return {
		c() {
			table = element("table");
			if (default_slot) default_slot.c();
			set_attributes(table, table_data);
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === 'compact');
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === 'short');
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === 'tall');
			toggle_class(table, "bx--data-table--md", /*size*/ ctx[0] === 'medium');
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, table, anchor);

			if (default_slot) {
				default_slot.m(table, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			set_attributes(table, table_data = get_spread_update(table_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === 'compact');
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === 'short');
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === 'tall');
			toggle_class(table, "bx--data-table--md", /*size*/ ctx[0] === 'medium');
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(table);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (27:0) {#if stickyHeader}
function create_if_block$e(ctx) {
	let section;
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let section_levels = [/*$$restProps*/ ctx[6]];
	let section_data = {};

	for (let i = 0; i < section_levels.length; i += 1) {
		section_data = assign(section_data, section_levels[i]);
	}

	return {
		c() {
			section = element("section");
			table = element("table");
			if (default_slot) default_slot.c();
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === 'compact');
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === 'short');
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === 'tall');
			toggle_class(table, "bx--data-table--md", /*size*/ ctx[0] === 'medium');
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
			set_attributes(section, section_data);
			toggle_class(section, "bx--data-table_inner-container", true);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, table);

			if (default_slot) {
				default_slot.m(table, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === 'compact');
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === 'short');
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === 'tall');
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--md", /*size*/ ctx[0] === 'medium');
			}

			if (dirty & /*sortable*/ 16) {
				toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[4]);
			}

			if (dirty & /*zebra*/ 2) {
				toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			}

			if (dirty & /*useStaticWidth*/ 4) {
				toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			}

			if (dirty & /*shouldShowBorder*/ 8) {
				toggle_class(table, "bx--data-table--no-border", !/*shouldShowBorder*/ ctx[3]);
			}

			if (dirty & /*stickyHeader*/ 32) {
				toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[5]);
			}

			set_attributes(section, section_data = get_spread_update(section_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(section, "bx--data-table_inner-container", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$m(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$e, create_else_block$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*stickyHeader*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$m($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","zebra","useStaticWidth","shouldShowBorder","sortable","stickyHeader"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { zebra = false } = $$props;
	let { useStaticWidth = false } = $$props;
	let { shouldShowBorder = false } = $$props;
	let { sortable = false } = $$props;
	let { stickyHeader = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('zebra' in $$new_props) $$invalidate(1, zebra = $$new_props.zebra);
		if ('useStaticWidth' in $$new_props) $$invalidate(2, useStaticWidth = $$new_props.useStaticWidth);
		if ('shouldShowBorder' in $$new_props) $$invalidate(3, shouldShowBorder = $$new_props.shouldShowBorder);
		if ('sortable' in $$new_props) $$invalidate(4, sortable = $$new_props.sortable);
		if ('stickyHeader' in $$new_props) $$invalidate(5, stickyHeader = $$new_props.stickyHeader);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		size,
		zebra,
		useStaticWidth,
		shouldShowBorder,
		sortable,
		stickyHeader,
		$$restProps,
		$$scope,
		slots
	];
}

class Table extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
			size: 0,
			zebra: 1,
			useStaticWidth: 2,
			shouldShowBorder: 3,
			sortable: 4,
			stickyHeader: 5
		});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\TableBody.svelte generated by Svelte v3.46.4 */

function create_fragment$n(ctx) {
	let tbody;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let tbody_levels = [{ "aria-live": "polite" }, /*$$restProps*/ ctx[0]];
	let tbody_data = {};

	for (let i = 0; i < tbody_levels.length; i += 1) {
		tbody_data = assign(tbody_data, tbody_levels[i]);
	}

	return {
		c() {
			tbody = element("tbody");
			if (default_slot) default_slot.c();
			set_attributes(tbody, tbody_data);
		},
		m(target, anchor) {
			insert(target, tbody, anchor);

			if (default_slot) {
				default_slot.m(tbody, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(tbody, tbody_data = get_spread_update(tbody_levels, [
				{ "aria-live": "polite" },
				dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tbody);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$n($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [$$restProps, $$scope, slots];
}

class TableBody extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\TableCell.svelte generated by Svelte v3.46.4 */

function create_fragment$o(ctx) {
	let td;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let td_levels = [/*$$restProps*/ ctx[0]];
	let td_data = {};

	for (let i = 0; i < td_levels.length; i += 1) {
		td_data = assign(td_data, td_levels[i]);
	}

	return {
		c() {
			td = element("td");
			if (default_slot) default_slot.c();
			set_attributes(td, td_data);
		},
		m(target, anchor) {
			insert(target, td, anchor);

			if (default_slot) {
				default_slot.m(td, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(td, "click", /*click_handler*/ ctx[3]),
					listen(td, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(td, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(td, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(td, td_data = get_spread_update(td_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$o($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableCell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$o, create_fragment$o, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\TableContainer.svelte generated by Svelte v3.46.4 */

function create_if_block$f(ctx) {
	let div;
	let h4;
	let t0;
	let t1;
	let p;
	let t2;

	return {
		c() {
			div = element("div");
			h4 = element("h4");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text(/*description*/ ctx[1]);
			toggle_class(h4, "bx--data-table-header__title", true);
			toggle_class(p, "bx--data-table-header__description", true);
			toggle_class(div, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h4);
			append(h4, t0);
			append(div, t1);
			append(div, p);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*description*/ 2) set_data(t2, /*description*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$p(ctx) {
	let div;
	let t;
	let current;
	let if_block = /*title*/ ctx[0] && create_if_block$f(ctx);
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let div_levels = [/*$$restProps*/ ctx[4]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--data-table-container", true);
			toggle_class(div, "bx--data-table-container--static", /*useStaticWidth*/ ctx[3]);
			toggle_class(div, "bx--data-table--max-width", /*stickyHeader*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$f(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]]));
			toggle_class(div, "bx--data-table-container", true);
			toggle_class(div, "bx--data-table-container--static", /*useStaticWidth*/ ctx[3]);
			toggle_class(div, "bx--data-table--max-width", /*stickyHeader*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$p($$self, $$props, $$invalidate) {
	const omit_props_names = ["title","description","stickyHeader","useStaticWidth"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "" } = $$props;
	let { description = "" } = $$props;
	let { stickyHeader = false } = $$props;
	let { useStaticWidth = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('title' in $$new_props) $$invalidate(0, title = $$new_props.title);
		if ('description' in $$new_props) $$invalidate(1, description = $$new_props.description);
		if ('stickyHeader' in $$new_props) $$invalidate(2, stickyHeader = $$new_props.stickyHeader);
		if ('useStaticWidth' in $$new_props) $$invalidate(3, useStaticWidth = $$new_props.useStaticWidth);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [title, description, stickyHeader, useStaticWidth, $$restProps, $$scope, slots];
}

class TableContainer extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
			title: 0,
			description: 1,
			stickyHeader: 2,
			useStaticWidth: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\TableHead.svelte generated by Svelte v3.46.4 */

function create_fragment$q(ctx) {
	let thead;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let thead_levels = [/*$$restProps*/ ctx[0]];
	let thead_data = {};

	for (let i = 0; i < thead_levels.length; i += 1) {
		thead_data = assign(thead_data, thead_levels[i]);
	}

	return {
		c() {
			thead = element("thead");
			if (default_slot) default_slot.c();
			set_attributes(thead, thead_data);
		},
		m(target, anchor) {
			insert(target, thead, anchor);

			if (default_slot) {
				default_slot.m(thead, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(thead, "click", /*click_handler*/ ctx[3]),
					listen(thead, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(thead, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(thead, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(thead, thead_data = get_spread_update(thead_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(thead);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$q($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableHead extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\icons\ArrowUp20.svelte generated by Svelte v3.46.4 */

function create_if_block$g(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$a(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$g(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$g(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$r(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$a(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ArrowUp20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M16 4L6 14 7.41 15.41 15 7.83 15 28 17 28 17 7.83 24.59 15.41 26 14 16 4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ArrowUp20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$r($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ArrowUp20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$r, create_fragment$r, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\ArrowsVertical20.svelte generated by Svelte v3.46.4 */

function create_if_block$h(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$b(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$h(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$h(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$s(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$b(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ArrowsVertical20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M27.6 20.6L24 24.2 24 4 22 4 22 24.2 18.4 20.6 17 22 23 28 29 22zM9 4L3 10 4.4 11.4 8 7.8 8 28 10 28 10 7.8 13.6 11.4 15 10z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ArrowsVertical20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$s($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ArrowsVertical20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$s, create_fragment$s, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\TableHeader.svelte generated by Svelte v3.46.4 */

function create_else_block$5(ctx) {
	let th;
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
	let th_levels = [{ scope: /*scope*/ ctx[1] }, { id: /*id*/ ctx[2] }, /*$$restProps*/ ctx[9]];
	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element("th");
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--table-header-label", true);
			set_attributes(th, th_data);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(th, "click", /*click_handler_1*/ ctx[17]),
					listen(th, "mouseover", /*mouseover_handler_1*/ ctx[18]),
					listen(th, "mouseenter", /*mouseenter_handler_1*/ ctx[19]),
					listen(th, "mouseleave", /*mouseleave_handler_1*/ ctx[20])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			set_attributes(th, th_data = get_spread_update(th_levels, [
				(!current || dirty & /*scope*/ 2) && { scope: /*scope*/ ctx[1] },
				(!current || dirty & /*id*/ 4) && { id: /*id*/ ctx[2] },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (29:0) {#if $tableSortable && !disableSorting}
function create_if_block$i(ctx) {
	let th;
	let button;
	let div;
	let t0;
	let arrowup20;
	let t1;
	let arrowsvertical20;
	let th_aria_sort_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	arrowup20 = new ArrowUp20({
			props: {
				"aria-label": /*ariaLabel*/ ctx[4],
				class: "bx--table-sort__icon"
			}
		});

	arrowsvertical20 = new ArrowsVertical20({
			props: {
				"aria-label": /*ariaLabel*/ ctx[4],
				class: "bx--table-sort__icon-unsorted"
			}
		});

	let th_levels = [
		{
			"aria-sort": th_aria_sort_value = /*active*/ ctx[5]
			? /*$sortHeader*/ ctx[3].sortDirection
			: 'none'
		},
		{ scope: /*scope*/ ctx[1] },
		{ id: /*id*/ ctx[2] },
		/*$$restProps*/ ctx[9]
	];

	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element("th");
			button = element("button");
			div = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(arrowup20.$$.fragment);
			t1 = space();
			create_component(arrowsvertical20.$$.fragment);
			toggle_class(div, "bx--table-header-label", true);
			toggle_class(button, "bx--table-sort", true);
			toggle_class(button, "bx--table-sort--active", /*active*/ ctx[5]);
			toggle_class(button, "bx--table-sort--ascending", /*active*/ ctx[5] && /*$sortHeader*/ ctx[3].sortDirection === 'descending');
			set_attributes(th, th_data);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, button);
			append(button, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(button, t0);
			mount_component(arrowup20, button, null);
			append(button, t1);
			mount_component(arrowsvertical20, button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[16]),
					listen(th, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(th, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(th, "mouseleave", /*mouseleave_handler*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			const arrowup20_changes = {};
			if (dirty & /*ariaLabel*/ 16) arrowup20_changes["aria-label"] = /*ariaLabel*/ ctx[4];
			arrowup20.$set(arrowup20_changes);
			const arrowsvertical20_changes = {};
			if (dirty & /*ariaLabel*/ 16) arrowsvertical20_changes["aria-label"] = /*ariaLabel*/ ctx[4];
			arrowsvertical20.$set(arrowsvertical20_changes);

			if (dirty & /*active*/ 32) {
				toggle_class(button, "bx--table-sort--active", /*active*/ ctx[5]);
			}

			if (dirty & /*active, $sortHeader*/ 40) {
				toggle_class(button, "bx--table-sort--ascending", /*active*/ ctx[5] && /*$sortHeader*/ ctx[3].sortDirection === 'descending');
			}

			set_attributes(th, th_data = get_spread_update(th_levels, [
				(!current || dirty & /*active, $sortHeader*/ 40 && th_aria_sort_value !== (th_aria_sort_value = /*active*/ ctx[5]
				? /*$sortHeader*/ ctx[3].sortDirection
				: 'none')) && { "aria-sort": th_aria_sort_value },
				(!current || dirty & /*scope*/ 2) && { scope: /*scope*/ ctx[1] },
				(!current || dirty & /*id*/ 4) && { id: /*id*/ ctx[2] },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(arrowup20.$$.fragment, local);
			transition_in(arrowsvertical20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(arrowup20.$$.fragment, local);
			transition_out(arrowsvertical20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (default_slot) default_slot.d(detaching);
			destroy_component(arrowup20);
			destroy_component(arrowsvertical20);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$t(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$i, create_else_block$5];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$tableSortable*/ ctx[6] && !/*disableSorting*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$t($$self, $$props, $$invalidate) {
	let active;
	let ariaLabel;
	const omit_props_names = ["disableSorting","scope","translateWithId","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $sortHeader;
	let $tableSortable;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { disableSorting = false } = $$props;
	let { scope = "col" } = $$props;
	let { translateWithId = () => "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const { sortHeader, tableSortable } = getContext("DataTable");
	component_subscribe($$self, sortHeader, value => $$invalidate(3, $sortHeader = value));
	component_subscribe($$self, tableSortable, value => $$invalidate(6, $tableSortable = value));

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('disableSorting' in $$new_props) $$invalidate(0, disableSorting = $$new_props.disableSorting);
		if ('scope' in $$new_props) $$invalidate(1, scope = $$new_props.scope);
		if ('translateWithId' in $$new_props) $$invalidate(10, translateWithId = $$new_props.translateWithId);
		if ('id' in $$new_props) $$invalidate(2, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$sortHeader, id*/ 12) {
			 $$invalidate(5, active = $sortHeader.id === id);
		}

		if ($$self.$$.dirty & /*translateWithId*/ 1024) {
			// TODO: translate with id
			 $$invalidate(4, ariaLabel = translateWithId());
		}
	};

	return [
		disableSorting,
		scope,
		id,
		$sortHeader,
		ariaLabel,
		active,
		$tableSortable,
		sortHeader,
		tableSortable,
		$$restProps,
		translateWithId,
		$$scope,
		slots,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class TableHeader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$t, create_fragment$t, safe_not_equal, {
			disableSorting: 0,
			scope: 1,
			translateWithId: 10,
			id: 2
		});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\TableRow.svelte generated by Svelte v3.46.4 */

function create_fragment$u(ctx) {
	let tr;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let tr_levels = [/*$$restProps*/ ctx[0]];
	let tr_data = {};

	for (let i = 0; i < tr_levels.length; i += 1) {
		tr_data = assign(tr_data, tr_levels[i]);
	}

	return {
		c() {
			tr = element("tr");
			if (default_slot) default_slot.c();
			set_attributes(tr, tr_data);
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			if (default_slot) {
				default_slot.m(tr, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(tr, "click", /*click_handler*/ ctx[3]),
					listen(tr, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(tr, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(tr, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(tr, tr_data = get_spread_update(tr_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$u($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableRow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$u, create_fragment$u, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\DataTable.svelte generated by Svelte v3.46.4 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[61] = list[i];
	child_ctx[63] = i;
	return child_ctx;
}

const get_expanded_row_slot_changes = dirty => ({
	row: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896
});

const get_expanded_row_slot_context = ctx => ({ row: /*row*/ ctx[61] });

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[64] = list[i];
	child_ctx[66] = i;
	return child_ctx;
}

const get_cell_slot_changes_1 = dirty => ({
	row: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896,
	cell: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896,
	rowIndex: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896,
	cellIndex: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896
});

const get_cell_slot_context_1 = ctx => ({
	row: /*row*/ ctx[61],
	cell: /*cell*/ ctx[64],
	rowIndex: /*i*/ ctx[63],
	cellIndex: /*j*/ ctx[66]
});

const get_cell_slot_changes = dirty => ({
	row: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896,
	cell: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896,
	rowIndex: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896,
	cellIndex: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896
});

const get_cell_slot_context = ctx => ({
	row: /*row*/ ctx[61],
	cell: /*cell*/ ctx[64],
	rowIndex: /*i*/ ctx[63],
	cellIndex: /*j*/ ctx[66]
});

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[67] = list[i];
	child_ctx[63] = i;
	return child_ctx;
}

const get_cell_header_slot_changes = dirty => ({ header: dirty[0] & /*headers*/ 32 });
const get_cell_header_slot_context = ctx => ({ header: /*header*/ ctx[67] });
const get_description_slot_changes = dirty => ({});
const get_description_slot_context = ctx => ({});
const get_title_slot_changes = dirty => ({});
const get_title_slot_context = ctx => ({});

// (231:2) {#if title || $$slots.title || description || $$slots.description}
function create_if_block_11(ctx) {
	let div;
	let t;
	let current;
	let if_block0 = (/*title*/ ctx[7] || /*$$slots*/ ctx[34].title) && create_if_block_13(ctx);
	let if_block1 = (/*description*/ ctx[8] || /*$$slots*/ ctx[34].description) && create_if_block_12(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[7] || /*$$slots*/ ctx[34].title) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*title*/ 128 | dirty[1] & /*$$slots*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_13(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*description*/ ctx[8] || /*$$slots*/ ctx[34].description) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*description*/ 256 | dirty[1] & /*$$slots*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_12(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (233:6) {#if title || $$slots.title}
function create_if_block_13(ctx) {
	let h4;
	let current;
	const title_slot_template = /*#slots*/ ctx[41].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[55], get_title_slot_context);
	const title_slot_or_fallback = title_slot || fallback_block_4(ctx);

	return {
		c() {
			h4 = element("h4");
			if (title_slot_or_fallback) title_slot_or_fallback.c();
			toggle_class(h4, "bx--data-table-header__title", true);
		},
		m(target, anchor) {
			insert(target, h4, anchor);

			if (title_slot_or_fallback) {
				title_slot_or_fallback.m(h4, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (title_slot) {
				if (title_slot.p && (!current || dirty[1] & /*$$scope*/ 16777216)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[55],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[55])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[55], dirty, get_title_slot_changes),
						get_title_slot_context
					);
				}
			} else {
				if (title_slot_or_fallback && title_slot_or_fallback.p && (!current || dirty[0] & /*title*/ 128)) {
					title_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h4);
			if (title_slot_or_fallback) title_slot_or_fallback.d(detaching);
		}
	};
}

// (235:29) {title}
function fallback_block_4(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*title*/ 128) set_data(t, /*title*/ ctx[7]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (238:6) {#if description || $$slots.description}
function create_if_block_12(ctx) {
	let p;
	let current;
	const description_slot_template = /*#slots*/ ctx[41].description;
	const description_slot = create_slot(description_slot_template, ctx, /*$$scope*/ ctx[55], get_description_slot_context);
	const description_slot_or_fallback = description_slot || fallback_block_3(ctx);

	return {
		c() {
			p = element("p");
			if (description_slot_or_fallback) description_slot_or_fallback.c();
			toggle_class(p, "bx--data-table-header__description", true);
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (description_slot_or_fallback) {
				description_slot_or_fallback.m(p, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (description_slot) {
				if (description_slot.p && (!current || dirty[1] & /*$$scope*/ 16777216)) {
					update_slot_base(
						description_slot,
						description_slot_template,
						ctx,
						/*$$scope*/ ctx[55],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[55])
						: get_slot_changes(description_slot_template, /*$$scope*/ ctx[55], dirty, get_description_slot_changes),
						get_description_slot_context
					);
				}
			} else {
				if (description_slot_or_fallback && description_slot_or_fallback.p && (!current || dirty[0] & /*description*/ 256)) {
					description_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(description_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(description_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (description_slot_or_fallback) description_slot_or_fallback.d(detaching);
		}
	};
}

// (240:35) {description}
function fallback_block_3(ctx) {
	let t;

	return {
		c() {
			t = text(/*description*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*description*/ 256) set_data(t, /*description*/ ctx[8]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (255:8) {#if expandable}
function create_if_block_9(ctx) {
	let th;
	let th_data_previous_value_value;
	let current;
	let if_block = /*batchExpansion*/ ctx[11] && create_if_block_10(ctx);

	return {
		c() {
			th = element("th");
			if (if_block) if_block.c();
			attr(th, "scope", "col");
			attr(th, "data-previous-value", th_data_previous_value_value = /*expanded*/ ctx[20] ? 'collapsed' : undefined);
			toggle_class(th, "bx--table-expand", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			if (if_block) if_block.m(th, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*batchExpansion*/ ctx[11]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*batchExpansion*/ 2048) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_10(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(th, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*expanded*/ 1048576 && th_data_previous_value_value !== (th_data_previous_value_value = /*expanded*/ ctx[20] ? 'collapsed' : undefined)) {
				attr(th, "data-previous-value", th_data_previous_value_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (if_block) if_block.d();
		}
	};
}

// (261:12) {#if batchExpansion}
function create_if_block_10(ctx) {
	let button;
	let chevronright16;
	let current;
	let mounted;
	let dispose;

	chevronright16 = new ChevronRight16({
			props: { class: "bx--table-expand__svg" }
		});

	return {
		c() {
			button = element("button");
			create_component(chevronright16.$$.fragment);
			attr(button, "type", "button");
			toggle_class(button, "bx--table-expand__button", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(chevronright16, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[42]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(chevronright16);
			mounted = false;
			dispose();
		}
	};
}

// (277:8) {#if selectable && !batchSelection}
function create_if_block_8(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "scope", "col");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (280:8) {#if batchSelection && !radio}
function create_if_block_7(ctx) {
	let th;
	let inlinecheckbox;
	let updating_ref;
	let current;

	function inlinecheckbox_ref_binding(value) {
		/*inlinecheckbox_ref_binding*/ ctx[43](value);
	}

	let inlinecheckbox_props = {
		"aria-label": "Select all rows",
		checked: /*selectAll*/ ctx[26],
		indeterminate: /*indeterminate*/ ctx[25]
	};

	if (/*refSelectAll*/ ctx[22] !== void 0) {
		inlinecheckbox_props.ref = /*refSelectAll*/ ctx[22];
	}

	inlinecheckbox = new InlineCheckbox({ props: inlinecheckbox_props });
	binding_callbacks.push(() => bind(inlinecheckbox, 'ref', inlinecheckbox_ref_binding));
	inlinecheckbox.$on("change", /*change_handler*/ ctx[44]);

	return {
		c() {
			th = element("th");
			create_component(inlinecheckbox.$$.fragment);
			attr(th, "scope", "col");
			toggle_class(th, "bx--table-column-checkbox", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			mount_component(inlinecheckbox, th, null);
			current = true;
		},
		p(ctx, dirty) {
			const inlinecheckbox_changes = {};
			if (dirty[0] & /*selectAll*/ 67108864) inlinecheckbox_changes.checked = /*selectAll*/ ctx[26];
			if (dirty[0] & /*indeterminate*/ 33554432) inlinecheckbox_changes.indeterminate = /*indeterminate*/ ctx[25];

			if (!updating_ref && dirty[0] & /*refSelectAll*/ 4194304) {
				updating_ref = true;
				inlinecheckbox_changes.ref = /*refSelectAll*/ ctx[22];
				add_flush_callback(() => updating_ref = false);
			}

			inlinecheckbox.$set(inlinecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inlinecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			destroy_component(inlinecheckbox);
		}
	};
}

// (307:10) {:else}
function create_else_block_2(ctx) {
	let tableheader;
	let current;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[45](/*header*/ ctx[67]);
	}

	tableheader = new TableHeader({
			props: {
				id: /*header*/ ctx[67].key,
				disableSorting: /*header*/ ctx[67].sort === false,
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	tableheader.$on("click", click_handler_1);

	return {
		c() {
			create_component(tableheader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tableheader, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tableheader_changes = {};
			if (dirty[0] & /*headers*/ 32) tableheader_changes.id = /*header*/ ctx[67].key;
			if (dirty[0] & /*headers*/ 32) tableheader_changes.disableSorting = /*header*/ ctx[67].sort === false;

			if (dirty[0] & /*headers*/ 32 | dirty[1] & /*$$scope*/ 16777216) {
				tableheader_changes.$$scope = { dirty, ctx };
			}

			tableheader.$set(tableheader_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tableheader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tableheader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tableheader, detaching);
		}
	};
}

// (305:10) {#if header.empty}
function create_if_block_6$1(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "scope", "col");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (332:57) {header.value}
function fallback_block_2(ctx) {
	let t_value = /*header*/ ctx[67].value + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers*/ 32 && t_value !== (t_value = /*header*/ ctx[67].value + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (308:12) <TableHeader               id="{header.key}"               disableSorting="{header.sort === false}"               on:click="{() => {                 dispatch('click', { header });                  if (header.sort === false) {                   dispatch('click:header', { header });                 } else {                   let active = header.key === $sortHeader.key;                   let currentSortDirection = active                     ? $sortHeader.sortDirection                     : 'none';                   let sortDirection = sortDirectionMap[currentSortDirection];                   dispatch('click:header', { header, sortDirection });                   sortHeader.set({                     id: sortDirection === 'none' ? null : $thKeys[header.key],                     key: header.key,                     sort: header.sort,                     sortDirection,                   });                 }               }}"             >
function create_default_slot_9(ctx) {
	let t;
	let current;
	const cell_header_slot_template = /*#slots*/ ctx[41]["cell-header"];
	const cell_header_slot = create_slot(cell_header_slot_template, ctx, /*$$scope*/ ctx[55], get_cell_header_slot_context);
	const cell_header_slot_or_fallback = cell_header_slot || fallback_block_2(ctx);

	return {
		c() {
			if (cell_header_slot_or_fallback) cell_header_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (cell_header_slot_or_fallback) {
				cell_header_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_header_slot) {
				if (cell_header_slot.p && (!current || dirty[0] & /*headers*/ 32 | dirty[1] & /*$$scope*/ 16777216)) {
					update_slot_base(
						cell_header_slot,
						cell_header_slot_template,
						ctx,
						/*$$scope*/ ctx[55],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[55])
						: get_slot_changes(cell_header_slot_template, /*$$scope*/ ctx[55], dirty, get_cell_header_slot_changes),
						get_cell_header_slot_context
					);
				}
			} else {
				if (cell_header_slot_or_fallback && cell_header_slot_or_fallback.p && (!current || dirty[0] & /*headers*/ 32)) {
					cell_header_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_header_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_header_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cell_header_slot_or_fallback) cell_header_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (304:8) {#each headers as header, i (header.key)}
function create_each_block_2(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_6$1, create_else_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*header*/ ctx[67].empty) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (254:6) <TableRow>
function create_default_slot_8(ctx) {
	let t0;
	let t1;
	let t2;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let if_block0 = /*expandable*/ ctx[3] && create_if_block_9(ctx);
	let if_block1 = /*selectable*/ ctx[4] && !/*batchSelection*/ ctx[14] && create_if_block_8();
	let if_block2 = /*batchSelection*/ ctx[14] && !/*radio*/ ctx[13] && create_if_block_7(ctx);
	let each_value_2 = /*headers*/ ctx[5];
	const get_key = ctx => /*header*/ ctx[67].key;

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*expandable*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_9(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectable*/ ctx[4] && !/*batchSelection*/ ctx[14]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_8();
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*batchSelection*/ ctx[14] && !/*radio*/ ctx[13]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*batchSelection, radio*/ 24576) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_7(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*headers, dispatch, $sortHeader, sortDirectionMap, $thKeys*/ 1879572512 | dirty[1] & /*sortHeader, $$scope*/ 16777217) {
				each_value_2 = /*headers*/ ctx[5];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_2, each_1_anchor, get_each_context_2);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (253:4) <TableHead>
function create_default_slot_7(ctx) {
	let tablerow;
	let current;

	tablerow = new TableRow({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablerow.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablerow, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablerow_changes = {};

			if (dirty[0] & /*headers, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, selectedRowIds, rows, batchSelection, radio, selectable, expanded, expandedRowIds, expandableRowIds, batchExpansion, expandable*/ 375154751 | dirty[1] & /*$$scope*/ 16777216) {
				tablerow_changes.$$scope = { dirty, ctx };
			}

			tablerow.$set(tablerow_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablerow.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablerow.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablerow, detaching);
		}
	};
}

// (369:10) {#if expandable}
function create_if_block_4$2(ctx) {
	let tablecell;
	let current;

	tablecell = new TableCell({
			props: {
				class: "bx--table-expand",
				headers: "expand",
				"data-previous-value": !/*nonExpandableRowIds*/ ctx[12].includes(/*row*/ ctx[61].id) && /*expandedRows*/ ctx[27][/*row*/ ctx[61].id]
				? 'collapsed'
				: undefined,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecell_changes = {};

			if (dirty[0] & /*nonExpandableRowIds, sorting, displayedSortedRows, displayedRows, expandedRows*/ 159518720) tablecell_changes["data-previous-value"] = !/*nonExpandableRowIds*/ ctx[12].includes(/*row*/ ctx[61].id) && /*expandedRows*/ ctx[27][/*row*/ ctx[61].id]
			? 'collapsed'
			: undefined;

			if (dirty[0] & /*expandedRows, sorting, displayedSortedRows, displayedRows, expandedRowIds, nonExpandableRowIds*/ 159518722 | dirty[1] & /*$$scope*/ 16777216) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (378:14) {#if !nonExpandableRowIds.includes(row.id)}
function create_if_block_5$1(ctx) {
	let button;
	let chevronright16;
	let button_aria_label_value;
	let current;
	let mounted;
	let dispose;

	chevronright16 = new ChevronRight16({
			props: { class: "bx--table-expand__svg" }
		});

	function click_handler_2() {
		return /*click_handler_2*/ ctx[46](/*row*/ ctx[61]);
	}

	return {
		c() {
			button = element("button");
			create_component(chevronright16.$$.fragment);
			attr(button, "type", "button");

			attr(button, "aria-label", button_aria_label_value = /*expandedRows*/ ctx[27][/*row*/ ctx[61].id]
			? 'Collapse current row'
			: 'Expand current row');

			toggle_class(button, "bx--table-expand__button", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(chevronright16, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", stop_propagation(click_handler_2));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty[0] & /*expandedRows, sorting, displayedSortedRows, displayedRows*/ 159514624 && button_aria_label_value !== (button_aria_label_value = /*expandedRows*/ ctx[27][/*row*/ ctx[61].id]
			? 'Collapse current row'
			: 'Expand current row')) {
				attr(button, "aria-label", button_aria_label_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(chevronright16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(chevronright16);
			mounted = false;
			dispose();
		}
	};
}

// (370:12) <TableCell               class="bx--table-expand"               headers="expand"               data-previous-value="{!nonExpandableRowIds.includes(row.id) &&               expandedRows[row.id]                 ? 'collapsed'                 : undefined}"             >
function create_default_slot_6(ctx) {
	let show_if = !/*nonExpandableRowIds*/ ctx[12].includes(/*row*/ ctx[61].id);
	let if_block_anchor;
	let current;
	let if_block = show_if && create_if_block_5$1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*nonExpandableRowIds, sorting, displayedSortedRows, displayedRows*/ 25300992) show_if = !/*nonExpandableRowIds*/ ctx[12].includes(/*row*/ ctx[61].id);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*nonExpandableRowIds, sorting, displayedSortedRows, displayedRows*/ 25300992) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_5$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (403:10) {#if selectable}
function create_if_block_2$2(ctx) {
	let td;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_3$2, create_else_block_1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*radio*/ ctx[13]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			td = element("td");
			if_block.c();
			toggle_class(td, "bx--table-column-checkbox", true);
			toggle_class(td, "bx--table-column-radio", /*radio*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, td, anchor);
			if_blocks[current_block_type_index].m(td, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(td, null);
			}

			if (dirty[0] & /*radio*/ 8192) {
				toggle_class(td, "bx--table-column-radio", /*radio*/ ctx[13]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (416:14) {:else}
function create_else_block_1(ctx) {
	let inlinecheckbox;
	let current;

	function change_handler_2() {
		return /*change_handler_2*/ ctx[48](/*row*/ ctx[61]);
	}

	inlinecheckbox = new InlineCheckbox({
			props: {
				name: "select-row-" + /*row*/ ctx[61].id,
				checked: /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[61].id)
			}
		});

	inlinecheckbox.$on("change", change_handler_2);

	return {
		c() {
			create_component(inlinecheckbox.$$.fragment);
		},
		m(target, anchor) {
			mount_component(inlinecheckbox, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const inlinecheckbox_changes = {};
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896) inlinecheckbox_changes.name = "select-row-" + /*row*/ ctx[61].id;
			if (dirty[0] & /*selectedRowIds, sorting, displayedSortedRows, displayedRows*/ 25296900) inlinecheckbox_changes.checked = /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[61].id);
			inlinecheckbox.$set(inlinecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inlinecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(inlinecheckbox, detaching);
		}
	};
}

// (408:14) {#if radio}
function create_if_block_3$2(ctx) {
	let radiobutton;
	let current;

	function change_handler_1() {
		return /*change_handler_1*/ ctx[47](/*row*/ ctx[61]);
	}

	radiobutton = new RadioButton({
			props: {
				name: "select-row-" + /*row*/ ctx[61].id,
				checked: /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[61].id)
			}
		});

	radiobutton.$on("change", change_handler_1);

	return {
		c() {
			create_component(radiobutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(radiobutton, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const radiobutton_changes = {};
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896) radiobutton_changes.name = "select-row-" + /*row*/ ctx[61].id;
			if (dirty[0] & /*selectedRowIds, sorting, displayedSortedRows, displayedRows*/ 25296900) radiobutton_changes.checked = /*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[61].id);
			radiobutton.$set(radiobutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(radiobutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(radiobutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(radiobutton, detaching);
		}
	};
}

// (446:12) {:else}
function create_else_block$6(ctx) {
	let tablecell;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[49](/*row*/ ctx[61], /*cell*/ ctx[64]);
	}

	tablecell = new TableCell({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	tablecell.$on("click", click_handler_3);

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablecell_changes = {};

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896 | dirty[1] & /*$$scope*/ 16777216) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (434:12) {#if headers[j].empty}
function create_if_block_1$4(ctx) {
	let td;
	let t;
	let current;
	const cell_slot_template = /*#slots*/ ctx[41].cell;
	const cell_slot = create_slot(cell_slot_template, ctx, /*$$scope*/ ctx[55], get_cell_slot_context);
	const cell_slot_or_fallback = cell_slot || fallback_block$c(ctx);

	return {
		c() {
			td = element("td");
			if (cell_slot_or_fallback) cell_slot_or_fallback.c();
			t = space();
			toggle_class(td, "bx--table-column-menu", /*headers*/ ctx[5][/*j*/ ctx[66]].columnMenu);
		},
		m(target, anchor) {
			insert(target, td, anchor);

			if (cell_slot_or_fallback) {
				cell_slot_or_fallback.m(td, null);
			}

			append(td, t);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_slot) {
				if (cell_slot.p && (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896 | dirty[1] & /*$$scope*/ 16777216)) {
					update_slot_base(
						cell_slot,
						cell_slot_template,
						ctx,
						/*$$scope*/ ctx[55],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[55])
						: get_slot_changes(cell_slot_template, /*$$scope*/ ctx[55], dirty, get_cell_slot_changes),
						get_cell_slot_context
					);
				}
			} else {
				if (cell_slot_or_fallback && cell_slot_or_fallback.p && (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896)) {
					cell_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}

			if (dirty[0] & /*headers, sorting, displayedSortedRows, displayedRows*/ 25296928) {
				toggle_class(td, "bx--table-column-menu", /*headers*/ ctx[5][/*j*/ ctx[66]].columnMenu);
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (cell_slot_or_fallback) cell_slot_or_fallback.d(detaching);
		}
	};
}

// (459:17)                    
function fallback_block_1(ctx) {
	let t_value = (/*cell*/ ctx[64].display
	? /*cell*/ ctx[64].display(/*cell*/ ctx[64].value)
	: /*cell*/ ctx[64].value) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896 && t_value !== (t_value = (/*cell*/ ctx[64].display
			? /*cell*/ ctx[64].display(/*cell*/ ctx[64].value)
			: /*cell*/ ctx[64].value) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (447:14) <TableCell                 on:click="{() => {                   dispatch('click', { row, cell });                   dispatch('click:cell', cell);                 }}"               >
function create_default_slot_5(ctx) {
	let t;
	let current;
	const cell_slot_template = /*#slots*/ ctx[41].cell;
	const cell_slot = create_slot(cell_slot_template, ctx, /*$$scope*/ ctx[55], get_cell_slot_context_1);
	const cell_slot_or_fallback = cell_slot || fallback_block_1(ctx);

	return {
		c() {
			if (cell_slot_or_fallback) cell_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (cell_slot_or_fallback) {
				cell_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_slot) {
				if (cell_slot.p && (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896 | dirty[1] & /*$$scope*/ 16777216)) {
					update_slot_base(
						cell_slot,
						cell_slot_template,
						ctx,
						/*$$scope*/ ctx[55],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[55])
						: get_slot_changes(cell_slot_template, /*$$scope*/ ctx[55], dirty, get_cell_slot_changes_1),
						get_cell_slot_context_1
					);
				}
			} else {
				if (cell_slot_or_fallback && cell_slot_or_fallback.p && (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896)) {
					cell_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cell_slot_or_fallback) cell_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (442:17)                    
function fallback_block$c(ctx) {
	let t_value = (/*cell*/ ctx[64].display
	? /*cell*/ ctx[64].display(/*cell*/ ctx[64].value)
	: /*cell*/ ctx[64].value) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896 && t_value !== (t_value = (/*cell*/ ctx[64].display
			? /*cell*/ ctx[64].display(/*cell*/ ctx[64].value)
			: /*cell*/ ctx[64].value) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (433:10) {#each row.cells as cell, j (cell.key)}
function create_each_block_1(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$4, create_else_block$6];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*headers*/ ctx[5][/*j*/ ctx[66]].empty) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (340:8) <TableRow           id="row-{row.id}"           class="{selectedRowIds.includes(row.id)             ? 'bx--data-table--selected'             : ''} {expandedRows[row.id] ? 'bx--expandable-row' : ''} {expandable             ? 'bx--parent-row'             : ''} {expandable && parentRowId === row.id             ? 'bx--expandable-row--hover'             : ''}"           on:click="{({ target }) => {             // forgo "click", "click:row" events if target             // resembles an overflow menu, a checkbox, or radio button             if (               [...target.classList].some((name) =>                 /^bx--(overflow-menu|checkbox|radio-button)/.test(name)               )             ) {               return;             }             dispatch('click', { row });             dispatch('click:row', row);           }}"           on:mouseenter="{() => {             dispatch('mouseenter:row', row);           }}"           on:mouseleave="{() => {             dispatch('mouseleave:row', row);           }}"         >
function create_default_slot_4(ctx) {
	let t0;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let if_block0 = /*expandable*/ ctx[3] && create_if_block_4$2(ctx);
	let if_block1 = /*selectable*/ ctx[4] && create_if_block_2$2(ctx);
	let each_value_1 = /*row*/ ctx[61].cells;
	const get_key = ctx => /*cell*/ ctx[64].key;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*expandable*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectable*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*selectable*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*headers, sorting, displayedSortedRows, displayedRows, dispatch*/ 1099038752 | dirty[1] & /*$$scope*/ 16777216) {
				each_value_1 = /*row*/ ctx[61].cells;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_1, each_1_anchor, get_each_context_1);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (467:8) {#if expandable && expandedRows[row.id] && !nonExpandableRowIds.includes(row.id)}
function create_if_block$j(ctx) {
	let tr;
	let tablecell;
	let t;
	let current;
	let mounted;
	let dispose;

	tablecell = new TableCell({
			props: {
				colspan: /*selectable*/ ctx[4]
				? /*headers*/ ctx[5].length + 2
				: /*headers*/ ctx[5].length + 1,
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			}
		});

	function mouseenter_handler_1() {
		return /*mouseenter_handler_1*/ ctx[53](/*row*/ ctx[61]);
	}

	return {
		c() {
			tr = element("tr");
			create_component(tablecell.$$.fragment);
			t = space();
			attr(tr, "data-child-row", "");
			toggle_class(tr, "bx--expandable-row", true);
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			mount_component(tablecell, tr, null);
			append(tr, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen(tr, "mouseenter", mouseenter_handler_1),
					listen(tr, "mouseleave", /*mouseleave_handler_1*/ ctx[54])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablecell_changes = {};

			if (dirty[0] & /*selectable, headers*/ 48) tablecell_changes.colspan = /*selectable*/ ctx[4]
			? /*headers*/ ctx[5].length + 2
			: /*headers*/ ctx[5].length + 1;

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896 | dirty[1] & /*$$scope*/ 16777216) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_component(tablecell);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (478:12) <TableCell               colspan="{selectable ? headers.length + 2 : headers.length + 1}"             >
function create_default_slot_3$1(ctx) {
	let div;
	let current;
	const expanded_row_slot_template = /*#slots*/ ctx[41]["expanded-row"];
	const expanded_row_slot = create_slot(expanded_row_slot_template, ctx, /*$$scope*/ ctx[55], get_expanded_row_slot_context);

	return {
		c() {
			div = element("div");
			if (expanded_row_slot) expanded_row_slot.c();
			toggle_class(div, "bx--child-row-inner-container", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (expanded_row_slot) {
				expanded_row_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (expanded_row_slot) {
				if (expanded_row_slot.p && (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896 | dirty[1] & /*$$scope*/ 16777216)) {
					update_slot_base(
						expanded_row_slot,
						expanded_row_slot_template,
						ctx,
						/*$$scope*/ ctx[55],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[55])
						: get_slot_changes(expanded_row_slot_template, /*$$scope*/ ctx[55], dirty, get_expanded_row_slot_changes),
						get_expanded_row_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(expanded_row_slot, local);
			current = true;
		},
		o(local) {
			transition_out(expanded_row_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (expanded_row_slot) expanded_row_slot.d(detaching);
		}
	};
}

// (339:6) {#each sorting ? displayedSortedRows : displayedRows as row, i (row.id)}
function create_each_block$1(key_1, ctx) {
	let first;
	let tablerow;
	let t;
	let show_if = /*expandable*/ ctx[3] && /*expandedRows*/ ctx[27][/*row*/ ctx[61].id] && !/*nonExpandableRowIds*/ ctx[12].includes(/*row*/ ctx[61].id);
	let if_block_anchor;
	let current;

	function click_handler_4(...args) {
		return /*click_handler_4*/ ctx[50](/*row*/ ctx[61], ...args);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[51](/*row*/ ctx[61]);
	}

	function mouseleave_handler() {
		return /*mouseleave_handler*/ ctx[52](/*row*/ ctx[61]);
	}

	tablerow = new TableRow({
			props: {
				id: "row-" + /*row*/ ctx[61].id,
				class: "" + ((/*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[61].id)
				? 'bx--data-table--selected'
				: '') + " " + (/*expandedRows*/ ctx[27][/*row*/ ctx[61].id]
				? 'bx--expandable-row'
				: '') + " " + (/*expandable*/ ctx[3] ? 'bx--parent-row' : '') + " " + (/*expandable*/ ctx[3] && /*parentRowId*/ ctx[21] === /*row*/ ctx[61].id
				? 'bx--expandable-row--hover'
				: '')),
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	tablerow.$on("click", click_handler_4);
	tablerow.$on("mouseenter", mouseenter_handler);
	tablerow.$on("mouseleave", mouseleave_handler);
	let if_block = show_if && create_if_block$j(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(tablerow.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(tablerow, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablerow_changes = {};
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 25296896) tablerow_changes.id = "row-" + /*row*/ ctx[61].id;

			if (dirty[0] & /*selectedRowIds, sorting, displayedSortedRows, displayedRows, expandedRows, expandable, parentRowId*/ 161611788) tablerow_changes.class = "" + ((/*selectedRowIds*/ ctx[2].includes(/*row*/ ctx[61].id)
			? 'bx--data-table--selected'
			: '') + " " + (/*expandedRows*/ ctx[27][/*row*/ ctx[61].id]
			? 'bx--expandable-row'
			: '') + " " + (/*expandable*/ ctx[3] ? 'bx--parent-row' : '') + " " + (/*expandable*/ ctx[3] && /*parentRowId*/ ctx[21] === /*row*/ ctx[61].id
			? 'bx--expandable-row--hover'
			: ''));

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows, headers, radio, selectedRowIds, selectable, nonExpandableRowIds, expandedRows, expandedRowIds, expandable*/ 159526974 | dirty[1] & /*$$scope*/ 16777216) {
				tablerow_changes.$$scope = { dirty, ctx };
			}

			tablerow.$set(tablerow_changes);
			if (dirty[0] & /*expandable, expandedRows, sorting, displayedSortedRows, displayedRows, nonExpandableRowIds*/ 159518728) show_if = /*expandable*/ ctx[3] && /*expandedRows*/ ctx[27][/*row*/ ctx[61].id] && !/*nonExpandableRowIds*/ ctx[12].includes(/*row*/ ctx[61].id);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*expandable, expandedRows, sorting, displayedSortedRows, displayedRows, nonExpandableRowIds*/ 159518728) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$j(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(tablerow.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(tablerow.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(tablerow, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (338:4) <TableBody>
function create_default_slot_2$1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;

	let each_value = /*sorting*/ ctx[17]
	? /*displayedSortedRows*/ ctx[23]
	: /*displayedRows*/ ctx[24];

	const get_key = ctx => /*row*/ ctx[61].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$1(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*parentRowId, sorting, displayedSortedRows, displayedRows, selectable, headers, expandable, expandedRows, nonExpandableRowIds, selectedRowIds, dispatch, radio, expandedRowIds*/ 1235365950 | dirty[1] & /*$$scope*/ 16777216) {
				each_value = /*sorting*/ ctx[17]
				? /*displayedSortedRows*/ ctx[23]
				: /*displayedRows*/ ctx[24];

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$1, each_1_anchor, get_each_context$1);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (246:2) <Table     zebra="{zebra}"     size="{size}"     stickyHeader="{stickyHeader}"     sortable="{sortable}"     useStaticWidth="{useStaticWidth}"   >
function create_default_slot_1$1(ctx) {
	let tablehead;
	let t;
	let tablebody;
	let current;

	tablehead = new TableHead({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	tablebody = new TableBody({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablehead.$$.fragment);
			t = space();
			create_component(tablebody.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablehead, target, anchor);
			insert(target, t, anchor);
			mount_component(tablebody, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablehead_changes = {};

			if (dirty[0] & /*headers, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, selectedRowIds, rows, batchSelection, radio, selectable, expanded, expandedRowIds, expandableRowIds, batchExpansion, expandable*/ 375154751 | dirty[1] & /*$$scope*/ 16777216) {
				tablehead_changes.$$scope = { dirty, ctx };
			}

			tablehead.$set(tablehead_changes);
			const tablebody_changes = {};

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows, parentRowId, selectable, headers, expandable, expandedRows, nonExpandableRowIds, selectedRowIds, radio, expandedRowIds*/ 161624126 | dirty[1] & /*$$scope*/ 16777216) {
				tablebody_changes.$$scope = { dirty, ctx };
			}

			tablebody.$set(tablebody_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablehead.$$.fragment, local);
			transition_in(tablebody.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablehead.$$.fragment, local);
			transition_out(tablebody.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablehead, detaching);
			if (detaching) detach(t);
			destroy_component(tablebody, detaching);
		}
	};
}

// (230:0) <TableContainer useStaticWidth="{useStaticWidth}" {...$$restProps}>
function create_default_slot$1(ctx) {
	let t0;
	let t1;
	let table;
	let current;
	let if_block = (/*title*/ ctx[7] || /*$$slots*/ ctx[34].title || /*description*/ ctx[8] || /*$$slots*/ ctx[34].description) && create_if_block_11(ctx);
	const default_slot_template = /*#slots*/ ctx[41].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[55], null);

	table = new Table({
			props: {
				zebra: /*zebra*/ ctx[9],
				size: /*size*/ ctx[6],
				stickyHeader: /*stickyHeader*/ ctx[15],
				sortable: /*sortable*/ ctx[10],
				useStaticWidth: /*useStaticWidth*/ ctx[16],
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			create_component(table.$$.fragment);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert(target, t1, anchor);
			mount_component(table, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[7] || /*$$slots*/ ctx[34].title || /*description*/ ctx[8] || /*$$slots*/ ctx[34].description) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*title, description*/ 384 | dirty[1] & /*$$slots*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_11(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 16777216)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[55],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[55])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[55], dirty, null),
						null
					);
				}
			}

			const table_changes = {};
			if (dirty[0] & /*zebra*/ 512) table_changes.zebra = /*zebra*/ ctx[9];
			if (dirty[0] & /*size*/ 64) table_changes.size = /*size*/ ctx[6];
			if (dirty[0] & /*stickyHeader*/ 32768) table_changes.stickyHeader = /*stickyHeader*/ ctx[15];
			if (dirty[0] & /*sortable*/ 1024) table_changes.sortable = /*sortable*/ ctx[10];
			if (dirty[0] & /*useStaticWidth*/ 65536) table_changes.useStaticWidth = /*useStaticWidth*/ ctx[16];

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows, parentRowId, selectable, headers, expandable, expandedRows, nonExpandableRowIds, selectedRowIds, radio, expandedRowIds, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, rows, batchSelection, expanded, expandableRowIds, batchExpansion*/ 536770623 | dirty[1] & /*$$scope*/ 16777216) {
				table_changes.$$scope = { dirty, ctx };
			}

			table.$set(table_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t1);
			destroy_component(table, detaching);
		}
	};
}

function create_fragment$v(ctx) {
	let tablecontainer;
	let current;

	const tablecontainer_spread_levels = [
		{
			useStaticWidth: /*useStaticWidth*/ ctx[16]
		},
		/*$$restProps*/ ctx[33]
	];

	let tablecontainer_props = {
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	for (let i = 0; i < tablecontainer_spread_levels.length; i += 1) {
		tablecontainer_props = assign(tablecontainer_props, tablecontainer_spread_levels[i]);
	}

	tablecontainer = new TableContainer({ props: tablecontainer_props });

	return {
		c() {
			create_component(tablecontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecontainer, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecontainer_changes = (dirty[0] & /*useStaticWidth*/ 65536 | dirty[1] & /*$$restProps*/ 4)
			? get_spread_update(tablecontainer_spread_levels, [
					dirty[0] & /*useStaticWidth*/ 65536 && {
						useStaticWidth: /*useStaticWidth*/ ctx[16]
					},
					dirty[1] & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[33])
				])
			: {};

			if (dirty[0] & /*zebra, size, stickyHeader, sortable, useStaticWidth, sorting, displayedSortedRows, displayedRows, parentRowId, selectable, headers, expandable, expandedRows, nonExpandableRowIds, selectedRowIds, radio, expandedRowIds, $sortHeader, $thKeys, selectAll, indeterminate, refSelectAll, rows, batchSelection, expanded, expandableRowIds, batchExpansion, description, title*/ 536870911 | dirty[1] & /*$$scope, $$slots*/ 16777224) {
				tablecontainer_changes.$$scope = { dirty, ctx };
			}

			tablecontainer.$set(tablecontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecontainer, detaching);
		}
	};
}

function instance$v($$self, $$props, $$invalidate) {
	let expandedRows;
	let selectAll;
	let expandableRowIds;
	let indeterminate;
	let headerKeys;
	let sortedRows;
	let ascending;
	let sortKey;
	let sorting;
	let displayedRows;
	let displayedSortedRows;

	const omit_props_names = [
		"headers","rows","size","title","description","zebra","sortable","expandable","batchExpansion","expandedRowIds","nonExpandableRowIds","radio","selectable","batchSelection","selectedRowIds","stickyHeader","useStaticWidth","pageSize","page"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $sortHeader;
	let $thKeys;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { headers = [] } = $$props;
	let { rows = [] } = $$props;
	let { size = undefined } = $$props;
	let { title = "" } = $$props;
	let { description = "" } = $$props;
	let { zebra = false } = $$props;
	let { sortable = false } = $$props;
	let { expandable = false } = $$props;
	let { batchExpansion = false } = $$props;
	let { expandedRowIds = [] } = $$props;
	let { nonExpandableRowIds = [] } = $$props;
	let { radio = false } = $$props;
	let { selectable = false } = $$props;
	let { batchSelection = false } = $$props;
	let { selectedRowIds = [] } = $$props;
	let { stickyHeader = false } = $$props;
	let { useStaticWidth = false } = $$props;
	let { pageSize = 0 } = $$props;
	let { page = 0 } = $$props;

	const sortDirectionMap = {
		none: "ascending",
		ascending: "descending",
		descending: "none"
	};

	const dispatch = createEventDispatcher();
	const batchSelectedIds = writable(false);
	const tableSortable = writable(sortable);

	const sortHeader = writable({
		id: null,
		key: null,
		sort: undefined,
		sortDirection: "none"
	});

	component_subscribe($$self, sortHeader, value => $$invalidate(19, $sortHeader = value));
	const headerItems = writable([]);
	const thKeys = derived(headerItems, () => headers.map(({ key }, i) => ({ key, id: key })).reduce((a, c) => ({ ...a, [c.key]: c.id }), {}));
	component_subscribe($$self, thKeys, value => $$invalidate(28, $thKeys = value));
	const resolvePath = (object, path) => path.split(/[\.\[\]\'\"]/).filter(p => p).reduce((o, p) => o && typeof o === "object" ? o[p] : o, object);

	setContext("DataTable", {
		sortHeader,
		tableSortable,
		batchSelectedIds,
		resetSelectedRowIds: () => {
			$$invalidate(26, selectAll = false);
			$$invalidate(2, selectedRowIds = []);
			if (refSelectAll) $$invalidate(22, refSelectAll.checked = false, refSelectAll);
		}
	});

	let expanded = false;
	let parentRowId = null;
	let refSelectAll = null;

	const getDisplayedRows = (rows, page, pageSize) => page && pageSize
	? rows.slice((page - 1) * pageSize, page * pageSize)
	: rows;

	const click_handler = () => {
		$$invalidate(20, expanded = !expanded);
		$$invalidate(1, expandedRowIds = expanded ? expandableRowIds : []);
		dispatch('click:header--expand', { expanded });
	};

	function inlinecheckbox_ref_binding(value) {
		refSelectAll = value;
		$$invalidate(22, refSelectAll);
	}

	const change_handler = e => {
		if (indeterminate) {
			e.target.checked = false;
			$$invalidate(26, selectAll = false);
			$$invalidate(2, selectedRowIds = []);
			return;
		}

		if (e.target.checked) {
			$$invalidate(2, selectedRowIds = rows.map(row => row.id));
		} else {
			$$invalidate(2, selectedRowIds = []);
		}
	};

	const click_handler_1 = header => {
		dispatch('click', { header });

		if (header.sort === false) {
			dispatch('click:header', { header });
		} else {
			let active = header.key === $sortHeader.key;
			let currentSortDirection = active ? $sortHeader.sortDirection : 'none';
			let sortDirection = sortDirectionMap[currentSortDirection];
			dispatch('click:header', { header, sortDirection });

			sortHeader.set({
				id: sortDirection === 'none' ? null : $thKeys[header.key],
				key: header.key,
				sort: header.sort,
				sortDirection
			});
		}
	};

	const click_handler_2 = row => {
		const rowExpanded = !!expandedRows[row.id];

		$$invalidate(1, expandedRowIds = rowExpanded
		? expandedRowIds.filter(id => id !== row.id)
		: [...expandedRowIds, row.id]);

		dispatch('click:row--expand', { row, expanded: !rowExpanded });
	};

	const change_handler_1 = row => {
		$$invalidate(2, selectedRowIds = [row.id]);
	};

	const change_handler_2 = row => {
		if (selectedRowIds.includes(row.id)) {
			$$invalidate(2, selectedRowIds = selectedRowIds.filter(id => id !== row.id));
		} else {
			$$invalidate(2, selectedRowIds = [...selectedRowIds, row.id]);
		}
	};

	const click_handler_3 = (row, cell) => {
		dispatch('click', { row, cell });
		dispatch('click:cell', cell);
	};

	const click_handler_4 = (row, { target }) => {
		// forgo "click", "click:row" events if target
		// resembles an overflow menu, a checkbox, or radio button
		if ([...target.classList].some(name => (/^bx--(overflow-menu|checkbox|radio-button)/).test(name))) {
			return;
		}

		dispatch('click', { row });
		dispatch('click:row', row);
	};

	const mouseenter_handler = row => {
		dispatch('mouseenter:row', row);
	};

	const mouseleave_handler = row => {
		dispatch('mouseleave:row', row);
	};

	const mouseenter_handler_1 = row => {
		$$invalidate(21, parentRowId = row.id);
	};

	const mouseleave_handler_1 = () => {
		$$invalidate(21, parentRowId = null);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(33, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('headers' in $$new_props) $$invalidate(5, headers = $$new_props.headers);
		if ('rows' in $$new_props) $$invalidate(0, rows = $$new_props.rows);
		if ('size' in $$new_props) $$invalidate(6, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(7, title = $$new_props.title);
		if ('description' in $$new_props) $$invalidate(8, description = $$new_props.description);
		if ('zebra' in $$new_props) $$invalidate(9, zebra = $$new_props.zebra);
		if ('sortable' in $$new_props) $$invalidate(10, sortable = $$new_props.sortable);
		if ('expandable' in $$new_props) $$invalidate(3, expandable = $$new_props.expandable);
		if ('batchExpansion' in $$new_props) $$invalidate(11, batchExpansion = $$new_props.batchExpansion);
		if ('expandedRowIds' in $$new_props) $$invalidate(1, expandedRowIds = $$new_props.expandedRowIds);
		if ('nonExpandableRowIds' in $$new_props) $$invalidate(12, nonExpandableRowIds = $$new_props.nonExpandableRowIds);
		if ('radio' in $$new_props) $$invalidate(13, radio = $$new_props.radio);
		if ('selectable' in $$new_props) $$invalidate(4, selectable = $$new_props.selectable);
		if ('batchSelection' in $$new_props) $$invalidate(14, batchSelection = $$new_props.batchSelection);
		if ('selectedRowIds' in $$new_props) $$invalidate(2, selectedRowIds = $$new_props.selectedRowIds);
		if ('stickyHeader' in $$new_props) $$invalidate(15, stickyHeader = $$new_props.stickyHeader);
		if ('useStaticWidth' in $$new_props) $$invalidate(16, useStaticWidth = $$new_props.useStaticWidth);
		if ('pageSize' in $$new_props) $$invalidate(35, pageSize = $$new_props.pageSize);
		if ('page' in $$new_props) $$invalidate(36, page = $$new_props.page);
		if ('$$scope' in $$new_props) $$invalidate(55, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*expandedRowIds*/ 2) {
			 $$invalidate(27, expandedRows = expandedRowIds.reduce((a, id) => ({ ...a, [id]: true }), {}));
		}

		if ($$self.$$.dirty[0] & /*headers*/ 32) {
			 $$invalidate(40, headerKeys = headers.map(({ key }) => key));
		}

		if ($$self.$$.dirty[0] & /*rows, headers*/ 33 | $$self.$$.dirty[1] & /*headerKeys*/ 512) {
			 $$invalidate(0, rows = rows.map(row => ({
				...row,
				cells: headerKeys.map((key, index) => ({
					key,
					value: resolvePath(row, key),
					display: headers[index].display
				}))
			})));
		}

		if ($$self.$$.dirty[0] & /*rows, selectedRowIds*/ 5) {
			 $$invalidate(26, selectAll = rows.length > 0 && selectedRowIds.length === rows.length);
		}

		if ($$self.$$.dirty[0] & /*selectedRowIds*/ 4) {
			 batchSelectedIds.set(selectedRowIds);
		}

		if ($$self.$$.dirty[0] & /*rows, nonExpandableRowIds*/ 4097) {
			 $$invalidate(18, expandableRowIds = rows.map(row => row.id).filter(id => !nonExpandableRowIds.includes(id)));
		}

		if ($$self.$$.dirty[0] & /*selectedRowIds, rows*/ 5) {
			 $$invalidate(25, indeterminate = selectedRowIds.length > 0 && selectedRowIds.length < rows.length);
		}

		if ($$self.$$.dirty[0] & /*batchExpansion, expandedRowIds, expandableRowIds*/ 264194) {
			 if (batchExpansion) {
				$$invalidate(3, expandable = true);
				$$invalidate(20, expanded = expandedRowIds.length === expandableRowIds.length);
			}
		}

		if ($$self.$$.dirty[0] & /*radio, batchSelection*/ 24576) {
			 if (radio || batchSelection) $$invalidate(4, selectable = true);
		}

		if ($$self.$$.dirty[0] & /*sortable*/ 1024) {
			 tableSortable.set(sortable);
		}

		if ($$self.$$.dirty[0] & /*rows*/ 1) {
			 $$invalidate(37, sortedRows = rows);
		}

		if ($$self.$$.dirty[0] & /*$sortHeader*/ 524288) {
			 $$invalidate(38, ascending = $sortHeader.sortDirection === "ascending");
		}

		if ($$self.$$.dirty[0] & /*$sortHeader*/ 524288) {
			 $$invalidate(39, sortKey = $sortHeader.key);
		}

		if ($$self.$$.dirty[0] & /*sortable*/ 1024 | $$self.$$.dirty[1] & /*sortKey*/ 256) {
			 $$invalidate(17, sorting = sortable && sortKey != null);
		}

		if ($$self.$$.dirty[0] & /*sorting, $sortHeader, rows*/ 655361 | $$self.$$.dirty[1] & /*ascending, sortKey*/ 384) {
			 if (sorting) {
				if ($sortHeader.sortDirection === "none") {
					$$invalidate(37, sortedRows = rows);
				} else {
					$$invalidate(37, sortedRows = [...rows].sort((a, b) => {
						const itemA = ascending
						? resolvePath(a, sortKey)
						: resolvePath(b, sortKey);

						const itemB = ascending
						? resolvePath(b, sortKey)
						: resolvePath(a, sortKey);

						if ($sortHeader.sort) return $sortHeader.sort(itemA, itemB);
						if (typeof itemA === "number" && typeof itemB === "number") return itemA - itemB;
						if ([itemA, itemB].every(item => !item && item !== 0)) return 0;
						if (!itemA && itemA !== 0) return ascending ? 1 : -1;
						if (!itemB && itemB !== 0) return ascending ? -1 : 1;
						return itemA.toString().localeCompare(itemB.toString(), "en", { numeric: true });
					}));
				}
			}
		}

		if ($$self.$$.dirty[0] & /*rows*/ 1 | $$self.$$.dirty[1] & /*page, pageSize*/ 48) {
			 $$invalidate(24, displayedRows = getDisplayedRows(rows, page, pageSize));
		}

		if ($$self.$$.dirty[1] & /*sortedRows, page, pageSize*/ 112) {
			 $$invalidate(23, displayedSortedRows = getDisplayedRows(sortedRows, page, pageSize));
		}
	};

	return [
		rows,
		expandedRowIds,
		selectedRowIds,
		expandable,
		selectable,
		headers,
		size,
		title,
		description,
		zebra,
		sortable,
		batchExpansion,
		nonExpandableRowIds,
		radio,
		batchSelection,
		stickyHeader,
		useStaticWidth,
		sorting,
		expandableRowIds,
		$sortHeader,
		expanded,
		parentRowId,
		refSelectAll,
		displayedSortedRows,
		displayedRows,
		indeterminate,
		selectAll,
		expandedRows,
		$thKeys,
		sortDirectionMap,
		dispatch,
		sortHeader,
		thKeys,
		$$restProps,
		$$slots,
		pageSize,
		page,
		sortedRows,
		ascending,
		sortKey,
		headerKeys,
		slots,
		click_handler,
		inlinecheckbox_ref_binding,
		change_handler,
		click_handler_1,
		click_handler_2,
		change_handler_1,
		change_handler_2,
		click_handler_3,
		click_handler_4,
		mouseenter_handler,
		mouseleave_handler,
		mouseenter_handler_1,
		mouseleave_handler_1,
		$$scope
	];
}

class DataTable extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$v,
			create_fragment$v,
			safe_not_equal,
			{
				headers: 5,
				rows: 0,
				size: 6,
				title: 7,
				description: 8,
				zebra: 9,
				sortable: 10,
				expandable: 3,
				batchExpansion: 11,
				expandedRowIds: 1,
				nonExpandableRowIds: 12,
				radio: 13,
				selectable: 4,
				batchSelection: 14,
				selectedRowIds: 2,
				stickyHeader: 15,
				useStaticWidth: 16,
				pageSize: 35,
				page: 36
			},
			null,
			[-1, -1, -1]
		);
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\DataTableSkeleton.svelte generated by Svelte v3.46.4 */

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_2$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

// (50:2) {#if showHeader}
function create_if_block_2$3(ctx) {
	let div2;
	let div0;
	let t;
	let div1;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			toggle_class(div0, "bx--data-table-header__title", true);
			toggle_class(div1, "bx--data-table-header__description", true);
			toggle_class(div2, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t);
			append(div2, div1);
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (56:2) {#if showToolbar}
function create_if_block_1$5(ctx) {
	let section;
	let div;
	let span;

	return {
		c() {
			section = element("section");
			div = element("div");
			span = element("span");
			toggle_class(span, "bx--skeleton", true);
			toggle_class(span, "bx--btn", true);
			toggle_class(span, "bx--btn--sm", true);
			toggle_class(div, "bx--toolbar-content", true);
			attr(section, "aria-label", "data table toolbar");
			toggle_class(section, "bx--table-toolbar", true);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div);
			append(div, span);
		},
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

// (83:10) {:else}
function create_else_block$7(ctx) {
	let th;
	let t_value = (/*values*/ ctx[6][/*col*/ ctx[17]] || "") + "";
	let t;

	return {
		c() {
			th = element("th");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, t);
		},
		p(ctx, dirty) {
			if (dirty & /*values, cols*/ 96 && t_value !== (t_value = (/*values*/ ctx[6][/*col*/ ctx[17]] || "") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (81:10) {#if typeof values[col] === "object" && values[col].empty === true}
function create_if_block$k(ctx) {
	let th;

	return {
		c() {
			th = element("th");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (80:8) {#each cols as col (col)}
function create_each_block_2$1(key_1, ctx) {
	let first;
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (typeof /*values*/ ctx[6][/*col*/ ctx[17]] === "object" && /*values*/ ctx[6][/*col*/ ctx[17]].empty === true) return create_if_block$k;
		return create_else_block$7;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(first);
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (92:10) {#each cols as col (col)}
function create_each_block_1$1(key_1, ctx) {
	let td;

	return {
		key: key_1,
		first: null,
		c() {
			td = element("td");
			td.innerHTML = `<span></span>`;
			this.first = td;
		},
		m(target, anchor) {
			insert(target, td, anchor);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(td);
		}
	};
}

// (90:6) {#each Array.from({ length: rows }, (_, i) => i) as row (row)}
function create_each_block$2(key_1, ctx) {
	let tr;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t;
	let each_value_1 = /*cols*/ ctx[5];
	const get_key = ctx => /*col*/ ctx[17];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1$1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$1(key));
	}

	return {
		key: key_1,
		first: null,
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			this.first = tr;
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(tr, t);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*cols*/ 32) {
				each_value_1 = /*cols*/ ctx[5];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 0, ctx, each_value_1, each_1_lookup, tr, destroy_block, create_each_block_1$1, t, get_each_context_1$1);
			}
		},
		d(detaching) {
			if (detaching) detach(tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function create_fragment$w(ctx) {
	let div;
	let t0;
	let t1;
	let table;
	let thead;
	let tr;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t2;
	let tbody;
	let each_blocks = [];
	let each1_lookup = new Map();
	let mounted;
	let dispose;
	let if_block0 = /*showHeader*/ ctx[3] && create_if_block_2$3();
	let if_block1 = /*showToolbar*/ ctx[4] && create_if_block_1$5();
	let each_value_2 = /*cols*/ ctx[5];
	const get_key = ctx => /*col*/ ctx[17];

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2$1(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_2$1(key, child_ctx));
	}

	let each_value = Array.from({ length: /*rows*/ ctx[0] }, func);
	const get_key_1 = ctx => /*row*/ ctx[14];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$2(ctx, each_value, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
	}

	let div_levels = [/*$$restProps*/ ctx[7]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			table = element("table");
			thead = element("thead");
			tr = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(table, "bx--skeleton", true);
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[1] === 'compact');
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[1] === 'short');
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[1] === 'tall');
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[2]);
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--data-table-container", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			append(div, table);
			append(table, thead);
			append(thead, tr);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr, null);
			}

			append(table, t2);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			if (!mounted) {
				dispose = [
					listen(table, "click", /*click_handler*/ ctx[10]),
					listen(table, "mouseover", /*mouseover_handler*/ ctx[11]),
					listen(table, "mouseenter", /*mouseenter_handler*/ ctx[12]),
					listen(table, "mouseleave", /*mouseleave_handler*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*showHeader*/ ctx[3]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_2$3();
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*showToolbar*/ ctx[4]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_1$5();
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*values, cols*/ 96) {
				each_value_2 = /*cols*/ ctx[5];
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_2, each0_lookup, tr, destroy_block, create_each_block_2$1, null, get_each_context_2$1);
			}

			if (dirty & /*cols, rows*/ 33) {
				each_value = Array.from({ length: /*rows*/ ctx[0] }, func);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value, each1_lookup, tbody, destroy_block, create_each_block$2, null, get_each_context$2);
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--compact", /*size*/ ctx[1] === 'compact');
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--short", /*size*/ ctx[1] === 'short');
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--tall", /*size*/ ctx[1] === 'tall');
			}

			if (dirty & /*zebra*/ 4) {
				toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[2]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--data-table-container", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func = (_, i) => i;

function instance$w($$self, $$props, $$invalidate) {
	let values;
	let cols;
	const omit_props_names = ["columns","rows","size","zebra","showHeader","headers","showToolbar"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { columns = 5 } = $$props;
	let { rows = 5 } = $$props;
	let { size = undefined } = $$props;
	let { zebra = false } = $$props;
	let { showHeader = true } = $$props;
	let { headers = [] } = $$props;
	let { showToolbar = true } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('columns' in $$new_props) $$invalidate(8, columns = $$new_props.columns);
		if ('rows' in $$new_props) $$invalidate(0, rows = $$new_props.rows);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('zebra' in $$new_props) $$invalidate(2, zebra = $$new_props.zebra);
		if ('showHeader' in $$new_props) $$invalidate(3, showHeader = $$new_props.showHeader);
		if ('headers' in $$new_props) $$invalidate(9, headers = $$new_props.headers);
		if ('showToolbar' in $$new_props) $$invalidate(4, showToolbar = $$new_props.showToolbar);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*headers*/ 512) {
			 $$invalidate(6, values = headers.map(header => header.value !== undefined ? header.value : header));
		}

		if ($$self.$$.dirty & /*headers, columns*/ 768) {
			 $$invalidate(5, cols = Array.from(
				{
					length: headers.length > 0 ? headers.length : columns
				},
				(_, i) => i
			));
		}
	};

	return [
		rows,
		size,
		zebra,
		showHeader,
		showToolbar,
		cols,
		values,
		$$restProps,
		columns,
		headers,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class DataTableSkeleton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$w, create_fragment$w, safe_not_equal, {
			columns: 8,
			rows: 0,
			size: 1,
			zebra: 2,
			showHeader: 3,
			headers: 9,
			showToolbar: 4
		});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\Toolbar.svelte generated by Svelte v3.46.4 */

function create_fragment$x(ctx) {
	let section;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let section_levels = [{ "aria-label": "data table toolbar" }, /*$$restProps*/ ctx[2]];
	let section_data = {};

	for (let i = 0; i < section_levels.length; i += 1) {
		section_data = assign(section_data, section_levels[i]);
	}

	return {
		c() {
			section = element("section");
			if (default_slot) default_slot.c();
			set_attributes(section, section_data);
			toggle_class(section, "bx--table-toolbar", true);
			toggle_class(section, "bx--table-toolbar--small", /*size*/ ctx[0] === 'sm');
			toggle_class(section, "bx--table-toolbar--normal", /*size*/ ctx[0] === 'default');
		},
		m(target, anchor) {
			insert(target, section, anchor);

			if (default_slot) {
				default_slot.m(section, null);
			}

			/*section_binding*/ ctx[5](section);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(section, section_data = get_spread_update(section_levels, [
				{ "aria-label": "data table toolbar" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(section, "bx--table-toolbar", true);
			toggle_class(section, "bx--table-toolbar--small", /*size*/ ctx[0] === 'sm');
			toggle_class(section, "bx--table-toolbar--normal", /*size*/ ctx[0] === 'default');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (default_slot) default_slot.d(detaching);
			/*section_binding*/ ctx[5](null);
		}
	};
}

function instance$x($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = "default" } = $$props;
	let ref = null;
	const overflowVisible = writable(false);

	setContext("Toolbar", {
		overflowVisible,
		setOverflowVisible: visible => {
			overflowVisible.set(visible);
			if (ref) $$invalidate(1, ref.style.overflow = visible ? "visible" : "inherit", ref);
		}
	});

	function section_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [size, ref, $$restProps, $$scope, slots, section_binding];
}

class Toolbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$x, create_fragment$x, safe_not_equal, { size: 0 });
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\ToolbarContent.svelte generated by Svelte v3.46.4 */

function create_fragment$y(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--toolbar-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$y($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class ToolbarContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\icons\Search16.svelte generated by Svelte v3.46.4 */

function create_if_block$l(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$d(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$l(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$l(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$z(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$d(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Search16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M15,14.3L10.7,10c1.9-2.3,1.6-5.8-0.7-7.7S4.2,0.7,2.3,3S0.7,8.8,3,10.7c2,1.7,5,1.7,7,0l4.3,4.3L15,14.3z M2,6.5\tC2,4,4,2,6.5,2S11,4,11,6.5S9,11,6.5,11S2,9,2,6.5z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Search16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$z($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Search16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$z, create_fragment$z, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\Search\SearchSkeleton.svelte generated by Svelte v3.46.4 */

function create_fragment$A(ctx) {
	let div1;
	let span;
	let t;
	let div0;
	let mounted;
	let dispose;
	let div1_levels = [/*$$restProps*/ ctx[2]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t = space();
			div0 = element("div");
			toggle_class(span, "bx--label", true);
			toggle_class(div0, "bx--search-input", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--search--sm", /*size*/ ctx[1] === 'sm' || /*small*/ ctx[0]);
			toggle_class(div1, "bx--search--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div1, "bx--search--xl", /*size*/ ctx[1] === 'xl');
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[3]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--search--sm", /*size*/ ctx[1] === 'sm' || /*small*/ ctx[0]);
			toggle_class(div1, "bx--search--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div1, "bx--search--xl", /*size*/ ctx[1] === 'xl');
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$A($$self, $$props, $$invalidate) {
	const omit_props_names = ["small","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { small = false } = $$props;
	let { size = "xl" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('small' in $$new_props) $$invalidate(0, small = $$new_props.small);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
	};

	return [
		small,
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SearchSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$A, create_fragment$A, safe_not_equal, { small: 0, size: 1 });
	}
}

/* node_modules\carbon-components-svelte\src\Search\Search.svelte generated by Svelte v3.46.4 */
const get_labelText_slot_changes$2 = dirty => ({});
const get_labelText_slot_context$2 = ctx => ({});

// (97:0) {:else}
function create_else_block$8(ctx) {
	let div1;
	let div0;
	let switch_instance0;
	let t0;
	let label;
	let label_id_value;
	let t1;
	let input;
	let input_autofocus_value;
	let t2;
	let button;
	let switch_instance1;
	let div1_aria_labelledby_value;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*icon*/ ctx[16];

	function switch_props(ctx) {
		return {
			props: { class: "bx--search-magnifier-icon" }
		};
	}

	if (switch_value) {
		switch_instance0 = new switch_value(switch_props());
	}

	const labelText_slot_template = /*#slots*/ ctx[22].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[21], get_labelText_slot_context$2);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$e(ctx);

	let input_levels = [
		{ role: "searchbox" },
		{
			autofocus: input_autofocus_value = /*autofocus*/ ctx[13] === true ? true : undefined
		},
		{ autocomplete: /*autocomplete*/ ctx[12] },
		{ disabled: /*disabled*/ ctx[8] },
		{ id: /*id*/ ctx[17] },
		{ placeholder: /*placeholder*/ ctx[11] },
		{ type: /*type*/ ctx[10] },
		{ value: /*value*/ ctx[2] },
		/*$$restProps*/ ctx[20]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	var switch_value_1 = /*size*/ ctx[4] === 'xl' ? Close20 : Close16;

	function switch_props_1(ctx) {
		return {};
	}

	if (switch_value_1) {
		switch_instance1 = new switch_value_1(switch_props_1());
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (switch_instance0) create_component(switch_instance0.$$.fragment);
			t0 = space();
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t1 = space();
			input = element("input");
			t2 = space();
			button = element("button");
			if (switch_instance1) create_component(switch_instance1.$$.fragment);
			toggle_class(div0, "bx--search-magnifier", true);
			attr(label, "id", label_id_value = "" + (/*id*/ ctx[17] + "-search"));
			attr(label, "for", /*id*/ ctx[17]);
			toggle_class(label, "bx--label", true);
			set_attributes(input, input_data);
			toggle_class(input, "bx--search-input", true);
			attr(button, "type", "button");
			attr(button, "aria-label", /*closeButtonLabelText*/ ctx[14]);
			button.disabled = /*disabled*/ ctx[8];
			toggle_class(button, "bx--search-close", true);
			toggle_class(button, "bx--search-close--hidden", /*value*/ ctx[2] === '');
			attr(div1, "role", "search");
			attr(div1, "aria-labelledby", div1_aria_labelledby_value = "" + (/*id*/ ctx[17] + "-search"));
			attr(div1, "class", /*searchClass*/ ctx[5]);
			toggle_class(div1, "bx--search", true);
			toggle_class(div1, "bx--search--light", /*light*/ ctx[7]);
			toggle_class(div1, "bx--search--disabled", /*disabled*/ ctx[8]);
			toggle_class(div1, "bx--search--sm", /*size*/ ctx[4] === 'sm' || /*small*/ ctx[3]);
			toggle_class(div1, "bx--search--lg", /*size*/ ctx[4] === 'lg');
			toggle_class(div1, "bx--search--xl", /*size*/ ctx[4] === 'xl');
			toggle_class(div1, "bx--search--expandable", /*expandable*/ ctx[9]);
			toggle_class(div1, "bx--search--expanded", /*expanded*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (switch_instance0) {
				mount_component(switch_instance0, div0, null);
			}

			/*div0_binding*/ ctx[34](div0);
			append(div1, t0);
			append(div1, label);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			append(div1, t1);
			append(div1, input);
			input.value = input_data.value;
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[36](input);
			append(div1, t2);
			append(div1, button);

			if (switch_instance1) {
				mount_component(switch_instance1, button, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler_2*/ ctx[35]),
					listen(input, "change", /*change_handler*/ ctx[24]),
					listen(input, "input", /*input_handler*/ ctx[25]),
					listen(input, "input", /*input_handler_1*/ ctx[37]),
					listen(input, "focus", /*focus_handler*/ ctx[26]),
					listen(input, "focus", /*focus_handler_1*/ ctx[38]),
					listen(input, "blur", /*blur_handler*/ ctx[27]),
					listen(input, "blur", /*blur_handler_1*/ ctx[39]),
					listen(input, "keydown", /*keydown_handler*/ ctx[28]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[40]),
					listen(input, "keyup", /*keyup_handler*/ ctx[29]),
					listen(button, "click", /*click_handler_1*/ ctx[23]),
					listen(button, "click", /*click_handler_3*/ ctx[41])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[16])) {
				if (switch_instance0) {
					group_outros();
					const old_component = switch_instance0;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance0 = new switch_value(switch_props());
					create_component(switch_instance0.$$.fragment);
					transition_in(switch_instance0.$$.fragment, 1);
					mount_component(switch_instance0, div0, null);
				} else {
					switch_instance0 = null;
				}
			}

			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 2097152)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[21],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[21], dirty, get_labelText_slot_changes$2),
						get_labelText_slot_context$2
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 32768)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 131072 && label_id_value !== (label_id_value = "" + (/*id*/ ctx[17] + "-search"))) {
				attr(label, "id", label_id_value);
			}

			if (!current || dirty[0] & /*id*/ 131072) {
				attr(label, "for", /*id*/ ctx[17]);
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ role: "searchbox" },
				(!current || dirty[0] & /*autofocus*/ 8192 && input_autofocus_value !== (input_autofocus_value = /*autofocus*/ ctx[13] === true ? true : undefined)) && { autofocus: input_autofocus_value },
				(!current || dirty[0] & /*autocomplete*/ 4096) && { autocomplete: /*autocomplete*/ ctx[12] },
				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] },
				(!current || dirty[0] & /*id*/ 131072) && { id: /*id*/ ctx[17] },
				(!current || dirty[0] & /*placeholder*/ 2048) && { placeholder: /*placeholder*/ ctx[11] },
				(!current || dirty[0] & /*type*/ 1024) && { type: /*type*/ ctx[10] },
				(!current || dirty[0] & /*value*/ 4 && input.value !== /*value*/ ctx[2]) && { value: /*value*/ ctx[2] },
				dirty[0] & /*$$restProps*/ 1048576 && /*$$restProps*/ ctx[20]
			]));

			if ('value' in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--search-input", true);

			if (switch_value_1 !== (switch_value_1 = /*size*/ ctx[4] === 'xl' ? Close20 : Close16)) {
				if (switch_instance1) {
					group_outros();
					const old_component = switch_instance1;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value_1) {
					switch_instance1 = new switch_value_1(switch_props_1());
					create_component(switch_instance1.$$.fragment);
					transition_in(switch_instance1.$$.fragment, 1);
					mount_component(switch_instance1, button, null);
				} else {
					switch_instance1 = null;
				}
			}

			if (!current || dirty[0] & /*closeButtonLabelText*/ 16384) {
				attr(button, "aria-label", /*closeButtonLabelText*/ ctx[14]);
			}

			if (!current || dirty[0] & /*disabled*/ 256) {
				button.disabled = /*disabled*/ ctx[8];
			}

			if (dirty[0] & /*value*/ 4) {
				toggle_class(button, "bx--search-close--hidden", /*value*/ ctx[2] === '');
			}

			if (!current || dirty[0] & /*id*/ 131072 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = "" + (/*id*/ ctx[17] + "-search"))) {
				attr(div1, "aria-labelledby", div1_aria_labelledby_value);
			}

			if (!current || dirty[0] & /*searchClass*/ 32) {
				attr(div1, "class", /*searchClass*/ ctx[5]);
			}

			if (dirty[0] & /*searchClass*/ 32) {
				toggle_class(div1, "bx--search", true);
			}

			if (dirty[0] & /*searchClass, light*/ 160) {
				toggle_class(div1, "bx--search--light", /*light*/ ctx[7]);
			}

			if (dirty[0] & /*searchClass, disabled*/ 288) {
				toggle_class(div1, "bx--search--disabled", /*disabled*/ ctx[8]);
			}

			if (dirty[0] & /*searchClass, size, small*/ 56) {
				toggle_class(div1, "bx--search--sm", /*size*/ ctx[4] === 'sm' || /*small*/ ctx[3]);
			}

			if (dirty[0] & /*searchClass, size*/ 48) {
				toggle_class(div1, "bx--search--lg", /*size*/ ctx[4] === 'lg');
			}

			if (dirty[0] & /*searchClass, size*/ 48) {
				toggle_class(div1, "bx--search--xl", /*size*/ ctx[4] === 'xl');
			}

			if (dirty[0] & /*searchClass, expandable*/ 544) {
				toggle_class(div1, "bx--search--expandable", /*expandable*/ ctx[9]);
			}

			if (dirty[0] & /*searchClass, expanded*/ 33) {
				toggle_class(div1, "bx--search--expanded", /*expanded*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance0) transition_in(switch_instance0.$$.fragment, local);
			transition_in(labelText_slot_or_fallback, local);
			if (switch_instance1) transition_in(switch_instance1.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance0) transition_out(switch_instance0.$$.fragment, local);
			transition_out(labelText_slot_or_fallback, local);
			if (switch_instance1) transition_out(switch_instance1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (switch_instance0) destroy_component(switch_instance0);
			/*div0_binding*/ ctx[34](null);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			/*input_binding*/ ctx[36](null);
			if (switch_instance1) destroy_component(switch_instance1);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (87:0) {#if skeleton}
function create_if_block$m(ctx) {
	let searchskeleton;
	let current;

	const searchskeleton_spread_levels = [
		{ small: /*small*/ ctx[3] },
		{ size: /*size*/ ctx[4] },
		/*$$restProps*/ ctx[20]
	];

	let searchskeleton_props = {};

	for (let i = 0; i < searchskeleton_spread_levels.length; i += 1) {
		searchskeleton_props = assign(searchskeleton_props, searchskeleton_spread_levels[i]);
	}

	searchskeleton = new SearchSkeleton({ props: searchskeleton_props });
	searchskeleton.$on("click", /*click_handler*/ ctx[30]);
	searchskeleton.$on("mouseover", /*mouseover_handler*/ ctx[31]);
	searchskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[32]);
	searchskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[33]);

	return {
		c() {
			create_component(searchskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(searchskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const searchskeleton_changes = (dirty[0] & /*small, size, $$restProps*/ 1048600)
			? get_spread_update(searchskeleton_spread_levels, [
					dirty[0] & /*small*/ 8 && { small: /*small*/ ctx[3] },
					dirty[0] & /*size*/ 16 && { size: /*size*/ ctx[4] },
					dirty[0] & /*$$restProps*/ 1048576 && get_spread_object(/*$$restProps*/ ctx[20])
				])
			: {};

			searchskeleton.$set(searchskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(searchskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(searchskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(searchskeleton, detaching);
		}
	};
}

// (121:29)          
function fallback_block$e(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[15]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 32768) set_data(t, /*labelText*/ ctx[15]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$B(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$m, create_else_block$8];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$B($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"small","size","searchClass","skeleton","light","disabled","expandable","expanded","value","type","placeholder","autocomplete","autofocus","closeButtonLabelText","labelText","icon","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { small = false } = $$props;
	let { size = "xl" } = $$props;
	let { searchClass = "" } = $$props;
	let { skeleton = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { expandable = false } = $$props;
	let { expanded = false } = $$props;
	let { value = "" } = $$props;
	let { type = "text" } = $$props;
	let { placeholder = "Search..." } = $$props;
	let { autocomplete = "off" } = $$props;
	let { autofocus = false } = $$props;
	let { closeButtonLabelText = "Clear search input" } = $$props;
	let { labelText = "" } = $$props;
	let { icon = Search16 } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let searchRef = null;

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			searchRef = $$value;
			$$invalidate(18, searchRef);
		});
	}

	const click_handler_2 = () => {
		if (expandable) $$invalidate(0, expanded = true);
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(2, value = target.value);
	};

	const focus_handler_1 = () => {
		if (expandable) $$invalidate(0, expanded = true);
	};

	const blur_handler_1 = () => {
		if (expanded && value.trim().length === 0) {
			$$invalidate(0, expanded = false);
		}
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'Escape') {
			$$invalidate(2, value = '');
			dispatch('clear');
		}
	};

	const click_handler_3 = () => {
		$$invalidate(2, value = '');
		ref.focus();
		dispatch('clear');
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('small' in $$new_props) $$invalidate(3, small = $$new_props.small);
		if ('size' in $$new_props) $$invalidate(4, size = $$new_props.size);
		if ('searchClass' in $$new_props) $$invalidate(5, searchClass = $$new_props.searchClass);
		if ('skeleton' in $$new_props) $$invalidate(6, skeleton = $$new_props.skeleton);
		if ('light' in $$new_props) $$invalidate(7, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ('expandable' in $$new_props) $$invalidate(9, expandable = $$new_props.expandable);
		if ('expanded' in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ('value' in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ('type' in $$new_props) $$invalidate(10, type = $$new_props.type);
		if ('placeholder' in $$new_props) $$invalidate(11, placeholder = $$new_props.placeholder);
		if ('autocomplete' in $$new_props) $$invalidate(12, autocomplete = $$new_props.autocomplete);
		if ('autofocus' in $$new_props) $$invalidate(13, autofocus = $$new_props.autofocus);
		if ('closeButtonLabelText' in $$new_props) $$invalidate(14, closeButtonLabelText = $$new_props.closeButtonLabelText);
		if ('labelText' in $$new_props) $$invalidate(15, labelText = $$new_props.labelText);
		if ('icon' in $$new_props) $$invalidate(16, icon = $$new_props.icon);
		if ('id' in $$new_props) $$invalidate(17, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*expanded, ref*/ 3) {
			 if (expanded && ref) ref.focus();
		}

		if ($$self.$$.dirty[0] & /*expanded*/ 1) {
			 dispatch(expanded ? "expand" : "collapse");
		}
	};

	return [
		expanded,
		ref,
		value,
		small,
		size,
		searchClass,
		skeleton,
		light,
		disabled,
		expandable,
		type,
		placeholder,
		autocomplete,
		autofocus,
		closeButtonLabelText,
		labelText,
		icon,
		id,
		searchRef,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler_1,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		keydown_handler,
		keyup_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		div0_binding,
		click_handler_2,
		input_binding,
		input_handler_1,
		focus_handler_1,
		blur_handler_1,
		keydown_handler_1,
		click_handler_3
	];
}

class Search extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$B,
			create_fragment$B,
			safe_not_equal,
			{
				small: 3,
				size: 4,
				searchClass: 5,
				skeleton: 6,
				light: 7,
				disabled: 8,
				expandable: 9,
				expanded: 0,
				value: 2,
				type: 10,
				placeholder: 11,
				autocomplete: 12,
				autofocus: 13,
				closeButtonLabelText: 14,
				labelText: 15,
				icon: 16,
				id: 17,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\ToolbarSearch.svelte generated by Svelte v3.46.4 */

function create_fragment$C(ctx) {
	let search;
	let updating_ref;
	let updating_value;
	let current;

	const search_spread_levels = [
		{ tabindex: /*tabindex*/ ctx[5] },
		{ disabled: /*disabled*/ ctx[4] },
		/*$$restProps*/ ctx[8],
		{
			searchClass: "" + (/*classes*/ ctx[6] + " " + /*$$restProps*/ ctx[8].class)
		}
	];

	function search_ref_binding(value) {
		/*search_ref_binding*/ ctx[9](value);
	}

	function search_value_binding(value) {
		/*search_value_binding*/ ctx[10](value);
	}

	let search_props = {};

	for (let i = 0; i < search_spread_levels.length; i += 1) {
		search_props = assign(search_props, search_spread_levels[i]);
	}

	if (/*ref*/ ctx[2] !== void 0) {
		search_props.ref = /*ref*/ ctx[2];
	}

	if (/*value*/ ctx[0] !== void 0) {
		search_props.value = /*value*/ ctx[0];
	}

	search = new Search({ props: search_props });
	binding_callbacks.push(() => bind(search, 'ref', search_ref_binding));
	binding_callbacks.push(() => bind(search, 'value', search_value_binding));
	search.$on("clear", /*clear_handler*/ ctx[11]);
	search.$on("change", /*change_handler*/ ctx[12]);
	search.$on("input", /*input_handler*/ ctx[13]);
	search.$on("focus", /*focus_handler*/ ctx[14]);
	search.$on("focus", /*expandSearch*/ ctx[7]);
	search.$on("blur", /*blur_handler*/ ctx[15]);
	search.$on("blur", /*blur_handler_1*/ ctx[16]);

	return {
		c() {
			create_component(search.$$.fragment);
		},
		m(target, anchor) {
			mount_component(search, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const search_changes = (dirty & /*tabindex, disabled, $$restProps, classes*/ 368)
			? get_spread_update(search_spread_levels, [
					dirty & /*tabindex*/ 32 && { tabindex: /*tabindex*/ ctx[5] },
					dirty & /*disabled*/ 16 && { disabled: /*disabled*/ ctx[4] },
					dirty & /*$$restProps*/ 256 && get_spread_object(/*$$restProps*/ ctx[8]),
					dirty & /*classes, $$restProps*/ 320 && {
						searchClass: "" + (/*classes*/ ctx[6] + " " + /*$$restProps*/ ctx[8].class)
					}
				])
			: {};

			if (!updating_ref && dirty & /*ref*/ 4) {
				updating_ref = true;
				search_changes.ref = /*ref*/ ctx[2];
				add_flush_callback(() => updating_ref = false);
			}

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				search_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			search.$set(search_changes);
		},
		i(local) {
			if (current) return;
			transition_in(search.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(search.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(search, detaching);
		}
	};
}

function instance$C($$self, $$props, $$invalidate) {
	let classes;
	const omit_props_names = ["value","expanded","persistent","disabled","tabindex","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { value = "" } = $$props;
	let { expanded = false } = $$props;
	let { persistent = false } = $$props;
	let { disabled = false } = $$props;
	let { tabindex = "0" } = $$props;
	let { ref = null } = $$props;

	async function expandSearch() {
		if (disabled || persistent || expanded) return;
		$$invalidate(1, expanded = true);
		await tick();
		ref.focus();
	}

	function search_ref_binding(value) {
		ref = value;
		$$invalidate(2, ref);
	}

	function search_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	function clear_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	const blur_handler_1 = () => {
		$$invalidate(1, expanded = !persistent && !!value.length);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('expanded' in $$new_props) $$invalidate(1, expanded = $$new_props.expanded);
		if ('persistent' in $$new_props) $$invalidate(3, persistent = $$new_props.persistent);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('ref' in $$new_props) $$invalidate(2, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			 $$invalidate(1, expanded = !!value.length);
		}

		if ($$self.$$.dirty & /*expanded, persistent, disabled*/ 26) {
			 $$invalidate(6, classes = [
				expanded && "bx--toolbar-search-container-active",
				persistent
				? "bx--toolbar-search-container-persistent"
				: "bx--toolbar-search-container-expandable",
				disabled && "bx--toolbar-search-container-disabled"
			].filter(Boolean).join(" "));
		}
	};

	return [
		value,
		expanded,
		ref,
		persistent,
		disabled,
		tabindex,
		classes,
		expandSearch,
		$$restProps,
		search_ref_binding,
		search_value_binding,
		clear_handler,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		blur_handler_1
	];
}

class ToolbarSearch extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$C, create_fragment$C, safe_not_equal, {
			value: 0,
			expanded: 1,
			persistent: 3,
			disabled: 4,
			tabindex: 5,
			ref: 2
		});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\ToolbarBatchActions.svelte generated by Svelte v3.46.4 */
const get_cancel_slot_changes = dirty => ({});
const get_cancel_slot_context = ctx => ({});

// (36:0) {#if !overflowVisible}
function create_if_block$n(ctx) {
	let div2;
	let div0;
	let p;
	let span;
	let t0_value = /*formatTotalSelected*/ ctx[0](/*batchSelectedIds*/ ctx[1].length) + "";
	let t0;
	let t1;
	let div1;
	let t2;
	let button;
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	button = new Button({
			props: {
				class: "bx--batch-summary__cancel",
				tabindex: /*showActions*/ ctx[3] ? '0' : '-1',
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*ctx*/ ctx[4].resetSelectedRowIds);
	let div2_levels = [/*$$restProps*/ ctx[5]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			p = element("p");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t2 = space();
			create_component(button.$$.fragment);
			toggle_class(p, "bx--batch-summary__para", true);
			toggle_class(div0, "bx--batch-summary", true);
			toggle_class(div1, "bx--action-list", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--batch-actions", true);
			toggle_class(div2, "bx--batch-actions--active", /*showActions*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, p);
			append(p, span);
			append(span, t0);
			append(div2, t1);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div1, t2);
			mount_component(button, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*formatTotalSelected, batchSelectedIds*/ 3) && t0_value !== (t0_value = /*formatTotalSelected*/ ctx[0](/*batchSelectedIds*/ ctx[1].length) + "")) set_data(t0, t0_value);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			const button_changes = {};
			if (dirty & /*showActions*/ 8) button_changes.tabindex = /*showActions*/ ctx[3] ? '0' : '-1';

			if (dirty & /*$$scope*/ 128) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]]));
			toggle_class(div2, "bx--batch-actions", true);
			toggle_class(div2, "bx--batch-actions--active", /*showActions*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (default_slot) default_slot.d(detaching);
			destroy_component(button);
		}
	};
}

// (54:28) Cancel
function fallback_block$f(ctx) {
	let t;

	return {
		c() {
			t = text("Cancel");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (49:6) <Button         class="bx--batch-summary__cancel"         tabindex="{showActions ? '0' : '-1'}"         on:click="{ctx.resetSelectedRowIds}"       >
function create_default_slot$2(ctx) {
	let current;
	const cancel_slot_template = /*#slots*/ ctx[6].cancel;
	const cancel_slot = create_slot(cancel_slot_template, ctx, /*$$scope*/ ctx[7], get_cancel_slot_context);
	const cancel_slot_or_fallback = cancel_slot || fallback_block$f();

	return {
		c() {
			if (cancel_slot_or_fallback) cancel_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (cancel_slot_or_fallback) {
				cancel_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (cancel_slot) {
				if (cancel_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						cancel_slot,
						cancel_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(cancel_slot_template, /*$$scope*/ ctx[7], dirty, get_cancel_slot_changes),
						get_cancel_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cancel_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cancel_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cancel_slot_or_fallback) cancel_slot_or_fallback.d(detaching);
		}
	};
}

function create_fragment$D(ctx) {
	let if_block_anchor;
	let current;
	let if_block = !/*overflowVisible*/ ctx[2] && create_if_block$n(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*overflowVisible*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*overflowVisible*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$n(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$D($$self, $$props, $$invalidate) {
	let showActions;
	const omit_props_names = ["formatTotalSelected"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { formatTotalSelected = totalSelected => `${totalSelected} item${totalSelected === 1 ? "" : "s"} selected` } = $$props;
	let batchSelectedIds = [];
	const ctx = getContext("DataTable");

	const unsubscribe = ctx.batchSelectedIds.subscribe(value => {
		$$invalidate(1, batchSelectedIds = value);
	});

	let overflowVisible = false;
	const ctxToolbar = getContext("Toolbar");

	const unsubscribeOverflow = ctxToolbar.overflowVisible.subscribe(value => {
		$$invalidate(2, overflowVisible = value);
	});

	onMount(() => {
		return () => {
			unsubscribe();
			unsubscribeOverflow();
		};
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('formatTotalSelected' in $$new_props) $$invalidate(0, formatTotalSelected = $$new_props.formatTotalSelected);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*batchSelectedIds*/ 2) {
			 $$invalidate(3, showActions = batchSelectedIds.length > 0);
		}
	};

	return [
		formatTotalSelected,
		batchSelectedIds,
		overflowVisible,
		showActions,
		ctx,
		$$restProps,
		slots,
		$$scope
	];
}

class ToolbarBatchActions extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$D, create_fragment$D, safe_not_equal, { formatTotalSelected: 0 });
	}
}

/* node_modules\carbon-components-svelte\src\icons\Settings16.svelte generated by Svelte v3.46.4 */

function create_if_block$o(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (48:8)      
function fallback_block$g(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$o(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$o(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$E(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$g(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Settings16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M13.5,8.4c0-0.1,0-0.3,0-0.4c0-0.1,0-0.3,0-0.4l1-0.8c0.4-0.3,0.4-0.9,0.2-1.3l-1.2-2C13.3,3.2,13,3,12.6,3\tc-0.1,0-0.2,0-0.3,0.1l-1.2,0.4c-0.2-0.1-0.4-0.3-0.7-0.4l-0.3-1.3C10.1,1.3,9.7,1,9.2,1H6.8c-0.5,0-0.9,0.3-1,0.8L5.6,3.1\tC5.3,3.2,5.1,3.3,4.9,3.4L3.7,3C3.6,3,3.5,3,3.4,3C3,3,2.7,3.2,2.5,3.5l-1.2,2C1.1,5.9,1.2,6.4,1.6,6.8l0.9,0.9c0,0.1,0,0.3,0,0.4\tc0,0.1,0,0.3,0,0.4L1.6,9.2c-0.4,0.3-0.5,0.9-0.2,1.3l1.2,2C2.7,12.8,3,13,3.4,13c0.1,0,0.2,0,0.3-0.1l1.2-0.4\tc0.2,0.1,0.4,0.3,0.7,0.4l0.3,1.3c0.1,0.5,0.5,0.8,1,0.8h2.4c0.5,0,0.9-0.3,1-0.8l0.3-1.3c0.2-0.1,0.4-0.2,0.7-0.4l1.2,0.4\tc0.1,0,0.2,0.1,0.3,0.1c0.4,0,0.7-0.2,0.9-0.5l1.1-2c0.2-0.4,0.2-0.9-0.2-1.3L13.5,8.4z M12.6,12l-1.7-0.6c-0.4,0.3-0.9,0.6-1.4,0.8\tL9.2,14H6.8l-0.4-1.8c-0.5-0.2-0.9-0.5-1.4-0.8L3.4,12l-1.2-2l1.4-1.2c-0.1-0.5-0.1-1.1,0-1.6L2.2,6l1.2-2l1.7,0.6\tC5.5,4.2,6,4,6.5,3.8L6.8,2h2.4l0.4,1.8c0.5,0.2,0.9,0.5,1.4,0.8L12.6,4l1.2,2l-1.4,1.2c0.1,0.5,0.1,1.1,0,1.6l1.4,1.2L12.6,12z");
			attr(path1, "d", "M8,11c-1.7,0-3-1.3-3-3s1.3-3,3-3s3,1.3,3,3C11,9.6,9.7,11,8,11C8,11,8,11,8,11z M8,6C6.9,6,6,6.8,6,7.9C6,7.9,6,8,6,8\tc0,1.1,0.8,2,1.9,2c0,0,0.1,0,0.1,0c1.1,0,2-0.8,2-1.9c0,0,0-0.1,0-0.1C10,6.9,9.2,6,8,6C8.1,6,8,6,8,6z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Settings16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$E($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Settings16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$E, create_fragment$E, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\OverflowMenuVertical16.svelte generated by Svelte v3.46.4 */

function create_if_block$p(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (45:8)      
function fallback_block$h(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$p(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$p(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$F(ctx) {
	let svg;
	let circle0;
	let circle1;
	let circle2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$h(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "OverflowMenuVertical16"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(circle0, "cx", "16");
			attr(circle0, "cy", "8");
			attr(circle0, "r", "2");
			attr(circle1, "cx", "16");
			attr(circle1, "cy", "16");
			attr(circle1, "r", "2");
			attr(circle2, "cx", "16");
			attr(circle2, "cy", "24");
			attr(circle2, "r", "2");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, circle0);
			append(svg, circle1);
			append(svg, circle2);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "OverflowMenuVertical16"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$F($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class OverflowMenuVertical16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$F, create_fragment$F, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\OverflowMenuHorizontal16.svelte generated by Svelte v3.46.4 */

function create_if_block$q(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (45:8)      
function fallback_block$i(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$q(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$q(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$G(ctx) {
	let svg;
	let circle0;
	let circle1;
	let circle2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$i(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "OverflowMenuHorizontal16"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(circle0, "cx", "8");
			attr(circle0, "cy", "16");
			attr(circle0, "r", "2");
			attr(circle1, "cx", "16");
			attr(circle1, "cy", "16");
			attr(circle1, "r", "2");
			attr(circle2, "cx", "24");
			attr(circle2, "cy", "16");
			attr(circle2, "r", "2");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, circle0);
			append(svg, circle1);
			append(svg, circle2);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "OverflowMenuHorizontal16"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$G($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class OverflowMenuHorizontal16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$G, create_fragment$G, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\OverflowMenu\OverflowMenu.svelte generated by Svelte v3.46.4 */
const get_menu_slot_changes = dirty => ({});
const get_menu_slot_context = ctx => ({});

// (232:20)      
function fallback_block$j(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: {
				"aria-label": /*iconDescription*/ ctx[10],
				title: /*iconDescription*/ ctx[10],
				class: "bx--overflow-menu__icon " + /*iconClass*/ ctx[9]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 1024) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[10];
			if (dirty[0] & /*iconDescription*/ 1024) switch_instance_changes.title = /*iconDescription*/ ctx[10];
			if (dirty[0] & /*iconClass*/ 512) switch_instance_changes.class = "bx--overflow-menu__icon " + /*iconClass*/ ctx[9];

			if (switch_value !== (switch_value = /*icon*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (240:2) {#if open}
function create_if_block$r(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[23].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			attr(ul, "role", "menu");
			attr(ul, "tabindex", "-1");
			attr(ul, "aria-label", /*ariaLabel*/ ctx[13]);
			attr(ul, "data-floating-menu-direction", /*direction*/ ctx[5]);
			attr(ul, "class", /*menuOptionsClass*/ ctx[8]);
			toggle_class(ul, "bx--overflow-menu-options", true);
			toggle_class(ul, "bx--overflow-menu--flip", /*flipped*/ ctx[7]);
			toggle_class(ul, "bx--overflow-menu-options--open", /*open*/ ctx[0]);
			toggle_class(ul, "bx--overflow-menu-options--light", /*light*/ ctx[6]);
			toggle_class(ul, "bx--overflow-menu-options--sm", /*size*/ ctx[4] === 'sm');
			toggle_class(ul, "bx--overflow-menu-options--xl", /*size*/ ctx[4] === 'xl');
			toggle_class(ul, "bx--breadcrumb-menu-options", !!/*ctxBreadcrumbItem*/ ctx[14]);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[30](ul);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[22],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*ariaLabel*/ 8192) {
				attr(ul, "aria-label", /*ariaLabel*/ ctx[13]);
			}

			if (!current || dirty[0] & /*direction*/ 32) {
				attr(ul, "data-floating-menu-direction", /*direction*/ ctx[5]);
			}

			if (!current || dirty[0] & /*menuOptionsClass*/ 256) {
				attr(ul, "class", /*menuOptionsClass*/ ctx[8]);
			}

			if (dirty[0] & /*menuOptionsClass*/ 256) {
				toggle_class(ul, "bx--overflow-menu-options", true);
			}

			if (dirty[0] & /*menuOptionsClass, flipped*/ 384) {
				toggle_class(ul, "bx--overflow-menu--flip", /*flipped*/ ctx[7]);
			}

			if (dirty[0] & /*menuOptionsClass, open*/ 257) {
				toggle_class(ul, "bx--overflow-menu-options--open", /*open*/ ctx[0]);
			}

			if (dirty[0] & /*menuOptionsClass, light*/ 320) {
				toggle_class(ul, "bx--overflow-menu-options--light", /*light*/ ctx[6]);
			}

			if (dirty[0] & /*menuOptionsClass, size*/ 272) {
				toggle_class(ul, "bx--overflow-menu-options--sm", /*size*/ ctx[4] === 'sm');
			}

			if (dirty[0] & /*menuOptionsClass, size*/ 272) {
				toggle_class(ul, "bx--overflow-menu-options--xl", /*size*/ ctx[4] === 'xl');
			}

			if (dirty[0] & /*menuOptionsClass, ctxBreadcrumbItem*/ 16640) {
				toggle_class(ul, "bx--breadcrumb-menu-options", !!/*ctxBreadcrumbItem*/ ctx[14]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[30](null);
		}
	};
}

function create_fragment$H(ctx) {
	let html_tag;
	let html_anchor;
	let t0;
	let button;
	let t1;
	let current;
	let mounted;
	let dispose;
	const menu_slot_template = /*#slots*/ ctx[23].menu;
	const menu_slot = create_slot(menu_slot_template, ctx, /*$$scope*/ ctx[22], get_menu_slot_context);
	const menu_slot_or_fallback = menu_slot || fallback_block$j(ctx);
	let if_block = /*open*/ ctx[0] && create_if_block$r(ctx);

	let button_levels = [
		{ type: "button" },
		{ "aria-haspopup": "" },
		{ "aria-expanded": /*open*/ ctx[0] },
		{ "aria-label": /*ariaLabel*/ ctx[13] },
		{ id: /*id*/ ctx[11] },
		/*$$restProps*/ ctx[18]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			html_tag = new HtmlTag();
			html_anchor = empty();
			t0 = space();
			button = element("button");
			if (menu_slot_or_fallback) menu_slot_or_fallback.c();
			t1 = space();
			if (if_block) if_block.c();
			html_tag.a = html_anchor;
			set_attributes(button, button_data);
			toggle_class(button, "bx--overflow-menu", true);
			toggle_class(button, "bx--overflow-menu--open", /*open*/ ctx[0]);
			toggle_class(button, "bx--overflow-menu--light", /*light*/ ctx[6]);
			toggle_class(button, "bx--overflow-menu--sm", /*size*/ ctx[4] === 'sm');
			toggle_class(button, "bx--overflow-menu--xl", /*size*/ ctx[4] === 'xl');
		},
		m(target, anchor) {
			html_tag.m(/*styles*/ ctx[12], document.head);
			append(document.head, html_anchor);
			insert(target, t0, anchor);
			insert(target, button, anchor);

			if (menu_slot_or_fallback) {
				menu_slot_or_fallback.m(button, null);
			}

			append(button, t1);
			if (if_block) if_block.m(button, null);
			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[31](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*click_handler_1*/ ctx[29]),
					listen(button, "click", /*click_handler*/ ctx[24]),
					listen(button, "click", /*click_handler_2*/ ctx[32]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[25]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[26]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[27]),
					listen(button, "keydown", /*keydown_handler*/ ctx[28]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[33]),
					listen(button, "focusout", /*focusout_handler*/ ctx[34])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*styles*/ 4096) html_tag.p(/*styles*/ ctx[12]);

			if (menu_slot) {
				if (menu_slot.p && (!current || dirty[0] & /*$$scope*/ 4194304)) {
					update_slot_base(
						menu_slot,
						menu_slot_template,
						ctx,
						/*$$scope*/ ctx[22],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
						: get_slot_changes(menu_slot_template, /*$$scope*/ ctx[22], dirty, get_menu_slot_changes),
						get_menu_slot_context
					);
				}
			} else {
				if (menu_slot_or_fallback && menu_slot_or_fallback.p && (!current || dirty[0] & /*icon, iconDescription, iconClass*/ 1538)) {
					menu_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (/*open*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*open*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$r(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ "aria-haspopup": "" },
				(!current || dirty[0] & /*open*/ 1) && { "aria-expanded": /*open*/ ctx[0] },
				(!current || dirty[0] & /*ariaLabel*/ 8192) && { "aria-label": /*ariaLabel*/ ctx[13] },
				(!current || dirty[0] & /*id*/ 2048) && { id: /*id*/ ctx[11] },
				dirty[0] & /*$$restProps*/ 262144 && /*$$restProps*/ ctx[18]
			]));

			toggle_class(button, "bx--overflow-menu", true);
			toggle_class(button, "bx--overflow-menu--open", /*open*/ ctx[0]);
			toggle_class(button, "bx--overflow-menu--light", /*light*/ ctx[6]);
			toggle_class(button, "bx--overflow-menu--sm", /*size*/ ctx[4] === 'sm');
			toggle_class(button, "bx--overflow-menu--xl", /*size*/ ctx[4] === 'xl');
		},
		i(local) {
			if (current) return;
			transition_in(menu_slot_or_fallback, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(menu_slot_or_fallback, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			detach(html_anchor);
			if (detaching) html_tag.d();
			if (detaching) detach(t0);
			if (detaching) detach(button);
			if (menu_slot_or_fallback) menu_slot_or_fallback.d(detaching);
			if (if_block) if_block.d();
			/*button_binding*/ ctx[31](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$H($$self, $$props, $$invalidate) {
	let ariaLabel;
	let styles;

	const omit_props_names = [
		"size","direction","open","light","flipped","menuOptionsClass","icon","iconClass","iconDescription","id","buttonRef","menuRef"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $currentIndex;
	let $items;
	let $currentId;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { direction = "bottom" } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { flipped = false } = $$props;
	let { menuOptionsClass = undefined } = $$props;
	let { icon = OverflowMenuVertical16 } = $$props;
	let { iconClass = undefined } = $$props;
	let { iconDescription = "Open and close list of options" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { buttonRef = null } = $$props;
	let { menuRef = null } = $$props;
	const ctxBreadcrumbItem = getContext("BreadcrumbItem");
	const dispatch = createEventDispatcher();
	const items = writable([]);
	component_subscribe($$self, items, value => $$invalidate(21, $items = value));
	const currentId = writable(undefined);
	component_subscribe($$self, currentId, value => $$invalidate(36, $currentId = value));
	const focusedId = writable(undefined);
	const currentIndex = writable(-1);
	component_subscribe($$self, currentIndex, value => $$invalidate(20, $currentIndex = value));
	let buttonWidth = undefined;
	let onMountAfterUpdate = true;

	setContext("OverflowMenu", {
		focusedId,
		add: ({ id, text, primaryFocus, disabled }) => {
			items.update(_ => {
				if (primaryFocus) {
					currentIndex.set(_.length);
				}

				return [
					..._,
					{
						id,
						text,
						primaryFocus,
						disabled,
						index: _.length
					}
				];
			});
		},
		update: id => {
			currentId.set(id);
		},
		change: direction => {
			let index = $currentIndex + direction;

			if (index < 0) {
				index = $items.length - 1;
			} else if (index >= $items.length) {
				index = 0;
			}

			let disabled = $items[index].disabled;

			while (disabled) {
				index = index + direction;

				if (index < 0) {
					index = $items.length - 1;
				} else if (index >= $items.length) {
					index = 0;
				}

				disabled = $items[index].disabled;
			}

			currentIndex.set(index);
		}
	});

	afterUpdate(() => {
		if ($currentId) {
			const { index, text } = $items.filter(_ => _.id === $currentId)[0];
			dispatch("close", { index, text });
			$$invalidate(0, open = false);
		}

		if (open) {
			const { width, height } = buttonRef.getBoundingClientRect();
			$$invalidate(19, buttonWidth = width);

			if (!onMountAfterUpdate && $currentIndex < 0) {
				menuRef.focus();
			}

			if (flipped) {
				$$invalidate(3, menuRef.style.left = "auto", menuRef);
				$$invalidate(3, menuRef.style.right = 0, menuRef);
			}

			if (direction === "top") {
				$$invalidate(3, menuRef.style.top = "auto", menuRef);
				$$invalidate(3, menuRef.style.bottom = height + "px", menuRef);
			} else if (direction === "bottom") {
				$$invalidate(3, menuRef.style.top = height + "px", menuRef);
			}

			if (ctxBreadcrumbItem) {
				$$invalidate(3, menuRef.style.top = height + 10 + "px", menuRef);
				$$invalidate(3, menuRef.style.left = -11 + "px", menuRef);
			}
		}

		if (!open) {
			items.set([]);
			currentId.set(undefined);
			currentIndex.set(0);
		}

		onMountAfterUpdate = false;
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (buttonRef && buttonRef.contains(target)) return;

		if (menuRef && !menuRef.contains(target)) {
			$$invalidate(0, open = false);
		}
	};

	function ul_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			menuRef = $$value;
			$$invalidate(3, menuRef);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			buttonRef = $$value;
			$$invalidate(2, buttonRef);
		});
	}

	const click_handler_2 = ({ target }) => {
		if (!(menuRef && menuRef.contains(target))) {
			$$invalidate(0, open = !open);
		}
	};

	const keydown_handler_1 = e => {
		if (open) {
			if (['ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp'].includes(e.key)) {
				e.preventDefault();
			} else if (e.key === 'Escape') {
				e.stopPropagation();
				$$invalidate(0, open = false);
				buttonRef.focus();
			}
		}
	};

	const focusout_handler = e => {
		if (open) {
			if (!buttonRef.contains(e.relatedTarget)) {
				$$invalidate(0, open = false);
			}
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(39, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(4, size = $$new_props.size);
		if ('direction' in $$new_props) $$invalidate(5, direction = $$new_props.direction);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ('flipped' in $$new_props) $$invalidate(7, flipped = $$new_props.flipped);
		if ('menuOptionsClass' in $$new_props) $$invalidate(8, menuOptionsClass = $$new_props.menuOptionsClass);
		if ('icon' in $$new_props) $$invalidate(1, icon = $$new_props.icon);
		if ('iconClass' in $$new_props) $$invalidate(9, iconClass = $$new_props.iconClass);
		if ('iconDescription' in $$new_props) $$invalidate(10, iconDescription = $$new_props.iconDescription);
		if ('id' in $$new_props) $$invalidate(11, id = $$new_props.id);
		if ('buttonRef' in $$new_props) $$invalidate(2, buttonRef = $$new_props.buttonRef);
		if ('menuRef' in $$new_props) $$invalidate(3, menuRef = $$new_props.menuRef);
		if ('$$scope' in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(13, ariaLabel = $$props["aria-label"] || "menu");

		if ($$self.$$.dirty[0] & /*$items, $currentIndex*/ 3145728) {
			 if ($items[$currentIndex]) {
				focusedId.set($items[$currentIndex].id);
			}
		}

		if ($$self.$$.dirty[0] & /*id, buttonWidth*/ 526336) {
			 $$invalidate(12, styles = `<style>
    #${id} .bx--overflow-menu-options.bx--overflow-menu-options:after {
      width: ${buttonWidth ? buttonWidth + "px" : "2rem"};
    }
  <\/style>`);
		}
	};

	 if (ctxBreadcrumbItem) {
		$$invalidate(1, icon = OverflowMenuHorizontal16);
	}

	$$props = exclude_internal_props($$props);

	return [
		open,
		icon,
		buttonRef,
		menuRef,
		size,
		direction,
		light,
		flipped,
		menuOptionsClass,
		iconClass,
		iconDescription,
		id,
		styles,
		ariaLabel,
		ctxBreadcrumbItem,
		items,
		currentId,
		currentIndex,
		$$restProps,
		buttonWidth,
		$currentIndex,
		$items,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		ul_binding,
		button_binding,
		click_handler_2,
		keydown_handler_1,
		focusout_handler
	];
}

class OverflowMenu extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$H,
			create_fragment$H,
			safe_not_equal,
			{
				size: 4,
				direction: 5,
				open: 0,
				light: 6,
				flipped: 7,
				menuOptionsClass: 8,
				icon: 1,
				iconClass: 9,
				iconDescription: 10,
				id: 11,
				buttonRef: 2,
				menuRef: 3
			},
			null,
			[-1, -1]
		);
	}
}

/* node_modules\carbon-components-svelte\src\OverflowMenu\OverflowMenuItem.svelte generated by Svelte v3.46.4 */

function create_else_block$9(ctx) {
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	const default_slot_or_fallback = default_slot || fallback_block_1$1(ctx);
	let button_levels = [/*buttonProps*/ ctx[7]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[24](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_1*/ ctx[19]),
					listen(button, "click", /*click_handler_3*/ ctx[25]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[20]),
					listen(button, "keydown", /*keydown_handler_3*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 2)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty & /*buttonProps*/ 128 && /*buttonProps*/ ctx[7]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[24](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (64:2) {#if href}
function create_if_block$s(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	const default_slot_or_fallback = default_slot || fallback_block$k(ctx);
	let a_levels = [/*buttonProps*/ ctx[7]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[21](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[17]),
					listen(a, "click", /*click_handler_2*/ ctx[22]),
					listen(a, "keydown", /*keydown_handler*/ ctx[18]),
					listen(a, "keydown", /*keydown_handler_2*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 2)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty & /*buttonProps*/ 128 && /*buttonProps*/ ctx[7]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (105:12)          
function fallback_block_1$1(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*text*/ ctx[1]);
			toggle_class(div, "bx--overflow-menu-options__option-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 2) set_data(t, /*text*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (82:12)          
function fallback_block$k(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*text*/ ctx[1]);
			toggle_class(div, "bx--overflow-menu-options__option-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 2) set_data(t, /*text*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$I(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block$s, create_else_block$9];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let li_levels = [{ role: "none" }, { id: /*id*/ ctx[6] }, /*$$restProps*/ ctx[11]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if_block.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--overflow-menu-options__option", true);
			toggle_class(li, "bx--overflow-menu--divider", /*hasDivider*/ ctx[4]);
			toggle_class(li, "bx--overflow-menu-options__option--danger", /*danger*/ ctx[5]);
			toggle_class(li, "bx--overflow-menu-options__option--disabled", /*disabled*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li, null);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				{ role: "none" },
				(!current || dirty & /*id*/ 64) && { id: /*id*/ ctx[6] },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
			]));

			toggle_class(li, "bx--overflow-menu-options__option", true);
			toggle_class(li, "bx--overflow-menu--divider", /*hasDivider*/ ctx[4]);
			toggle_class(li, "bx--overflow-menu-options__option--danger", /*danger*/ ctx[5]);
			toggle_class(li, "bx--overflow-menu-options__option--disabled", /*disabled*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance$I($$self, $$props, $$invalidate) {
	let buttonProps;

	const omit_props_names = [
		"text","href","primaryFocus","disabled","hasDivider","danger","requireTitle","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $focusedId;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { text = "Provide text" } = $$props;
	let { href = "" } = $$props;
	let { primaryFocus = false } = $$props;
	let { disabled = false } = $$props;
	let { hasDivider = false } = $$props;
	let { danger = false } = $$props;
	let { requireTitle = true } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const { focusedId, add, update, change } = getContext("OverflowMenu");
	component_subscribe($$self, focusedId, value => $$invalidate(14, $focusedId = value));
	add({ id, text, primaryFocus, disabled });

	afterUpdate(() => {
		if (ref && primaryFocus) {
			ref.focus();
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_2 = () => {
		update(id);
	};

	const keydown_handler_2 = ({ key }) => {
		if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_3 = () => {
		update(id);
	};

	const keydown_handler_3 = ({ key }) => {
		if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('text' in $$new_props) $$invalidate(1, text = $$new_props.text);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('primaryFocus' in $$new_props) $$invalidate(12, primaryFocus = $$new_props.primaryFocus);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('hasDivider' in $$new_props) $$invalidate(4, hasDivider = $$new_props.hasDivider);
		if ('danger' in $$new_props) $$invalidate(5, danger = $$new_props.danger);
		if ('requireTitle' in $$new_props) $$invalidate(13, requireTitle = $$new_props.requireTitle);
		if ('id' in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$focusedId, id*/ 16448) {
			 $$invalidate(12, primaryFocus = $focusedId === id);
		}

		if ($$self.$$.dirty & /*href, disabled, requireTitle, text*/ 8206) {
			 $$invalidate(7, buttonProps = {
				role: "menuitem",
				tabindex: "-1",
				class: "bx--overflow-menu-options__btn",
				disabled: href ? undefined : disabled,
				href: href ? href : undefined,
				title: requireTitle
				? $$slots.default ? undefined : text
				: undefined
			});
		}
	};

	return [
		ref,
		text,
		href,
		disabled,
		hasDivider,
		danger,
		id,
		buttonProps,
		focusedId,
		update,
		change,
		$$restProps,
		primaryFocus,
		requireTitle,
		$focusedId,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		click_handler_1,
		keydown_handler_1,
		a_binding,
		click_handler_2,
		keydown_handler_2,
		button_binding,
		click_handler_3,
		keydown_handler_3
	];
}

class OverflowMenuItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$I, create_fragment$I, safe_not_equal, {
			text: 1,
			href: 2,
			primaryFocus: 12,
			disabled: 3,
			hasDivider: 4,
			danger: 5,
			requireTitle: 13,
			id: 6,
			ref: 0
		});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\ToolbarMenu.svelte generated by Svelte v3.46.4 */

function create_default_slot$3(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$J(ctx) {
	let overflowmenu;
	let updating_menuRef;
	let current;

	const overflowmenu_spread_levels = [
		{ icon: Settings16 },
		/*$$restProps*/ ctx[1],
		{
			class: "bx--toolbar-action bx--overflow-menu " + /*$$restProps*/ ctx[1].class
		},
		{ flipped: true }
	];

	function overflowmenu_menuRef_binding(value) {
		/*overflowmenu_menuRef_binding*/ ctx[3](value);
	}

	let overflowmenu_props = {
		$$slots: { default: [create_default_slot$3] },
		$$scope: { ctx }
	};

	for (let i = 0; i < overflowmenu_spread_levels.length; i += 1) {
		overflowmenu_props = assign(overflowmenu_props, overflowmenu_spread_levels[i]);
	}

	if (/*menuRef*/ ctx[0] !== void 0) {
		overflowmenu_props.menuRef = /*menuRef*/ ctx[0];
	}

	overflowmenu = new OverflowMenu({ props: overflowmenu_props });
	binding_callbacks.push(() => bind(overflowmenu, 'menuRef', overflowmenu_menuRef_binding));

	return {
		c() {
			create_component(overflowmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(overflowmenu, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const overflowmenu_changes = (dirty & /*Settings16, $$restProps*/ 2)
			? get_spread_update(overflowmenu_spread_levels, [
					dirty & /*Settings16*/ 0 && { icon: Settings16 },
					dirty & /*$$restProps*/ 2 && get_spread_object(/*$$restProps*/ ctx[1]),
					dirty & /*$$restProps*/ 2 && {
						class: "bx--toolbar-action bx--overflow-menu " + /*$$restProps*/ ctx[1].class
					},
					overflowmenu_spread_levels[3]
				])
			: {};

			if (dirty & /*$$scope*/ 16) {
				overflowmenu_changes.$$scope = { dirty, ctx };
			}

			if (!updating_menuRef && dirty & /*menuRef*/ 1) {
				updating_menuRef = true;
				overflowmenu_changes.menuRef = /*menuRef*/ ctx[0];
				add_flush_callback(() => updating_menuRef = false);
			}

			overflowmenu.$set(overflowmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(overflowmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overflowmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(overflowmenu, detaching);
		}
	};
}

function instance$J($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const ctx = getContext("Toolbar");
	let menuRef = null;

	function overflowmenu_menuRef_binding(value) {
		menuRef = value;
		$$invalidate(0, menuRef);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*menuRef*/ 1) {
			 if (menuRef) $$invalidate(0, menuRef.style.top = "100%", menuRef);
		}

		if ($$self.$$.dirty & /*menuRef*/ 1) {
			 ctx.setOverflowVisible(menuRef != null);
		}
	};

	return [menuRef, $$restProps, slots, overflowmenu_menuRef_binding, $$scope];
}

class ToolbarMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$J, create_fragment$J, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\DataTable\ToolbarMenuItem.svelte generated by Svelte v3.46.4 */

function create_default_slot$4(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$K(ctx) {
	let overflowmenuitem;
	let current;
	const overflowmenuitem_spread_levels = [/*$$restProps*/ ctx[0]];

	let overflowmenuitem_props = {
		$$slots: { default: [create_default_slot$4] },
		$$scope: { ctx }
	};

	for (let i = 0; i < overflowmenuitem_spread_levels.length; i += 1) {
		overflowmenuitem_props = assign(overflowmenuitem_props, overflowmenuitem_spread_levels[i]);
	}

	overflowmenuitem = new OverflowMenuItem({ props: overflowmenuitem_props });
	overflowmenuitem.$on("click", /*click_handler*/ ctx[2]);
	overflowmenuitem.$on("keydown", /*keydown_handler*/ ctx[3]);

	return {
		c() {
			create_component(overflowmenuitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(overflowmenuitem, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const overflowmenuitem_changes = (dirty & /*$$restProps*/ 1)
			? get_spread_update(overflowmenuitem_spread_levels, [get_spread_object(/*$$restProps*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 16) {
				overflowmenuitem_changes.$$scope = { dirty, ctx };
			}

			overflowmenuitem.$set(overflowmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(overflowmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overflowmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(overflowmenuitem, detaching);
		}
	};
}

function instance$K($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [$$restProps, slots, click_handler, keydown_handler, $$scope];
}

class ToolbarMenuItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$K, create_fragment$K, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\Form\Form.svelte generated by Svelte v3.46.4 */

function create_fragment$L(ctx) {
	let form;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let form_levels = [/*$$restProps*/ ctx[1]];
	let form_data = {};

	for (let i = 0; i < form_levels.length; i += 1) {
		form_data = assign(form_data, form_levels[i]);
	}

	return {
		c() {
			form = element("form");
			if (default_slot) default_slot.c();
			set_attributes(form, form_data);
			toggle_class(form, "bx--form", true);
		},
		m(target, anchor) {
			insert(target, form, anchor);

			if (default_slot) {
				default_slot.m(form, null);
			}

			/*form_binding*/ ctx[10](form);
			current = true;

			if (!mounted) {
				dispose = [
					listen(form, "click", /*click_handler*/ ctx[4]),
					listen(form, "keydown", /*keydown_handler*/ ctx[5]),
					listen(form, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(form, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(form, "mouseleave", /*mouseleave_handler*/ ctx[8]),
					listen(form, "submit", prevent_default(/*submit_handler*/ ctx[9]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(form, form_data = get_spread_update(form_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(form, "bx--form", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form);
			if (default_slot) default_slot.d(detaching);
			/*form_binding*/ ctx[10](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$L($$self, $$props, $$invalidate) {
	const omit_props_names = ["ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function submit_handler(event) {
		bubble.call(this, $$self, event);
	}

	function form_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		submit_handler,
		form_binding
	];
}

class Form extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$L, create_fragment$L, safe_not_equal, { ref: 0 });
	}
}

/* node_modules\carbon-components-svelte\src\FormGroup\FormGroup.svelte generated by Svelte v3.46.4 */

function create_if_block_1$6(ctx) {
	let legend;
	let t;
	let legend_id_value;

	return {
		c() {
			legend = element("legend");
			t = text(/*legendText*/ ctx[4]);
			attr(legend, "id", legend_id_value = /*legendId*/ ctx[5] || /*$$restProps*/ ctx[6]['aria-labelledby']);
			toggle_class(legend, "bx--label", true);
		},
		m(target, anchor) {
			insert(target, legend, anchor);
			append(legend, t);
		},
		p(ctx, dirty) {
			if (dirty & /*legendText*/ 16) set_data(t, /*legendText*/ ctx[4]);

			if (dirty & /*legendId, $$restProps*/ 96 && legend_id_value !== (legend_id_value = /*legendId*/ ctx[5] || /*$$restProps*/ ctx[6]['aria-labelledby'])) {
				attr(legend, "id", legend_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(legend);
		}
	};
}

// (40:2) {#if message}
function create_if_block$t(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*messageText*/ ctx[3]);
			toggle_class(div, "bx--form__requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*messageText*/ 8) set_data(t, /*messageText*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$M(ctx) {
	let fieldset;
	let t0;
	let t1;
	let fieldset_data_invalid_value;
	let fieldset_aria_labelledby_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*legendText*/ ctx[4] && create_if_block_1$6(ctx);
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let if_block1 = /*message*/ ctx[2] && create_if_block$t(ctx);

	let fieldset_levels = [
		{
			"data-invalid": fieldset_data_invalid_value = /*invalid*/ ctx[1] || undefined
		},
		{
			"aria-labelledby": fieldset_aria_labelledby_value = /*$$restProps*/ ctx[6]['aria-labelledby'] || /*legendId*/ ctx[5]
		},
		/*$$restProps*/ ctx[6]
	];

	let fieldset_data = {};

	for (let i = 0; i < fieldset_levels.length; i += 1) {
		fieldset_data = assign(fieldset_data, fieldset_levels[i]);
	}

	return {
		c() {
			fieldset = element("fieldset");
			if (if_block0) if_block0.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			set_attributes(fieldset, fieldset_data);
			toggle_class(fieldset, "bx--fieldset", true);
			toggle_class(fieldset, "bx--fieldset--no-margin", /*noMargin*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, fieldset, anchor);
			if (if_block0) if_block0.m(fieldset, null);
			append(fieldset, t0);

			if (default_slot) {
				default_slot.m(fieldset, null);
			}

			append(fieldset, t1);
			if (if_block1) if_block1.m(fieldset, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(fieldset, "click", /*click_handler*/ ctx[9]),
					listen(fieldset, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(fieldset, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(fieldset, "mouseleave", /*mouseleave_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*legendText*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$6(ctx);
					if_block0.c();
					if_block0.m(fieldset, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if (/*message*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$t(ctx);
					if_block1.c();
					if_block1.m(fieldset, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			set_attributes(fieldset, fieldset_data = get_spread_update(fieldset_levels, [
				(!current || dirty & /*invalid*/ 2 && fieldset_data_invalid_value !== (fieldset_data_invalid_value = /*invalid*/ ctx[1] || undefined)) && {
					"data-invalid": fieldset_data_invalid_value
				},
				(!current || dirty & /*$$restProps, legendId*/ 96 && fieldset_aria_labelledby_value !== (fieldset_aria_labelledby_value = /*$$restProps*/ ctx[6]['aria-labelledby'] || /*legendId*/ ctx[5])) && {
					"aria-labelledby": fieldset_aria_labelledby_value
				},
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(fieldset, "bx--fieldset", true);
			toggle_class(fieldset, "bx--fieldset--no-margin", /*noMargin*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(fieldset);
			if (if_block0) if_block0.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$M($$self, $$props, $$invalidate) {
	const omit_props_names = ["noMargin","invalid","message","messageText","legendText","legendId"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { noMargin = false } = $$props;
	let { invalid = false } = $$props;
	let { message = false } = $$props;
	let { messageText = "" } = $$props;
	let { legendText = "" } = $$props;
	let { legendId = "" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('noMargin' in $$new_props) $$invalidate(0, noMargin = $$new_props.noMargin);
		if ('invalid' in $$new_props) $$invalidate(1, invalid = $$new_props.invalid);
		if ('message' in $$new_props) $$invalidate(2, message = $$new_props.message);
		if ('messageText' in $$new_props) $$invalidate(3, messageText = $$new_props.messageText);
		if ('legendText' in $$new_props) $$invalidate(4, legendText = $$new_props.legendText);
		if ('legendId' in $$new_props) $$invalidate(5, legendId = $$new_props.legendId);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		noMargin,
		invalid,
		message,
		messageText,
		legendText,
		legendId,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FormGroup extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$M, create_fragment$M, safe_not_equal, {
			noMargin: 0,
			invalid: 1,
			message: 2,
			messageText: 3,
			legendText: 4,
			legendId: 5
		});
	}
}

/* node_modules\carbon-components-svelte\src\Icon\IconSkeleton.svelte generated by Svelte v3.46.4 */

function create_fragment$N(ctx) {
	let div;
	let div_style_value;
	let mounted;
	let dispose;

	let div_levels = [
		/*$$restProps*/ ctx[1],
		{
			style: div_style_value = "" + (/*$$restProps*/ ctx[1].style + "; width: " + /*size*/ ctx[0] + "px; height: " + /*size*/ ctx[0] + "px")
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--icon--skeleton", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[2]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1],
				dirty & /*$$restProps, size*/ 3 && div_style_value !== (div_style_value = "" + (/*$$restProps*/ ctx[1].style + "; width: " + /*size*/ ctx[0] + "px; height: " + /*size*/ ctx[0] + "px")) && { style: div_style_value }
			]));

			toggle_class(div, "bx--icon--skeleton", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$N($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
	};

	return [
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class IconSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$N, create_fragment$N, safe_not_equal, { size: 0 });
	}
}

/* node_modules\carbon-components-svelte\src\Icon\Icon.svelte generated by Svelte v3.46.4 */

function create_else_block$a(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*$$restProps*/ ctx[2]];
	var switch_value = /*render*/ ctx[0];

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
		switch_instance.$on("click", /*click_handler_1*/ ctx[7]);
		switch_instance.$on("mouseover", /*mouseover_handler_1*/ ctx[8]);
		switch_instance.$on("mouseenter", /*mouseenter_handler_1*/ ctx[9]);
		switch_instance.$on("mouseleave", /*mouseleave_handler_1*/ ctx[10]);
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = (dirty & /*$$restProps*/ 4)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*$$restProps*/ ctx[2])])
			: {};

			if (switch_value !== (switch_value = /*render*/ ctx[0])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					switch_instance.$on("click", /*click_handler_1*/ ctx[7]);
					switch_instance.$on("mouseover", /*mouseover_handler_1*/ ctx[8]);
					switch_instance.$on("mouseenter", /*mouseenter_handler_1*/ ctx[9]);
					switch_instance.$on("mouseleave", /*mouseleave_handler_1*/ ctx[10]);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (24:0) {#if skeleton}
function create_if_block$u(ctx) {
	let iconskeleton;
	let current;
	const iconskeleton_spread_levels = [/*$$restProps*/ ctx[2]];
	let iconskeleton_props = {};

	for (let i = 0; i < iconskeleton_spread_levels.length; i += 1) {
		iconskeleton_props = assign(iconskeleton_props, iconskeleton_spread_levels[i]);
	}

	iconskeleton = new IconSkeleton({ props: iconskeleton_props });
	iconskeleton.$on("click", /*click_handler*/ ctx[3]);
	iconskeleton.$on("mouseover", /*mouseover_handler*/ ctx[4]);
	iconskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[5]);
	iconskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[6]);

	return {
		c() {
			create_component(iconskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(iconskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const iconskeleton_changes = (dirty & /*$$restProps*/ 4)
			? get_spread_update(iconskeleton_spread_levels, [get_spread_object(/*$$restProps*/ ctx[2])])
			: {};

			iconskeleton.$set(iconskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(iconskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(iconskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(iconskeleton, detaching);
		}
	};
}

function create_fragment$O(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$u, create_else_block$a];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$O($$self, $$props, $$invalidate) {
	const omit_props_names = ["render","skeleton"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { render = undefined } = $$props;
	let { skeleton = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('render' in $$new_props) $$invalidate(0, render = $$new_props.render);
		if ('skeleton' in $$new_props) $$invalidate(1, skeleton = $$new_props.skeleton);
	};

	return [
		render,
		skeleton,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class Icon extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$O, create_fragment$O, safe_not_equal, { render: 0, skeleton: 1 });
	}
}

/* node_modules\carbon-components-svelte\src\LocalStorage\LocalStorage.svelte generated by Svelte v3.46.4 */

function clearAll() {
	localStorage.clear();
}

function instance$P($$self, $$props, $$invalidate) {
	let { key = "local-storage-key" } = $$props;
	let { value = "" } = $$props;

	function clearItem() {
		localStorage.removeItem(key);
	}

	const dispatch = createEventDispatcher();
	let prevValue = value;

	function setItem() {
		if (typeof value === "object") {
			localStorage.setItem(key, JSON.stringify(value));
		} else {
			localStorage.setItem(key, value);
		}
	}

	onMount(() => {
		const item = localStorage.getItem(key);

		if (item != null) {
			try {
				$$invalidate(0, value = JSON.parse(item));
			} catch(e) {
				$$invalidate(0, value = item);
			}
		} else {
			setItem();
			dispatch("save");
		}
	});

	afterUpdate(() => {
		if (prevValue !== value) {
			setItem();
			dispatch("update", { prevValue, value });
		}

		prevValue = value;
	});

	$$self.$$set = $$props => {
		if ('key' in $$props) $$invalidate(1, key = $$props.key);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, key, clearItem, clearAll];
}

class LocalStorage extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$P, null, safe_not_equal, {
			key: 1,
			value: 0,
			clearItem: 2,
			clearAll: 3
		});
	}

	get clearItem() {
		return this.$$.ctx[2];
	}

	get clearAll() {
		return clearAll;
	}
}

/* node_modules\carbon-components-svelte\src\MultiSelect\MultiSelect.svelte generated by Svelte v3.46.4 */

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[70] = list[i];
	child_ctx[72] = i;
	return child_ctx;
}

// (270:2) {#if titleText}
function create_if_block_9$1(ctx) {
	let label_1;
	let t;

	return {
		c() {
			label_1 = element("label");
			t = text(/*titleText*/ ctx[14]);
			attr(label_1, "for", /*id*/ ctx[23]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[22]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);
			append(label_1, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*titleText*/ 16384) set_data(t, /*titleText*/ ctx[14]);

			if (dirty[0] & /*id*/ 8388608) {
				attr(label_1, "for", /*id*/ ctx[23]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			}

			if (dirty[0] & /*hideLabel*/ 4194304) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[22]);
			}
		},
		d(detaching) {
			if (detaching) detach(label_1);
		}
	};
}

// (297:4) {#if invalid}
function create_if_block_8$1(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (300:4) {#if !invalid && warn}
function create_if_block_7$1(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (361:6) {#if checked.length > 0}
function create_if_block_6$2(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection({
			props: {
				selectionCount: /*checked*/ ctx[28].length,
				translateWithId: /*translateWithId*/ ctx[13],
				disabled: /*disabled*/ ctx[9]
			}
		});

	listboxselection.$on("clear", /*clear_handler*/ ctx[50]);
	listboxselection.$on("clear", /*clear_handler_1*/ ctx[51]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[0] & /*checked*/ 268435456) listboxselection_changes.selectionCount = /*checked*/ ctx[28].length;
			if (dirty[0] & /*translateWithId*/ 8192) listboxselection_changes.translateWithId = /*translateWithId*/ ctx[13];
			if (dirty[0] & /*disabled*/ 512) listboxselection_changes.disabled = /*disabled*/ ctx[9];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (376:6) {#if filterable}
function create_if_block_3$3(ctx) {
	let input;
	let t0;
	let t1;
	let t2;
	let listboxmenuicon;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[36],
		{ role: "combobox" },
		{ tabindex: "0" },
		{ autocomplete: "off" },
		{ "aria-autocomplete": "list" },
		{ "aria-expanded": /*open*/ ctx[0] },
		{
			"aria-activedescendant": /*highlightedId*/ ctx[29]
		},
		{ "aria-disabled": /*disabled*/ ctx[9] },
		{ "aria-controls": /*menuId*/ ctx[33] },
		{ disabled: /*disabled*/ ctx[9] },
		{ placeholder: /*placeholder*/ ctx[12] },
		{ id: /*id*/ ctx[23] },
		{ name: /*name*/ ctx[24] },
		{ value: /*inputValue*/ ctx[25] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[16] && create_if_block_5$2();
	let if_block1 = /*inputValue*/ ctx[25] && create_if_block_4$3(ctx);

	listboxmenuicon = new ListBoxMenuIcon({
			props: {
				style: "pointer-events: " + (/*open*/ ctx[0] ? 'auto' : 'none'),
				translateWithId: /*translateWithId*/ ctx[13],
				open: /*open*/ ctx[0]
			}
		});

	listboxmenuicon.$on("click", /*click_handler_1*/ ctx[56]);

	return {
		c() {
			input = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			create_component(listboxmenuicon.$$.fragment);
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--empty", /*inputValue*/ ctx[25] === '');
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			input.value = input_data.value;
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[52](input);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_handler*/ ctx[53]),
					listen(input, "keydown", /*keydown_handler*/ ctx[45]),
					listen(input, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[54])),
					listen(input, "keyup", /*keyup_handler*/ ctx[46]),
					listen(input, "focus", /*focus_handler*/ ctx[47]),
					listen(input, "blur", /*blur_handler*/ ctx[48])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[1] & /*$$restProps*/ 32 && /*$$restProps*/ ctx[36],
				{ role: "combobox" },
				{ tabindex: "0" },
				{ autocomplete: "off" },
				{ "aria-autocomplete": "list" },
				(!current || dirty[0] & /*open*/ 1) && { "aria-expanded": /*open*/ ctx[0] },
				(!current || dirty[0] & /*highlightedId*/ 536870912) && {
					"aria-activedescendant": /*highlightedId*/ ctx[29]
				},
				(!current || dirty[0] & /*disabled*/ 512) && { "aria-disabled": /*disabled*/ ctx[9] },
				(!current || dirty[1] & /*menuId*/ 4) && { "aria-controls": /*menuId*/ ctx[33] },
				(!current || dirty[0] & /*disabled*/ 512) && { disabled: /*disabled*/ ctx[9] },
				(!current || dirty[0] & /*placeholder*/ 4096) && { placeholder: /*placeholder*/ ctx[12] },
				(!current || dirty[0] & /*id*/ 8388608) && { id: /*id*/ ctx[23] },
				(!current || dirty[0] & /*name*/ 16777216) && { name: /*name*/ ctx[24] },
				(!current || dirty[0] & /*inputValue*/ 33554432 && input.value !== /*inputValue*/ ctx[25]) && { value: /*inputValue*/ ctx[25] }
			]));

			if ('value' in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--empty", /*inputValue*/ ctx[25] === '');
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[11]);

			if (/*invalid*/ ctx[16]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 65536) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5$2();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*inputValue*/ ctx[25]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*inputValue*/ 33554432) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const listboxmenuicon_changes = {};
			if (dirty[0] & /*open*/ 1) listboxmenuicon_changes.style = "pointer-events: " + (/*open*/ ctx[0] ? 'auto' : 'none');
			if (dirty[0] & /*translateWithId*/ 8192) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[13];
			if (dirty[0] & /*open*/ 1) listboxmenuicon_changes.open = /*open*/ ctx[0];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[52](null);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t2);
			destroy_component(listboxmenuicon, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (437:8) {#if invalid}
function create_if_block_5$2(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (440:8) {#if inputValue}
function create_if_block_4$3(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection({
			props: {
				translateWithId: /*translateWithId*/ ctx[13],
				disabled: /*disabled*/ ctx[9],
				open: /*open*/ ctx[0]
			}
		});

	listboxselection.$on("clear", /*clear_handler_2*/ ctx[55]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[0] & /*translateWithId*/ 8192) listboxselection_changes.translateWithId = /*translateWithId*/ ctx[13];
			if (dirty[0] & /*disabled*/ 512) listboxselection_changes.disabled = /*disabled*/ ctx[9];
			if (dirty[0] & /*open*/ 1) listboxselection_changes.open = /*open*/ ctx[0];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (461:6) {#if !filterable}
function create_if_block_2$4(ctx) {
	let span;
	let t0;
	let t1;
	let listboxmenuicon;
	let current;

	listboxmenuicon = new ListBoxMenuIcon({
			props: {
				open: /*open*/ ctx[0],
				translateWithId: /*translateWithId*/ ctx[13]
			}
		});

	return {
		c() {
			span = element("span");
			t0 = text(/*label*/ ctx[21]);
			t1 = space();
			create_component(listboxmenuicon.$$.fragment);
			attr(span, "class", "bx--list-box__label");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			insert(target, t1, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*label*/ 2097152) set_data(t0, /*label*/ ctx[21]);
			const listboxmenuicon_changes = {};
			if (dirty[0] & /*open*/ 1) listboxmenuicon_changes.open = /*open*/ ctx[0];
			if (dirty[0] & /*translateWithId*/ 8192) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[13];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			destroy_component(listboxmenuicon, detaching);
		}
	};
}

// (305:4) <ListBoxField       role="button"       tabindex="0"       aria-expanded="{open}"       on:click="{() => {         if (disabled) return;         if (filterable) {           open = true;           inputRef.focus();         } else {           open = !open;         }       }}"       on:keydown="{(e) => {         if (filterable) {           return;         }         const key = e.key;         if ([' ', 'ArrowUp', 'ArrowDown'].includes(key)) {           e.preventDefault();         }         if (key === ' ') {           open = !open;         } else if (key === 'Tab') {           if (selectionRef && checked.length > 0) {             selectionRef.focus();           } else {             open = false;             fieldRef.blur();           }         } else if (key === 'ArrowDown') {           change(1);         } else if (key === 'ArrowUp') {           change(-1);         } else if (key === 'Enter') {           if (highlightedIndex > -1) {             sortedItems = sortedItems.map((item, i) => {               if (i !== highlightedIndex) return item;               return { ...item, checked: !item.checked };             });           }         }       }}"       on:focus="{() => {         if (filterable) {           open = true;           if (inputRef) inputRef.focus();         }       }}"       on:blur="{(e) => {         if (!filterable) dispatch('blur', e);       }}"       id="{id}"       disabled="{disabled}"       translateWithId="{translateWithId}"     >
function create_default_slot_3$2(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*checked*/ ctx[28].length > 0 && create_if_block_6$2(ctx);
	let if_block1 = /*filterable*/ ctx[10] && create_if_block_3$3(ctx);
	let if_block2 = !/*filterable*/ ctx[10] && create_if_block_2$4(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*checked*/ ctx[28].length > 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*checked*/ 268435456) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*filterable*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*filterable*/ 1024) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*filterable*/ ctx[10]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*filterable*/ 1024) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2$4(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (466:4) {#if open}
function create_if_block_1$7(ctx) {
	let listboxmenu;
	let current;

	listboxmenu = new ListBoxMenu({
			props: {
				"aria-label": /*ariaLabel*/ ctx[31],
				id: /*id*/ ctx[23],
				"aria-multiselectable": "true",
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(listboxmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxmenu_changes = {};
			if (dirty[1] & /*ariaLabel*/ 1) listboxmenu_changes["aria-label"] = /*ariaLabel*/ ctx[31];
			if (dirty[0] & /*id*/ 8388608) listboxmenu_changes.id = /*id*/ ctx[23];

			if (dirty[0] & /*filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, itemToString, useTitleInItem, itemToInput, disabled, open*/ 1275102825 | dirty[2] & /*$$scope*/ 2048) {
				listboxmenu_changes.$$scope = { dirty, ctx };
			}

			listboxmenu.$set(listboxmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxmenu, detaching);
		}
	};
}

// (473:10) <ListBoxMenuItem             id="{item.id}"             role="option"             aria-labelledby="checkbox-{item.id}"             aria-selected="{item.checked}"             active="{item.checked}"             highlighted="{highlightedIndex === i}"             on:click="{() => {               sortedItems = sortedItems.map((_) =>                 _.id === item.id ? { ..._, checked: !_.checked } : _               );               fieldRef.focus();             }}"             on:mouseenter="{() => {               highlightedIndex = i;             }}"           >
function create_default_slot_2$2(ctx) {
	let checkbox;
	let t;
	let current;

	const checkbox_spread_levels = [
		{ name: /*item*/ ctx[70].id },
		{
			labelText: /*itemToString*/ ctx[5](/*item*/ ctx[70])
		},
		{
			title: /*useTitleInItem*/ ctx[15]
			? /*itemToString*/ ctx[5](/*item*/ ctx[70])
			: undefined
		},
		/*itemToInput*/ ctx[6](/*item*/ ctx[70]),
		{ readonly: true },
		{ tabindex: "-1" },
		{ id: "checkbox-" + /*item*/ ctx[70].id },
		{ checked: /*item*/ ctx[70].checked },
		{ disabled: /*disabled*/ ctx[9] }
	];

	function blur_handler_2() {
		return /*blur_handler_2*/ ctx[61](/*i*/ ctx[72]);
	}

	let checkbox_props = {};

	for (let i = 0; i < checkbox_spread_levels.length; i += 1) {
		checkbox_props = assign(checkbox_props, checkbox_spread_levels[i]);
	}

	checkbox = new Checkbox({ props: checkbox_props });
	checkbox.$on("blur", blur_handler_2);

	return {
		c() {
			create_component(checkbox.$$.fragment);
			t = space();
		},
		m(target, anchor) {
			mount_component(checkbox, target, anchor);
			insert(target, t, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			const checkbox_changes = (dirty[0] & /*filterable, filteredItems, sortedItems, itemToString, useTitleInItem, itemToInput, disabled*/ 1207993952)
			? get_spread_update(checkbox_spread_levels, [
					dirty[0] & /*filterable, filteredItems, sortedItems*/ 1207960576 && { name: /*item*/ ctx[70].id },
					dirty[0] & /*itemToString, filterable, filteredItems, sortedItems*/ 1207960608 && {
						labelText: /*itemToString*/ ctx[5](/*item*/ ctx[70])
					},
					dirty[0] & /*useTitleInItem, itemToString, filterable, filteredItems, sortedItems*/ 1207993376 && {
						title: /*useTitleInItem*/ ctx[15]
						? /*itemToString*/ ctx[5](/*item*/ ctx[70])
						: undefined
					},
					dirty[0] & /*itemToInput, filterable, filteredItems, sortedItems*/ 1207960640 && get_spread_object(/*itemToInput*/ ctx[6](/*item*/ ctx[70])),
					checkbox_spread_levels[4],
					checkbox_spread_levels[5],
					dirty[0] & /*filterable, filteredItems, sortedItems*/ 1207960576 && { id: "checkbox-" + /*item*/ ctx[70].id },
					dirty[0] & /*filterable, filteredItems, sortedItems*/ 1207960576 && { checked: /*item*/ ctx[70].checked },
					dirty[0] & /*disabled*/ 512 && { disabled: /*disabled*/ ctx[9] }
				])
			: {};

			checkbox.$set(checkbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkbox, detaching);
			if (detaching) detach(t);
		}
	};
}

// (472:8) {#each filterable ? filteredItems : sortedItems as item, i (item.id)}
function create_each_block$3(key_1, ctx) {
	let first;
	let listboxmenuitem;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[62](/*item*/ ctx[70]);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[63](/*i*/ ctx[72]);
	}

	listboxmenuitem = new ListBoxMenuItem({
			props: {
				id: /*item*/ ctx[70].id,
				role: "option",
				"aria-labelledby": "checkbox-" + /*item*/ ctx[70].id,
				"aria-selected": /*item*/ ctx[70].checked,
				active: /*item*/ ctx[70].checked,
				highlighted: /*highlightedIndex*/ ctx[26] === /*i*/ ctx[72],
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			}
		});

	listboxmenuitem.$on("click", click_handler_3);
	listboxmenuitem.$on("mouseenter", mouseenter_handler);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listboxmenuitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(listboxmenuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listboxmenuitem_changes = {};
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1207960576) listboxmenuitem_changes.id = /*item*/ ctx[70].id;
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1207960576) listboxmenuitem_changes["aria-labelledby"] = "checkbox-" + /*item*/ ctx[70].id;
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1207960576) listboxmenuitem_changes["aria-selected"] = /*item*/ ctx[70].checked;
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1207960576) listboxmenuitem_changes.active = /*item*/ ctx[70].checked;
			if (dirty[0] & /*highlightedIndex, filterable, filteredItems, sortedItems*/ 1275069440) listboxmenuitem_changes.highlighted = /*highlightedIndex*/ ctx[26] === /*i*/ ctx[72];

			if (dirty[0] & /*filterable, filteredItems, sortedItems, itemToString, useTitleInItem, itemToInput, disabled, open*/ 1207993953 | dirty[2] & /*$$scope*/ 2048) {
				listboxmenuitem_changes.$$scope = { dirty, ctx };
			}

			listboxmenuitem.$set(listboxmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listboxmenuitem, detaching);
		}
	};
}

// (467:6) <ListBoxMenu         aria-label="{ariaLabel}"         id="{id}"         aria-multiselectable="true"       >
function create_default_slot_1$2(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;

	let each_value = /*filterable*/ ctx[10]
	? /*filteredItems*/ ctx[30]
	: /*sortedItems*/ ctx[27];

	const get_key = ctx => /*item*/ ctx[70].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$3(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, itemToString, useTitleInItem, itemToInput, disabled, open*/ 1275102825) {
				each_value = /*filterable*/ ctx[10]
				? /*filteredItems*/ ctx[30]
				: /*sortedItems*/ ctx[27];

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$3, each_1_anchor, get_each_context$3);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (280:2) <ListBox     role="{undefined}"     disabled="{disabled}"     invalid="{invalid}"     invalidText="{invalidText}"     open="{open}"     light="{light}"     size="{size}"     warn="{warn}"     warnText="{warnText}"     class="bx--multi-select {direction === 'top' &&       'bx--list-box--up'} {filterable && 'bx--combo-box'}       {filterable && 'bx--multi-select--filterable'}       {invalid && 'bx--multi-select--invalid'}       {inline && 'bx--multi-select--inline'}       {checked.length > 0 && 'bx--multi-select--selected'}"   >
function create_default_slot$5(ctx) {
	let t0;
	let t1;
	let listboxfield;
	let t2;
	let if_block2_anchor;
	let current;
	let if_block0 = /*invalid*/ ctx[16] && create_if_block_8$1();
	let if_block1 = !/*invalid*/ ctx[16] && /*warn*/ ctx[18] && create_if_block_7$1();

	listboxfield = new ListBoxField({
			props: {
				role: "button",
				tabindex: "0",
				"aria-expanded": /*open*/ ctx[0],
				id: /*id*/ ctx[23],
				disabled: /*disabled*/ ctx[9],
				translateWithId: /*translateWithId*/ ctx[13],
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			}
		});

	listboxfield.$on("click", /*click_handler_2*/ ctx[57]);
	listboxfield.$on("keydown", /*keydown_handler_2*/ ctx[58]);
	listboxfield.$on("focus", /*focus_handler_1*/ ctx[59]);
	listboxfield.$on("blur", /*blur_handler_1*/ ctx[60]);
	let if_block2 = /*open*/ ctx[0] && create_if_block_1$7(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			create_component(listboxfield.$$.fragment);
			t2 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			mount_component(listboxfield, target, anchor);
			insert(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[16]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 65536) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8$1();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[16] && /*warn*/ ctx[18]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 327680) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_7$1();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const listboxfield_changes = {};
			if (dirty[0] & /*open*/ 1) listboxfield_changes["aria-expanded"] = /*open*/ ctx[0];
			if (dirty[0] & /*id*/ 8388608) listboxfield_changes.id = /*id*/ ctx[23];
			if (dirty[0] & /*disabled*/ 512) listboxfield_changes.disabled = /*disabled*/ ctx[9];
			if (dirty[0] & /*translateWithId*/ 8192) listboxfield_changes.translateWithId = /*translateWithId*/ ctx[13];

			if (dirty[0] & /*open, translateWithId, label, filterable, disabled, inputValue, invalid, highlightedId, placeholder, id, name, inputRef, light, highlightedIndex, filteredItems, sortedItems, checked, fieldRef*/ 2141273611 | dirty[1] & /*$$restProps, menuId*/ 36 | dirty[2] & /*$$scope*/ 2048) {
				listboxfield_changes.$$scope = { dirty, ctx };
			}

			listboxfield.$set(listboxfield_changes);

			if (/*open*/ ctx[0]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*open*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1$7(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(listboxfield.$$.fragment, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(listboxfield.$$.fragment, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			destroy_component(listboxfield, detaching);
			if (detaching) detach(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (509:2) {#if !inline && !invalid && !warn && helperText}
function create_if_block$v(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[20]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 1048576) set_data(t, /*helperText*/ ctx[20]);

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[9]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$P(ctx) {
	let div;
	let t0;
	let listbox;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleText*/ ctx[14] && create_if_block_9$1(ctx);

	listbox = new ListBox({
			props: {
				role: undefined,
				disabled: /*disabled*/ ctx[9],
				invalid: /*invalid*/ ctx[16],
				invalidText: /*invalidText*/ ctx[17],
				open: /*open*/ ctx[0],
				light: /*light*/ ctx[11],
				size: /*size*/ ctx[7],
				warn: /*warn*/ ctx[18],
				warnText: /*warnText*/ ctx[19],
				class: "bx--multi-select " + (/*direction*/ ctx[8] === 'top' && 'bx--list-box--up') + " " + (/*filterable*/ ctx[10] && 'bx--combo-box') + "\n      " + (/*filterable*/ ctx[10] && 'bx--multi-select--filterable') + "\n      " + (/*invalid*/ ctx[16] && 'bx--multi-select--invalid') + "\n      " + (/*inline*/ ctx[32] && 'bx--multi-select--inline') + "\n      " + (/*checked*/ ctx[28].length > 0 && 'bx--multi-select--selected'),
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			}
		});

	let if_block1 = !/*inline*/ ctx[32] && !/*invalid*/ ctx[16] && !/*warn*/ ctx[18] && /*helperText*/ ctx[20] && create_if_block$v(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(listbox.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--multi-select__wrapper", true);
			toggle_class(div, "bx--list-box__wrapper", true);
			toggle_class(div, "bx--multi-select__wrapper--inline", /*inline*/ ctx[32]);
			toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[32]);
			toggle_class(div, "bx--multi-select__wrapper--inline--invalid", /*inline*/ ctx[32] && /*invalid*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			mount_component(listbox, div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			/*div_binding*/ ctx[64](div);
			current = true;

			if (!mounted) {
				dispose = listen(window, "click", /*click_handler*/ ctx[49]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*titleText*/ ctx[14]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9$1(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			const listbox_changes = {};
			if (dirty[0] & /*disabled*/ 512) listbox_changes.disabled = /*disabled*/ ctx[9];
			if (dirty[0] & /*invalid*/ 65536) listbox_changes.invalid = /*invalid*/ ctx[16];
			if (dirty[0] & /*invalidText*/ 131072) listbox_changes.invalidText = /*invalidText*/ ctx[17];
			if (dirty[0] & /*open*/ 1) listbox_changes.open = /*open*/ ctx[0];
			if (dirty[0] & /*light*/ 2048) listbox_changes.light = /*light*/ ctx[11];
			if (dirty[0] & /*size*/ 128) listbox_changes.size = /*size*/ ctx[7];
			if (dirty[0] & /*warn*/ 262144) listbox_changes.warn = /*warn*/ ctx[18];
			if (dirty[0] & /*warnText*/ 524288) listbox_changes.warnText = /*warnText*/ ctx[19];
			if (dirty[0] & /*direction, filterable, invalid, checked*/ 268502272 | dirty[1] & /*inline*/ 2) listbox_changes.class = "bx--multi-select " + (/*direction*/ ctx[8] === 'top' && 'bx--list-box--up') + " " + (/*filterable*/ ctx[10] && 'bx--combo-box') + "\n      " + (/*filterable*/ ctx[10] && 'bx--multi-select--filterable') + "\n      " + (/*invalid*/ ctx[16] && 'bx--multi-select--invalid') + "\n      " + (/*inline*/ ctx[32] && 'bx--multi-select--inline') + "\n      " + (/*checked*/ ctx[28].length > 0 && 'bx--multi-select--selected');

			if (dirty[0] & /*id, filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, itemToString, useTitleInItem, itemToInput, disabled, open, translateWithId, inputRef, selectionRef, checked, label, inputValue, invalid, highlightedId, placeholder, name, light, warn*/ 2141568635 | dirty[1] & /*ariaLabel, $$restProps, menuId*/ 37 | dirty[2] & /*$$scope*/ 2048) {
				listbox_changes.$$scope = { dirty, ctx };
			}

			listbox.$set(listbox_changes);

			if (!/*inline*/ ctx[32] && !/*invalid*/ ctx[16] && !/*warn*/ ctx[18] && /*helperText*/ ctx[20]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$v(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[1] & /*inline*/ 2) {
				toggle_class(div, "bx--multi-select__wrapper--inline", /*inline*/ ctx[32]);
			}

			if (dirty[1] & /*inline*/ 2) {
				toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[32]);
			}

			if (dirty[0] & /*invalid*/ 65536 | dirty[1] & /*inline*/ 2) {
				toggle_class(div, "bx--multi-select__wrapper--inline--invalid", /*inline*/ ctx[32] && /*invalid*/ ctx[16]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(listbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			destroy_component(listbox);
			if (if_block1) if_block1.d();
			/*div_binding*/ ctx[64](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$Q($$self, $$props, $$invalidate) {
	let menuId;
	let inline;
	let ariaLabel;
	let sortedItems;
	let checked;
	let unchecked;
	let filteredItems;
	let highlightedId;

	const omit_props_names = [
		"items","itemToString","itemToInput","selectedIds","value","size","type","direction","selectionFeedback","disabled","filterable","filterItem","open","light","locale","placeholder","sortItem","translateWithId","titleText","useTitleInItem","invalid","invalidText","warn","warnText","helperText","label","hideLabel","id","name","inputRef","multiSelectRef","fieldRef","selectionRef"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { items = [] } = $$props;
	let { itemToString = item => item.text || item.id } = $$props;

	let { itemToInput = item => {
		
	} } = $$props;

	let { selectedIds = [] } = $$props;
	let { value = "" } = $$props;
	let { size = undefined } = $$props;
	let { type = "default" } = $$props;
	let { direction = "bottom" } = $$props;
	let { selectionFeedback = "top-after-reopen" } = $$props;
	let { disabled = false } = $$props;
	let { filterable = false } = $$props;
	let { filterItem = (item, value) => item.text.toLowerCase().includes(value.trim().toLowerCase()) } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { locale = "en" } = $$props;
	let { placeholder = "" } = $$props;
	let { sortItem = (a, b) => a.text.localeCompare(b.text, locale, { numeric: true }) } = $$props;
	let { translateWithId = undefined } = $$props;
	let { titleText = "" } = $$props;
	let { useTitleInItem = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { label = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { inputRef = null } = $$props;
	let { multiSelectRef = null } = $$props;
	let { fieldRef = null } = $$props;
	let { selectionRef = null } = $$props;
	const dispatch = createEventDispatcher();
	let inputValue = "";
	let initialSorted = false;
	let highlightedIndex = -1;
	let prevChecked = [];

	setContext("MultiSelect", {
		declareRef: ({ key, ref }) => {
			switch (key) {
				case "field":
					$$invalidate(3, fieldRef = ref);
					break;
				case "selection":
					$$invalidate(4, selectionRef = ref);
					break;
			}
		}
	});

	function change(direction) {
		let index = highlightedIndex + direction;

		if (index < 0) {
			index = items.length - 1;
		} else if (index >= items.length) {
			index = 0;
		}

		$$invalidate(26, highlightedIndex = index);
	}

	function sort() {
		return [
			...checked.length > 1 ? checked.sort(sortItem) : checked,
			...unchecked.sort(sortItem)
		];
	}

	afterUpdate(() => {
		if (checked.length !== prevChecked.length) {
			if (selectionFeedback === "top") {
				$$invalidate(27, sortedItems = sort());
			}

			prevChecked = checked;
			$$invalidate(38, selectedIds = checked.map(({ id }) => id));

			dispatch("select", {
				selectedIds,
				selected: checked,
				unselected: unchecked
			});
		}

		if (!open) {
			if (!initialSorted || selectionFeedback !== "fixed") {
				$$invalidate(27, sortedItems = sort());
				initialSorted = true;
			}

			$$invalidate(26, highlightedIndex = -1);
			$$invalidate(25, inputValue = "");
		}

		$$invalidate(37, items = sortedItems);
	});

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler = ({ target }) => {
		if (open && multiSelectRef && !multiSelectRef.contains(target)) {
			$$invalidate(0, open = false);
		}
	};

	function clear_handler(event) {
		bubble.call(this, $$self, event);
	}

	const clear_handler_1 = () => {
		$$invalidate(27, sortedItems = sortedItems.map(item => ({ ...item, checked: false })));
		if (fieldRef) fieldRef.blur();
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputRef = $$value;
			$$invalidate(1, inputRef);
		});
	}

	const input_handler = ({ target }) => {
		$$invalidate(25, inputValue = target.value);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'Enter') {
			if (highlightedIndex > -1) {
				if (filterable) {
					const filteredItemId = filteredItems[highlightedIndex].id;
					const filteredItemIndex = sortedItems.map(item => item.id).indexOf(filteredItemId);

					$$invalidate(27, sortedItems = sortedItems.map((item, i) => {
						if (i !== filteredItemIndex) return item;
						return { ...item, checked: !item.checked };
					}));
				} else {
					$$invalidate(27, sortedItems = sortedItems.map((item, i) => {
						if (i !== highlightedIndex) return item;
						return { ...item, checked: !item.checked };
					}));
				}
			}
		} else if (key === 'Tab') {
			$$invalidate(0, open = false);
			inputRef.blur();
		} else if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		} else if (key === 'Escape') {
			$$invalidate(0, open = false);
		} else if (key === ' ') {
			if (!open) $$invalidate(0, open = true);
		}
	};

	const clear_handler_2 = () => {
		$$invalidate(25, inputValue = '');
		$$invalidate(0, open = false);
	};

	const click_handler_1 = e => {
		e.stopPropagation();
		$$invalidate(0, open = !open);
	};

	const click_handler_2 = () => {
		if (disabled) return;

		if (filterable) {
			$$invalidate(0, open = true);
			inputRef.focus();
		} else {
			$$invalidate(0, open = !open);
		}
	};

	const keydown_handler_2 = e => {
		if (filterable) {
			return;
		}

		const key = e.key;

		if ([' ', 'ArrowUp', 'ArrowDown'].includes(key)) {
			e.preventDefault();
		}

		if (key === ' ') {
			$$invalidate(0, open = !open);
		} else if (key === 'Tab') {
			if (selectionRef && checked.length > 0) {
				selectionRef.focus();
			} else {
				$$invalidate(0, open = false);
				fieldRef.blur();
			}
		} else if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		} else if (key === 'Enter') {
			if (highlightedIndex > -1) {
				$$invalidate(27, sortedItems = sortedItems.map((item, i) => {
					if (i !== highlightedIndex) return item;
					return { ...item, checked: !item.checked };
				}));
			}
		}
	};

	const focus_handler_1 = () => {
		if (filterable) {
			$$invalidate(0, open = true);
			if (inputRef) inputRef.focus();
		}
	};

	const blur_handler_1 = e => {
		if (!filterable) dispatch('blur', e);
	};

	const blur_handler_2 = i => {
		if (i === filteredItems.length - 1) $$invalidate(0, open = false);
	};

	const click_handler_3 = item => {
		$$invalidate(27, sortedItems = sortedItems.map(_ => _.id === item.id ? { ..._, checked: !_.checked } : _));
		fieldRef.focus();
	};

	const mouseenter_handler = i => {
		$$invalidate(26, highlightedIndex = i);
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			multiSelectRef = $$value;
			$$invalidate(2, multiSelectRef);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(69, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(36, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('items' in $$new_props) $$invalidate(37, items = $$new_props.items);
		if ('itemToString' in $$new_props) $$invalidate(5, itemToString = $$new_props.itemToString);
		if ('itemToInput' in $$new_props) $$invalidate(6, itemToInput = $$new_props.itemToInput);
		if ('selectedIds' in $$new_props) $$invalidate(38, selectedIds = $$new_props.selectedIds);
		if ('value' in $$new_props) $$invalidate(39, value = $$new_props.value);
		if ('size' in $$new_props) $$invalidate(7, size = $$new_props.size);
		if ('type' in $$new_props) $$invalidate(40, type = $$new_props.type);
		if ('direction' in $$new_props) $$invalidate(8, direction = $$new_props.direction);
		if ('selectionFeedback' in $$new_props) $$invalidate(41, selectionFeedback = $$new_props.selectionFeedback);
		if ('disabled' in $$new_props) $$invalidate(9, disabled = $$new_props.disabled);
		if ('filterable' in $$new_props) $$invalidate(10, filterable = $$new_props.filterable);
		if ('filterItem' in $$new_props) $$invalidate(42, filterItem = $$new_props.filterItem);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('light' in $$new_props) $$invalidate(11, light = $$new_props.light);
		if ('locale' in $$new_props) $$invalidate(43, locale = $$new_props.locale);
		if ('placeholder' in $$new_props) $$invalidate(12, placeholder = $$new_props.placeholder);
		if ('sortItem' in $$new_props) $$invalidate(44, sortItem = $$new_props.sortItem);
		if ('translateWithId' in $$new_props) $$invalidate(13, translateWithId = $$new_props.translateWithId);
		if ('titleText' in $$new_props) $$invalidate(14, titleText = $$new_props.titleText);
		if ('useTitleInItem' in $$new_props) $$invalidate(15, useTitleInItem = $$new_props.useTitleInItem);
		if ('invalid' in $$new_props) $$invalidate(16, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(17, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(18, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(19, warnText = $$new_props.warnText);
		if ('helperText' in $$new_props) $$invalidate(20, helperText = $$new_props.helperText);
		if ('label' in $$new_props) $$invalidate(21, label = $$new_props.label);
		if ('hideLabel' in $$new_props) $$invalidate(22, hideLabel = $$new_props.hideLabel);
		if ('id' in $$new_props) $$invalidate(23, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(24, name = $$new_props.name);
		if ('inputRef' in $$new_props) $$invalidate(1, inputRef = $$new_props.inputRef);
		if ('multiSelectRef' in $$new_props) $$invalidate(2, multiSelectRef = $$new_props.multiSelectRef);
		if ('fieldRef' in $$new_props) $$invalidate(3, fieldRef = $$new_props.fieldRef);
		if ('selectionRef' in $$new_props) $$invalidate(4, selectionRef = $$new_props.selectionRef);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 8388608) {
			 $$invalidate(33, menuId = `menu-${id}`);
		}

		if ($$self.$$.dirty[1] & /*type*/ 512) {
			 $$invalidate(32, inline = type === "inline");
		}

		 $$invalidate(31, ariaLabel = $$props["aria-label"] || "Choose an item");

		if ($$self.$$.dirty[1] & /*items, selectedIds*/ 192) {
			 $$invalidate(27, sortedItems = items.map(item => ({
				...item,
				checked: selectedIds.includes(item.id)
			})));
		}

		if ($$self.$$.dirty[0] & /*sortedItems*/ 134217728) {
			 $$invalidate(28, checked = sortedItems.filter(({ checked }) => checked));
		}

		if ($$self.$$.dirty[0] & /*sortedItems*/ 134217728) {
			 unchecked = sortedItems.filter(({ checked }) => !checked);
		}

		if ($$self.$$.dirty[0] & /*inputValue*/ 33554432) {
			 $$invalidate(39, value = inputValue);
		}

		if ($$self.$$.dirty[0] & /*sortedItems*/ 134217728 | $$self.$$.dirty[1] & /*filterItem, value*/ 2304) {
			 $$invalidate(30, filteredItems = sortedItems.filter(item => filterItem(item, value)));
		}

		if ($$self.$$.dirty[0] & /*sortedItems, highlightedIndex*/ 201326592) {
			 $$invalidate(29, highlightedId = sortedItems[highlightedIndex]
			? sortedItems[highlightedIndex].id
			: undefined);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		inputRef,
		multiSelectRef,
		fieldRef,
		selectionRef,
		itemToString,
		itemToInput,
		size,
		direction,
		disabled,
		filterable,
		light,
		placeholder,
		translateWithId,
		titleText,
		useTitleInItem,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		label,
		hideLabel,
		id,
		name,
		inputValue,
		highlightedIndex,
		sortedItems,
		checked,
		highlightedId,
		filteredItems,
		ariaLabel,
		inline,
		menuId,
		dispatch,
		change,
		$$restProps,
		items,
		selectedIds,
		value,
		type,
		selectionFeedback,
		filterItem,
		locale,
		sortItem,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		click_handler,
		clear_handler,
		clear_handler_1,
		input_binding,
		input_handler,
		keydown_handler_1,
		clear_handler_2,
		click_handler_1,
		click_handler_2,
		keydown_handler_2,
		focus_handler_1,
		blur_handler_1,
		blur_handler_2,
		click_handler_3,
		mouseenter_handler,
		div_binding
	];
}

class MultiSelect extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$Q,
			create_fragment$P,
			safe_not_equal,
			{
				items: 37,
				itemToString: 5,
				itemToInput: 6,
				selectedIds: 38,
				value: 39,
				size: 7,
				type: 40,
				direction: 8,
				selectionFeedback: 41,
				disabled: 9,
				filterable: 10,
				filterItem: 42,
				open: 0,
				light: 11,
				locale: 43,
				placeholder: 12,
				sortItem: 44,
				translateWithId: 13,
				titleText: 14,
				useTitleInItem: 15,
				invalid: 16,
				invalidText: 17,
				warn: 18,
				warnText: 19,
				helperText: 20,
				label: 21,
				hideLabel: 22,
				id: 23,
				name: 24,
				inputRef: 1,
				multiSelectRef: 2,
				fieldRef: 3,
				selectionRef: 4
			},
			null,
			[-1, -1, -1]
		);
	}
}

/* node_modules\carbon-components-svelte\src\Modal\Modal.svelte generated by Svelte v3.46.4 */

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[54] = list[i];
	return child_ctx;
}

const get_heading_slot_changes = dirty => ({});
const get_heading_slot_context = ctx => ({});
const get_label_slot_changes = dirty => ({});
const get_label_slot_context = ctx => ({});

// (220:6) {#if passiveModal}
function create_if_block_6$3(ctx) {
	let button;
	let close20;
	let current;
	let mounted;
	let dispose;

	close20 = new Close20({
			props: {
				"aria-label": /*iconDescription*/ ctx[7],
				class: "bx--modal-close__icon"
			}
		});

	return {
		c() {
			button = element("button");
			create_component(close20.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			attr(button, "title", /*iconDescription*/ ctx[7]);
			toggle_class(button, "bx--modal-close", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(close20, button, null);
			/*button_binding*/ ctx[37](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_1*/ ctx[38]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const close20_changes = {};
			if (dirty[0] & /*iconDescription*/ 128) close20_changes["aria-label"] = /*iconDescription*/ ctx[7];
			close20.$set(close20_changes);

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			}

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "title", /*iconDescription*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(close20);
			/*button_binding*/ ctx[37](null);
			mounted = false;
			dispose();
		}
	};
}

// (237:6) {#if modalLabel}
function create_if_block_5$3(ctx) {
	let h2;
	let current;
	const label_slot_template = /*#slots*/ ctx[31].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[50], get_label_slot_context);
	const label_slot_or_fallback = label_slot || fallback_block_1$2(ctx);

	return {
		c() {
			h2 = element("h2");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(h2, "id", /*modalLabelId*/ ctx[25]);
			toggle_class(h2, "bx--modal-header__label", true);
		},
		m(target, anchor) {
			insert(target, h2, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(h2, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && (!current || dirty[1] & /*$$scope*/ 524288)) {
					update_slot_base(
						label_slot,
						label_slot_template,
						ctx,
						/*$$scope*/ ctx[50],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[50])
						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[50], dirty, get_label_slot_changes),
						get_label_slot_context
					);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && (!current || dirty[0] & /*modalLabel*/ 64)) {
					label_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*modalLabelId*/ 33554432) {
				attr(h2, "id", /*modalLabelId*/ ctx[25]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h2);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (239:29) {modalLabel}
function fallback_block_1$2(ctx) {
	let t;

	return {
		c() {
			t = text(/*modalLabel*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*modalLabel*/ 64) set_data(t, /*modalLabel*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (243:29) {modalHeading}
function fallback_block$l(ctx) {
	let t;

	return {
		c() {
			t = text(/*modalHeading*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*modalHeading*/ 32) set_data(t, /*modalHeading*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (245:6) {#if !passiveModal}
function create_if_block_4$4(ctx) {
	let button;
	let close20;
	let current;
	let mounted;
	let dispose;

	close20 = new Close20({
			props: {
				"aria-label": /*iconDescription*/ ctx[7],
				class: "bx--modal-close__icon"
			}
		});

	return {
		c() {
			button = element("button");
			create_component(close20.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			attr(button, "title", /*iconDescription*/ ctx[7]);
			toggle_class(button, "bx--modal-close", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(close20, button, null);
			/*button_binding_1*/ ctx[39](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_2*/ ctx[40]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const close20_changes = {};
			if (dirty[0] & /*iconDescription*/ 128) close20_changes["aria-label"] = /*iconDescription*/ ctx[7];
			close20.$set(close20_changes);

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "aria-label", /*iconDescription*/ ctx[7]);
			}

			if (!current || dirty[0] & /*iconDescription*/ 128) {
				attr(button, "title", /*iconDescription*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close20.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close20.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(close20);
			/*button_binding_1*/ ctx[39](null);
			mounted = false;
			dispose();
		}
	};
}

// (275:4) {#if hasScrollingContent}
function create_if_block_3$4(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			toggle_class(div, "bx--modal-content--overflow-indicator", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (278:4) {#if !passiveModal}
function create_if_block$w(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let t;
	let button;
	let current;
	const if_block_creators = [create_if_block_1$8, create_if_block_2$5];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*secondaryButtons*/ ctx[15].length > 0) return 0;
		if (/*secondaryButtonText*/ ctx[14]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	button = new Button({
			props: {
				kind: /*danger*/ ctx[3] ? 'danger' : 'primary',
				disabled: /*primaryButtonDisabled*/ ctx[11],
				icon: /*primaryButtonIcon*/ ctx[12],
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler_5*/ ctx[43]);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			create_component(button.$$.fragment);
			toggle_class(div, "bx--modal-footer", true);
			toggle_class(div, "bx--modal-footer--three-button", /*secondaryButtons*/ ctx[15].length === 2);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			append(div, t);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div, t);
				} else {
					if_block = null;
				}
			}

			const button_changes = {};
			if (dirty[0] & /*danger*/ 8) button_changes.kind = /*danger*/ ctx[3] ? 'danger' : 'primary';
			if (dirty[0] & /*primaryButtonDisabled*/ 2048) button_changes.disabled = /*primaryButtonDisabled*/ ctx[11];
			if (dirty[0] & /*primaryButtonIcon*/ 4096) button_changes.icon = /*primaryButtonIcon*/ ctx[12];

			if (dirty[0] & /*primaryButtonText*/ 1024 | dirty[1] & /*$$scope*/ 524288) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);

			if (dirty[0] & /*secondaryButtons*/ 32768) {
				toggle_class(div, "bx--modal-footer--three-button", /*secondaryButtons*/ ctx[15].length === 2);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			destroy_component(button);
		}
	};
}

// (294:38) 
function create_if_block_2$5(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				kind: "secondary",
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler_4*/ ctx[42]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty[0] & /*secondaryButtonText*/ 16384 | dirty[1] & /*$$scope*/ 524288) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (283:8) {#if secondaryButtons.length > 0}
function create_if_block_1$8(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*secondaryButtons*/ ctx[15];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*dispatch, secondaryButtons*/ 67141632) {
				each_value = /*secondaryButtons*/ ctx[15];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (295:10) <Button             kind="secondary"             on:click="{() => {               dispatch('click:button--secondary', {                 text: secondaryButtonText,               });             }}"           >
function create_default_slot_2$3(ctx) {
	let t;

	return {
		c() {
			t = text(/*secondaryButtonText*/ ctx[14]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*secondaryButtonText*/ 16384) set_data(t, /*secondaryButtonText*/ ctx[14]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (285:12) <Button               kind="secondary"               on:click="{() => {                 dispatch('click:button--secondary', { text: button.text });               }}"             >
function create_default_slot_1$3(ctx) {
	let t0_value = /*button*/ ctx[54].text + "";
	let t0;
	let t1;

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*secondaryButtons*/ 32768 && t0_value !== (t0_value = /*button*/ ctx[54].text + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (284:10) {#each secondaryButtons as button}
function create_each_block$4(ctx) {
	let button;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[41](/*button*/ ctx[54]);
	}

	button = new Button({
			props: {
				kind: "secondary",
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			}
		});

	button.$on("click", click_handler_3);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};

			if (dirty[0] & /*secondaryButtons*/ 32768 | dirty[1] & /*$$scope*/ 524288) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (306:8) <Button           kind="{danger ? 'danger' : 'primary'}"           disabled="{primaryButtonDisabled}"           icon="{primaryButtonIcon}"           on:click="{() => {             dispatch('submit');             dispatch('click:button--primary');           }}"         >
function create_default_slot$6(ctx) {
	let t;

	return {
		c() {
			t = text(/*primaryButtonText*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*primaryButtonText*/ 1024) set_data(t, /*primaryButtonText*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$Q(ctx) {
	let div3;
	let div2;
	let div0;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let div1;
	let div1_tabindex_value;
	let div1_role_value;
	let div1_aria_label_value;
	let div1_aria_labelledby_value;
	let t4;
	let t5;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*passiveModal*/ ctx[4] && create_if_block_6$3(ctx);
	let if_block1 = /*modalLabel*/ ctx[6] && create_if_block_5$3(ctx);
	const heading_slot_template = /*#slots*/ ctx[31].heading;
	const heading_slot = create_slot(heading_slot_template, ctx, /*$$scope*/ ctx[50], get_heading_slot_context);
	const heading_slot_or_fallback = heading_slot || fallback_block$l(ctx);
	let if_block2 = !/*passiveModal*/ ctx[4] && create_if_block_4$4(ctx);
	const default_slot_template = /*#slots*/ ctx[31].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[50], null);
	let if_block3 = /*hasScrollingContent*/ ctx[9] && create_if_block_3$4();
	let if_block4 = !/*passiveModal*/ ctx[4] && create_if_block$w(ctx);

	let div2_levels = [
		{ role: "dialog" },
		{ tabindex: "-1" },
		/*alertDialogProps*/ ctx[22],
		{ "aria-modal": "true" },
		{ "aria-label": /*ariaLabel*/ ctx[23] }
	];

	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	let div3_levels = [{ role: "presentation" }, { id: /*id*/ ctx[17] }, /*$$restProps*/ ctx[27]];
	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			h3 = element("h3");
			if (heading_slot_or_fallback) heading_slot_or_fallback.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			attr(h3, "id", /*modalHeadingId*/ ctx[24]);
			toggle_class(h3, "bx--modal-header__heading", true);
			toggle_class(div0, "bx--modal-header", true);
			attr(div1, "id", /*modalBodyId*/ ctx[18]);
			attr(div1, "tabindex", div1_tabindex_value = /*hasScrollingContent*/ ctx[9] ? '0' : undefined);
			attr(div1, "role", div1_role_value = /*hasScrollingContent*/ ctx[9] ? 'region' : undefined);

			attr(div1, "aria-label", div1_aria_label_value = /*hasScrollingContent*/ ctx[9]
			? /*ariaLabel*/ ctx[23]
			: undefined);

			attr(div1, "aria-labelledby", div1_aria_labelledby_value = /*modalLabel*/ ctx[6]
			? /*modalLabelId*/ ctx[25]
			: /*modalHeadingId*/ ctx[24]);

			toggle_class(div1, "bx--modal-content", true);
			toggle_class(div1, "bx--modal-content--with-form", /*hasForm*/ ctx[8]);
			toggle_class(div1, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[9]);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--modal-container", true);
			toggle_class(div2, "bx--modal-container--xs", /*size*/ ctx[2] === 'xs');
			toggle_class(div2, "bx--modal-container--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(div2, "bx--modal-container--lg", /*size*/ ctx[2] === 'lg');
			set_attributes(div3, div3_data);
			toggle_class(div3, "bx--modal", true);
			toggle_class(div3, "bx--modal-tall", !/*passiveModal*/ ctx[4]);
			toggle_class(div3, "is-visible", /*open*/ ctx[0]);
			toggle_class(div3, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, h3);

			if (heading_slot_or_fallback) {
				heading_slot_or_fallback.m(h3, null);
			}

			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div2, t3);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t4);
			if (if_block3) if_block3.m(div2, null);
			append(div2, t5);
			if (if_block4) if_block4.m(div2, null);
			/*div2_binding*/ ctx[44](div2);
			/*div3_binding*/ ctx[46](div3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler_6*/ ctx[45]),
					listen(div3, "keydown", /*keydown_handler*/ ctx[32]),
					listen(div3, "keydown", /*keydown_handler_1*/ ctx[47]),
					listen(div3, "click", /*click_handler*/ ctx[33]),
					listen(div3, "click", /*click_handler_7*/ ctx[48]),
					listen(div3, "mouseover", /*mouseover_handler*/ ctx[34]),
					listen(div3, "mouseenter", /*mouseenter_handler*/ ctx[35]),
					listen(div3, "mouseleave", /*mouseleave_handler*/ ctx[36]),
					listen(div3, "transitionend", /*transitionend_handler*/ ctx[49])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*passiveModal*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*modalLabel*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*modalLabel*/ 64) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_5$3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (heading_slot) {
				if (heading_slot.p && (!current || dirty[1] & /*$$scope*/ 524288)) {
					update_slot_base(
						heading_slot,
						heading_slot_template,
						ctx,
						/*$$scope*/ ctx[50],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[50])
						: get_slot_changes(heading_slot_template, /*$$scope*/ ctx[50], dirty, get_heading_slot_changes),
						get_heading_slot_context
					);
				}
			} else {
				if (heading_slot_or_fallback && heading_slot_or_fallback.p && (!current || dirty[0] & /*modalHeading*/ 32)) {
					heading_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*modalHeadingId*/ 16777216) {
				attr(h3, "id", /*modalHeadingId*/ ctx[24]);
			}

			if (!/*passiveModal*/ ctx[4]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_4$4(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 524288)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[50],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[50])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[50], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*modalBodyId*/ 262144) {
				attr(div1, "id", /*modalBodyId*/ ctx[18]);
			}

			if (!current || dirty[0] & /*hasScrollingContent*/ 512 && div1_tabindex_value !== (div1_tabindex_value = /*hasScrollingContent*/ ctx[9] ? '0' : undefined)) {
				attr(div1, "tabindex", div1_tabindex_value);
			}

			if (!current || dirty[0] & /*hasScrollingContent*/ 512 && div1_role_value !== (div1_role_value = /*hasScrollingContent*/ ctx[9] ? 'region' : undefined)) {
				attr(div1, "role", div1_role_value);
			}

			if (!current || dirty[0] & /*hasScrollingContent, ariaLabel*/ 8389120 && div1_aria_label_value !== (div1_aria_label_value = /*hasScrollingContent*/ ctx[9]
			? /*ariaLabel*/ ctx[23]
			: undefined)) {
				attr(div1, "aria-label", div1_aria_label_value);
			}

			if (!current || dirty[0] & /*modalLabel, modalLabelId, modalHeadingId*/ 50331712 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = /*modalLabel*/ ctx[6]
			? /*modalLabelId*/ ctx[25]
			: /*modalHeadingId*/ ctx[24])) {
				attr(div1, "aria-labelledby", div1_aria_labelledby_value);
			}

			if (dirty[0] & /*hasForm*/ 256) {
				toggle_class(div1, "bx--modal-content--with-form", /*hasForm*/ ctx[8]);
			}

			if (dirty[0] & /*hasScrollingContent*/ 512) {
				toggle_class(div1, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[9]);
			}

			if (/*hasScrollingContent*/ ctx[9]) {
				if (if_block3) ; else {
					if_block3 = create_if_block_3$4();
					if_block3.c();
					if_block3.m(div2, t5);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*passiveModal*/ ctx[4]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 16) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block$w(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div2, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				{ role: "dialog" },
				{ tabindex: "-1" },
				dirty[0] & /*alertDialogProps*/ 4194304 && /*alertDialogProps*/ ctx[22],
				{ "aria-modal": "true" },
				(!current || dirty[0] & /*ariaLabel*/ 8388608) && { "aria-label": /*ariaLabel*/ ctx[23] }
			]));

			toggle_class(div2, "bx--modal-container", true);
			toggle_class(div2, "bx--modal-container--xs", /*size*/ ctx[2] === 'xs');
			toggle_class(div2, "bx--modal-container--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(div2, "bx--modal-container--lg", /*size*/ ctx[2] === 'lg');

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				{ role: "presentation" },
				(!current || dirty[0] & /*id*/ 131072) && { id: /*id*/ ctx[17] },
				dirty[0] & /*$$restProps*/ 134217728 && /*$$restProps*/ ctx[27]
			]));

			toggle_class(div3, "bx--modal", true);
			toggle_class(div3, "bx--modal-tall", !/*passiveModal*/ ctx[4]);
			toggle_class(div3, "is-visible", /*open*/ ctx[0]);
			toggle_class(div3, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(heading_slot_or_fallback, local);
			transition_in(if_block2);
			transition_in(default_slot, local);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(heading_slot_or_fallback, local);
			transition_out(if_block2);
			transition_out(default_slot, local);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (heading_slot_or_fallback) heading_slot_or_fallback.d(detaching);
			if (if_block2) if_block2.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			/*div2_binding*/ ctx[44](null);
			/*div3_binding*/ ctx[46](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$R($$self, $$props, $$invalidate) {
	let modalLabelId;
	let modalHeadingId;
	let modalBodyId;
	let ariaLabel;

	const omit_props_names = [
		"size","open","danger","alert","passiveModal","modalHeading","modalLabel","modalAriaLabel","iconDescription","hasForm","hasScrollingContent","primaryButtonText","primaryButtonDisabled","primaryButtonIcon","shouldSubmitOnEnter","secondaryButtonText","secondaryButtons","selectorPrimaryFocus","preventCloseOnClickOutside","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { open = false } = $$props;
	let { danger = false } = $$props;
	let { alert = false } = $$props;
	let { passiveModal = false } = $$props;
	let { modalHeading = undefined } = $$props;
	let { modalLabel = undefined } = $$props;
	let { modalAriaLabel = undefined } = $$props;
	let { iconDescription = "Close the modal" } = $$props;
	let { hasForm = false } = $$props;
	let { hasScrollingContent = false } = $$props;
	let { primaryButtonText = "" } = $$props;
	let { primaryButtonDisabled = false } = $$props;
	let { primaryButtonIcon = undefined } = $$props;
	let { shouldSubmitOnEnter = true } = $$props;
	let { secondaryButtonText = "" } = $$props;
	let { secondaryButtons = [] } = $$props;
	let { selectorPrimaryFocus = "[data-modal-primary-focus]" } = $$props;
	let { preventCloseOnClickOutside = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let buttonRef = null;
	let innerModal = null;
	let opened = false;
	let didClickInnerModal = false;

	function focus(element) {
		const node = (element || innerModal).querySelector(selectorPrimaryFocus) || buttonRef;
		node.focus();
	}

	onMount(() => {
		return () => {
			document.body.classList.remove("bx--body--with-modal-open");
		};
	});

	afterUpdate(() => {
		if (opened) {
			if (!open) {
				opened = false;
				dispatch("close");
				document.body.classList.remove("bx--body--with-modal-open");
			}
		} else if (open) {
			opened = true;
			focus();
			dispatch("open");
			document.body.classList.add("bx--body--with-modal-open");
		}
	});

	let alertDialogProps = {};

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			buttonRef = $$value;
			$$invalidate(19, buttonRef);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, open = false);
	};

	function button_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			buttonRef = $$value;
			$$invalidate(19, buttonRef);
		});
	}

	const click_handler_2 = () => {
		$$invalidate(0, open = false);
	};

	const click_handler_3 = button => {
		dispatch('click:button--secondary', { text: button.text });
	};

	const click_handler_4 = () => {
		dispatch('click:button--secondary', { text: secondaryButtonText });
	};

	const click_handler_5 = () => {
		dispatch('submit');
		dispatch('click:button--primary');
	};

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerModal = $$value;
			$$invalidate(20, innerModal);
		});
	}

	const click_handler_6 = () => {
		$$invalidate(21, didClickInnerModal = true);
	};

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = e => {
		if (open) {
			if (e.key === 'Escape') {
				$$invalidate(0, open = false);
			} else if (e.key === 'Tab') {
				// trap focus
				// taken from github.com/carbon-design-system/carbon/packages/react/src/internal/keyboard/navigation.js
				const selectorTabbable = `
  a[href], area[href], input:not([disabled]):not([tabindex='-1']),
  button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),
  textarea:not([disabled]):not([tabindex='-1']),
  iframe, object, embed, *[tabindex]:not([tabindex='-1']):not([disabled]), *[contenteditable=true]
`;

				const tabbable = Array.from(ref.querySelectorAll(selectorTabbable));
				let index = tabbable.indexOf(document.activeElement);
				if (index === -1 && e.shiftKey) index = 0;
				index += tabbable.length + (e.shiftKey ? -1 : 1);
				index %= tabbable.length;
				tabbable[index].focus();
				e.preventDefault();
			} else if (shouldSubmitOnEnter && e.key === 'Enter') {
				dispatch('submit');
				dispatch('click:button--primary');
			}
		}
	};

	const click_handler_7 = () => {
		if (!didClickInnerModal && !preventCloseOnClickOutside) $$invalidate(0, open = false);
		$$invalidate(21, didClickInnerModal = false);
	};

	const transitionend_handler = e => {
		if (e.propertyName === 'transform') {
			dispatch('transitionend', { open });
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(53, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(27, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('danger' in $$new_props) $$invalidate(3, danger = $$new_props.danger);
		if ('alert' in $$new_props) $$invalidate(28, alert = $$new_props.alert);
		if ('passiveModal' in $$new_props) $$invalidate(4, passiveModal = $$new_props.passiveModal);
		if ('modalHeading' in $$new_props) $$invalidate(5, modalHeading = $$new_props.modalHeading);
		if ('modalLabel' in $$new_props) $$invalidate(6, modalLabel = $$new_props.modalLabel);
		if ('modalAriaLabel' in $$new_props) $$invalidate(29, modalAriaLabel = $$new_props.modalAriaLabel);
		if ('iconDescription' in $$new_props) $$invalidate(7, iconDescription = $$new_props.iconDescription);
		if ('hasForm' in $$new_props) $$invalidate(8, hasForm = $$new_props.hasForm);
		if ('hasScrollingContent' in $$new_props) $$invalidate(9, hasScrollingContent = $$new_props.hasScrollingContent);
		if ('primaryButtonText' in $$new_props) $$invalidate(10, primaryButtonText = $$new_props.primaryButtonText);
		if ('primaryButtonDisabled' in $$new_props) $$invalidate(11, primaryButtonDisabled = $$new_props.primaryButtonDisabled);
		if ('primaryButtonIcon' in $$new_props) $$invalidate(12, primaryButtonIcon = $$new_props.primaryButtonIcon);
		if ('shouldSubmitOnEnter' in $$new_props) $$invalidate(13, shouldSubmitOnEnter = $$new_props.shouldSubmitOnEnter);
		if ('secondaryButtonText' in $$new_props) $$invalidate(14, secondaryButtonText = $$new_props.secondaryButtonText);
		if ('secondaryButtons' in $$new_props) $$invalidate(15, secondaryButtons = $$new_props.secondaryButtons);
		if ('selectorPrimaryFocus' in $$new_props) $$invalidate(30, selectorPrimaryFocus = $$new_props.selectorPrimaryFocus);
		if ('preventCloseOnClickOutside' in $$new_props) $$invalidate(16, preventCloseOnClickOutside = $$new_props.preventCloseOnClickOutside);
		if ('id' in $$new_props) $$invalidate(17, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(50, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 131072) {
			 $$invalidate(25, modalLabelId = `bx--modal-header__label--modal-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 131072) {
			 $$invalidate(24, modalHeadingId = `bx--modal-header__heading--modal-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 131072) {
			 $$invalidate(18, modalBodyId = `bx--modal-body--${id}`);
		}

		 $$invalidate(23, ariaLabel = modalLabel || $$props["aria-label"] || modalAriaLabel || modalHeading);

		if ($$self.$$.dirty[0] & /*alert, passiveModal, modalBodyId*/ 268697616) {
			 if (alert) {
				if (passiveModal) {
					$$invalidate(22, alertDialogProps.role = "alert", alertDialogProps);
				}

				if (!passiveModal) {
					$$invalidate(22, alertDialogProps.role = "alertdialog", alertDialogProps);
					$$invalidate(22, alertDialogProps["aria-describedby"] = modalBodyId, alertDialogProps);
				}
			}
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		ref,
		size,
		danger,
		passiveModal,
		modalHeading,
		modalLabel,
		iconDescription,
		hasForm,
		hasScrollingContent,
		primaryButtonText,
		primaryButtonDisabled,
		primaryButtonIcon,
		shouldSubmitOnEnter,
		secondaryButtonText,
		secondaryButtons,
		preventCloseOnClickOutside,
		id,
		modalBodyId,
		buttonRef,
		innerModal,
		didClickInnerModal,
		alertDialogProps,
		ariaLabel,
		modalHeadingId,
		modalLabelId,
		dispatch,
		$$restProps,
		alert,
		modalAriaLabel,
		selectorPrimaryFocus,
		slots,
		keydown_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		button_binding,
		click_handler_1,
		button_binding_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		div2_binding,
		click_handler_6,
		div3_binding,
		keydown_handler_1,
		click_handler_7,
		transitionend_handler,
		$$scope
	];
}

class Modal extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$R,
			create_fragment$Q,
			safe_not_equal,
			{
				size: 2,
				open: 0,
				danger: 3,
				alert: 28,
				passiveModal: 4,
				modalHeading: 5,
				modalLabel: 6,
				modalAriaLabel: 29,
				iconDescription: 7,
				hasForm: 8,
				hasScrollingContent: 9,
				primaryButtonText: 10,
				primaryButtonDisabled: 11,
				primaryButtonIcon: 12,
				shouldSubmitOnEnter: 13,
				secondaryButtonText: 14,
				secondaryButtons: 15,
				selectorPrimaryFocus: 30,
				preventCloseOnClickOutside: 16,
				id: 17,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

/* node_modules\carbon-components-svelte\src\Notification\NotificationButton.svelte generated by Svelte v3.46.4 */

function create_fragment$R(ctx) {
	let button;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*icon*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: {
				title: /*title*/ ctx[2],
				class: "bx--" + /*notificationType*/ ctx[0] + "-notification__close-icon"
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [
		{ type: "button" },
		{ "aria-label": /*iconDescription*/ ctx[3] },
		{ title: /*iconDescription*/ ctx[3] },
		/*$$restProps*/ ctx[4]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--toast-notification__close-button", /*notificationType*/ ctx[0] === 'toast');
			toggle_class(button, "bx--inline-notification__close-button", /*notificationType*/ ctx[0] === 'inline');
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[5]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*title*/ 4) switch_instance_changes.title = /*title*/ ctx[2];
			if (dirty & /*notificationType*/ 1) switch_instance_changes.class = "bx--" + /*notificationType*/ ctx[0] + "-notification__close-icon";

			if (switch_value !== (switch_value = /*icon*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*iconDescription*/ 8) && { "aria-label": /*iconDescription*/ ctx[3] },
				(!current || dirty & /*iconDescription*/ 8) && { title: /*iconDescription*/ ctx[3] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(button, "bx--toast-notification__close-button", /*notificationType*/ ctx[0] === 'toast');
			toggle_class(button, "bx--inline-notification__close-button", /*notificationType*/ ctx[0] === 'inline');
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (switch_instance) destroy_component(switch_instance);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$S($$self, $$props, $$invalidate) {
	const omit_props_names = ["notificationType","icon","title","iconDescription"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { notificationType = "toast" } = $$props;
	let { icon = Close20 } = $$props;
	let { title = undefined } = $$props;
	let { iconDescription = "Close icon" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('notificationType' in $$new_props) $$invalidate(0, notificationType = $$new_props.notificationType);
		if ('icon' in $$new_props) $$invalidate(1, icon = $$new_props.icon);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('iconDescription' in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
	};

	return [
		notificationType,
		icon,
		title,
		iconDescription,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class NotificationButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$S, create_fragment$R, safe_not_equal, {
			notificationType: 0,
			icon: 1,
			title: 2,
			iconDescription: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\CheckmarkFilled20.svelte generated by Svelte v3.46.4 */

function create_if_block$x(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (50:8)      
function fallback_block$m(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$x(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$x(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$S(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$m(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CheckmarkFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-4.9,0-9,4.1-9,9s4.1,9,9,9s9-4,9-9S15,1,10,1z M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
			attr(path1, "fill", "none");
			attr(path1, "d", "M8.7,13.5l-3.2-3.2l1-1l2.2,2.2l4.8-4.8l1,1L8.7,13.5z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CheckmarkFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$T($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CheckmarkFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$T, create_fragment$S, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\ErrorFilled20.svelte generated by Svelte v3.46.4 */

function create_if_block$y(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (49:8)      
function fallback_block$n(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$y(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$y(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$T(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$n(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "ErrorFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
			attr(path1, "d", "M13.5,14.5l-8-8l1-1l8,8L13.5,14.5z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "ErrorFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$U($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class ErrorFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$U, create_fragment$T, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\InformationFilled20.svelte generated by Svelte v3.46.4 */

function create_if_block$z(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (49:8)      
function fallback_block$o(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$z(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$z(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$U(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$o(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "InformationFilled20"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,13.875H17.125v-8H13v2.25h1.875v5.75H12v2.25h8Z");
			attr(path0, "data-icon-path", "inner-path");
			attr(path1, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,6a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,16.125H12v-2.25h2.875v-5.75H13v-2.25h4.125v8H20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "InformationFilled20"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$V($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class InformationFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$V, create_fragment$U, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\InformationSquareFilled20.svelte generated by Svelte v3.46.4 */

function create_if_block$A(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (49:8)      
function fallback_block$p(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$A(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$A(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$V(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$p(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "InformationSquareFilled20"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,13.875H17.125v-8H13v2.25h1.875v5.75H12v2.25h8Z");
			attr(path0, "data-icon-path", "inner-path");
			attr(path1, "d", "M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,16.125H12v-2.25h2.875v-5.75H13v-2.25h4.125v8H20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "InformationSquareFilled20"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$W($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class InformationSquareFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$W, create_fragment$V, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\WarningFilled20.svelte generated by Svelte v3.46.4 */

function create_if_block$B(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (49:8)      
function fallback_block$q(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$B(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$B(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$W(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$q(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "d", "M10,1c-5,0-9,4-9,9s4,9,9,9s9-4,9-9S15,1,10,1z M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1\ts1,0.4,1,1S10.6,16,10,16z");
			attr(path1, "d", "M9.2,5h1.5v7H9.2V5z M10,16c-0.6,0-1-0.4-1-1s0.4-1,1-1s1,0.4,1,1S10.6,16,10,16z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$X($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$X, create_fragment$W, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\WarningAltFilled20.svelte generated by Svelte v3.46.4 */

function create_if_block$C(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (51:8)      
function fallback_block$r(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$C(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$C(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$X(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$r(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningAltFilled20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Zm-1.125-5h2.25V12h-2.25Z");
			attr(path0, "data-icon-path", "inner-path");
			attr(path1, "d", "M16.002,6.1714h-.004L4.6487,27.9966,4.6506,28H27.3494l.0019-.0034ZM14.875,12h2.25v9h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z");
			attr(path2, "d", "M29,30H3a1,1,0,0,1-.8872-1.4614l13-25a1,1,0,0,1,1.7744,0l13,25A1,1,0,0,1,29,30ZM4.6507,28H27.3493l.002-.0033L16.002,6.1714h-.004L4.6487,27.9967Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);
			append(svg, path2);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningAltFilled20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$Y($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningAltFilled20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$Y, create_fragment$X, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\Notification\NotificationIcon.svelte generated by Svelte v3.46.4 */

function create_fragment$Y(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icons*/ ctx[3][/*kind*/ ctx[0]];

	function switch_props(ctx) {
		return {
			props: {
				title: /*iconDescription*/ ctx[2],
				class: "bx--" + /*notificationType*/ ctx[1] + "-notification__icon"
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*iconDescription*/ 4) switch_instance_changes.title = /*iconDescription*/ ctx[2];
			if (dirty & /*notificationType*/ 2) switch_instance_changes.class = "bx--" + /*notificationType*/ ctx[1] + "-notification__icon";

			if (switch_value !== (switch_value = /*icons*/ ctx[3][/*kind*/ ctx[0]])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function instance$Z($$self, $$props, $$invalidate) {
	let { kind = "error" } = $$props;
	let { notificationType = "toast" } = $$props;
	let { iconDescription = "Closes notification" } = $$props;

	const icons = {
		error: ErrorFilled20,
		"info-square": InformationSquareFilled20,
		info: InformationFilled20,
		success: CheckmarkFilled20,
		warning: WarningFilled20,
		"warning-alt": WarningAltFilled20
	};

	$$self.$$set = $$props => {
		if ('kind' in $$props) $$invalidate(0, kind = $$props.kind);
		if ('notificationType' in $$props) $$invalidate(1, notificationType = $$props.notificationType);
		if ('iconDescription' in $$props) $$invalidate(2, iconDescription = $$props.iconDescription);
	};

	return [kind, notificationType, iconDescription, icons];
}

class NotificationIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$Z, create_fragment$Y, safe_not_equal, {
			kind: 0,
			notificationType: 1,
			iconDescription: 2
		});
	}
}

/* node_modules\carbon-components-svelte\src\Notification\ToastNotification.svelte generated by Svelte v3.46.4 */
const get_caption_slot_changes = dirty => ({});
const get_caption_slot_context = ctx => ({});
const get_subtitle_slot_changes = dirty => ({});
const get_subtitle_slot_context = ctx => ({});
const get_title_slot_changes$1 = dirty => ({});
const get_title_slot_context$1 = ctx => ({});

// (62:0) {#if open}
function create_if_block$D(ctx) {
	let div3;
	let notificationicon;
	let t0;
	let div2;
	let h3;
	let t1;
	let div0;
	let t2;
	let div1;
	let t3;
	let t4;
	let current;
	let mounted;
	let dispose;
	notificationicon = new NotificationIcon({ props: { kind: /*kind*/ ctx[0] } });
	const title_slot_template = /*#slots*/ ctx[13].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[12], get_title_slot_context$1);
	const title_slot_or_fallback = title_slot || fallback_block_2$1(ctx);
	const subtitle_slot_template = /*#slots*/ ctx[13].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[12], get_subtitle_slot_context);
	const subtitle_slot_or_fallback = subtitle_slot || fallback_block_1$3(ctx);
	const caption_slot_template = /*#slots*/ ctx[13].caption;
	const caption_slot = create_slot(caption_slot_template, ctx, /*$$scope*/ ctx[12], get_caption_slot_context);
	const caption_slot_or_fallback = caption_slot || fallback_block$s(ctx);
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	let if_block = !/*hideCloseButton*/ ctx[7] && create_if_block_1$9(ctx);
	let div3_levels = [{ role: /*role*/ ctx[2] }, { kind: /*kind*/ ctx[0] }, /*$$restProps*/ ctx[10]];
	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element("div");
			create_component(notificationicon.$$.fragment);
			t0 = space();
			div2 = element("div");
			h3 = element("h3");
			if (title_slot_or_fallback) title_slot_or_fallback.c();
			t1 = space();
			div0 = element("div");
			if (subtitle_slot_or_fallback) subtitle_slot_or_fallback.c();
			t2 = space();
			div1 = element("div");
			if (caption_slot_or_fallback) caption_slot_or_fallback.c();
			t3 = space();
			if (default_slot) default_slot.c();
			t4 = space();
			if (if_block) if_block.c();
			toggle_class(h3, "bx--toast-notification__title", true);
			toggle_class(div0, "bx--toast-notification__subtitle", true);
			toggle_class(div1, "bx--toast-notification__caption", true);
			toggle_class(div2, "bx--toast-notification__details", true);
			set_attributes(div3, div3_data);
			toggle_class(div3, "bx--toast-notification", true);
			toggle_class(div3, "bx--toast-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div3, "bx--toast-notification--error", /*kind*/ ctx[0] === 'error');
			toggle_class(div3, "bx--toast-notification--info", /*kind*/ ctx[0] === 'info');
			toggle_class(div3, "bx--toast-notification--info-square", /*kind*/ ctx[0] === 'info-square');
			toggle_class(div3, "bx--toast-notification--success", /*kind*/ ctx[0] === 'success');
			toggle_class(div3, "bx--toast-notification--warning", /*kind*/ ctx[0] === 'warning');
			toggle_class(div3, "bx--toast-notification--warning-alt", /*kind*/ ctx[0] === 'warning-alt');
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			mount_component(notificationicon, div3, null);
			append(div3, t0);
			append(div3, div2);
			append(div2, h3);

			if (title_slot_or_fallback) {
				title_slot_or_fallback.m(h3, null);
			}

			append(div2, t1);
			append(div2, div0);

			if (subtitle_slot_or_fallback) {
				subtitle_slot_or_fallback.m(div0, null);
			}

			append(div2, t2);
			append(div2, div1);

			if (caption_slot_or_fallback) {
				caption_slot_or_fallback.m(div1, null);
			}

			append(div2, t3);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			append(div3, t4);
			if (if_block) if_block.m(div3, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div3, "click", /*click_handler*/ ctx[14]),
					listen(div3, "mouseover", /*mouseover_handler*/ ctx[15]),
					listen(div3, "mouseenter", /*mouseenter_handler*/ ctx[16]),
					listen(div3, "mouseleave", /*mouseleave_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const notificationicon_changes = {};
			if (dirty & /*kind*/ 1) notificationicon_changes.kind = /*kind*/ ctx[0];
			notificationicon.$set(notificationicon_changes);

			if (title_slot) {
				if (title_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[12], dirty, get_title_slot_changes$1),
						get_title_slot_context$1
					);
				}
			} else {
				if (title_slot_or_fallback && title_slot_or_fallback.p && (!current || dirty & /*title*/ 8)) {
					title_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[12], dirty, get_subtitle_slot_changes),
						get_subtitle_slot_context
					);
				}
			} else {
				if (subtitle_slot_or_fallback && subtitle_slot_or_fallback.p && (!current || dirty & /*subtitle*/ 16)) {
					subtitle_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (caption_slot) {
				if (caption_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						caption_slot,
						caption_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(caption_slot_template, /*$$scope*/ ctx[12], dirty, get_caption_slot_changes),
						get_caption_slot_context
					);
				}
			} else {
				if (caption_slot_or_fallback && caption_slot_or_fallback.p && (!current || dirty & /*caption*/ 32)) {
					caption_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			if (!/*hideCloseButton*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hideCloseButton*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$9(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div3, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				(!current || dirty & /*role*/ 4) && { role: /*role*/ ctx[2] },
				(!current || dirty & /*kind*/ 1) && { kind: /*kind*/ ctx[0] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(div3, "bx--toast-notification", true);
			toggle_class(div3, "bx--toast-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div3, "bx--toast-notification--error", /*kind*/ ctx[0] === 'error');
			toggle_class(div3, "bx--toast-notification--info", /*kind*/ ctx[0] === 'info');
			toggle_class(div3, "bx--toast-notification--info-square", /*kind*/ ctx[0] === 'info-square');
			toggle_class(div3, "bx--toast-notification--success", /*kind*/ ctx[0] === 'success');
			toggle_class(div3, "bx--toast-notification--warning", /*kind*/ ctx[0] === 'warning');
			toggle_class(div3, "bx--toast-notification--warning-alt", /*kind*/ ctx[0] === 'warning-alt');
		},
		i(local) {
			if (current) return;
			transition_in(notificationicon.$$.fragment, local);
			transition_in(title_slot_or_fallback, local);
			transition_in(subtitle_slot_or_fallback, local);
			transition_in(caption_slot_or_fallback, local);
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(notificationicon.$$.fragment, local);
			transition_out(title_slot_or_fallback, local);
			transition_out(subtitle_slot_or_fallback, local);
			transition_out(caption_slot_or_fallback, local);
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(notificationicon);
			if (title_slot_or_fallback) title_slot_or_fallback.d(detaching);
			if (subtitle_slot_or_fallback) subtitle_slot_or_fallback.d(detaching);
			if (caption_slot_or_fallback) caption_slot_or_fallback.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (83:27) {title}
function fallback_block_2$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 8) set_data(t, /*title*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (86:30) {subtitle}
function fallback_block_1$3(ctx) {
	let t;

	return {
		c() {
			t = text(/*subtitle*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*subtitle*/ 16) set_data(t, /*subtitle*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (89:29) {caption}
function fallback_block$s(ctx) {
	let t;

	return {
		c() {
			t = text(/*caption*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*caption*/ 32) set_data(t, /*caption*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (93:4) {#if !hideCloseButton}
function create_if_block_1$9(ctx) {
	let notificationbutton;
	let current;

	notificationbutton = new NotificationButton({
			props: {
				iconDescription: /*iconDescription*/ ctx[6]
			}
		});

	notificationbutton.$on("click", /*close*/ ctx[9]);

	return {
		c() {
			create_component(notificationbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(notificationbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const notificationbutton_changes = {};
			if (dirty & /*iconDescription*/ 64) notificationbutton_changes.iconDescription = /*iconDescription*/ ctx[6];
			notificationbutton.$set(notificationbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(notificationbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(notificationbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(notificationbutton, detaching);
		}
	};
}

function create_fragment$Z(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*open*/ ctx[8] && create_if_block$D(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$D(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$_($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"kind","lowContrast","timeout","role","title","subtitle","caption","iconDescription","hideCloseButton"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { kind = "error" } = $$props;
	let { lowContrast = false } = $$props;
	let { timeout = 0 } = $$props;
	let { role = "alert" } = $$props;
	let { title = "" } = $$props;
	let { subtitle = "" } = $$props;
	let { caption = "" } = $$props;
	let { iconDescription = "Closes notification" } = $$props;
	let { hideCloseButton = false } = $$props;
	const dispatch = createEventDispatcher();
	let open = true;
	let timeoutId = undefined;

	function close(closeFromTimeout) {
		$$invalidate(8, open = false);
		dispatch("close", { timeout: closeFromTimeout === true });
	}

	onMount(() => {
		if (timeout) {
			timeoutId = setTimeout(() => close(true), timeout);
		}

		return () => {
			clearTimeout(timeoutId);
		};
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(0, kind = $$new_props.kind);
		if ('lowContrast' in $$new_props) $$invalidate(1, lowContrast = $$new_props.lowContrast);
		if ('timeout' in $$new_props) $$invalidate(11, timeout = $$new_props.timeout);
		if ('role' in $$new_props) $$invalidate(2, role = $$new_props.role);
		if ('title' in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ('subtitle' in $$new_props) $$invalidate(4, subtitle = $$new_props.subtitle);
		if ('caption' in $$new_props) $$invalidate(5, caption = $$new_props.caption);
		if ('iconDescription' in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ('hideCloseButton' in $$new_props) $$invalidate(7, hideCloseButton = $$new_props.hideCloseButton);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	return [
		kind,
		lowContrast,
		role,
		title,
		subtitle,
		caption,
		iconDescription,
		hideCloseButton,
		open,
		close,
		$$restProps,
		timeout,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ToastNotification extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$_, create_fragment$Z, safe_not_equal, {
			kind: 0,
			lowContrast: 1,
			timeout: 11,
			role: 2,
			title: 3,
			subtitle: 4,
			caption: 5,
			iconDescription: 6,
			hideCloseButton: 7
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\Add16.svelte generated by Svelte v3.46.4 */

function create_if_block$E(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$t(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$E(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$E(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$_(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$t(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Add16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Add16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$$($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Add16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$$, create_fragment$_, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\Subtract16.svelte generated by Svelte v3.46.4 */

function create_if_block$F(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (44:8)      
function fallback_block$u(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$F(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$F(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$$(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$u(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Subtract16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M8 15H24V17H8z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Subtract16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$10($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Subtract16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$10, create_fragment$$, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\EditOff16.svelte generated by Svelte v3.46.4 */

function create_if_block$G(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$v(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$G(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$G(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$10(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$v(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "EditOff16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M30 28.6L3.4 2 2 3.4l10.1 10.1L4 21.6V28h6.4l8.1-8.1L28.6 30 30 28.6zM9.6 26H6v-3.6l7.5-7.5 3.6 3.6L9.6 26zM29.4 6.2L29.4 6.2l-3.6-3.6c-.8-.8-2-.8-2.8 0l0 0 0 0-8 8 1.4 1.4L20 8.4l3.6 3.6L20 15.6l1.4 1.4 8-8C30.2 8.2 30.2 7 29.4 6.2L29.4 6.2zM25 10.6L21.4 7l3-3L28 7.6 25 10.6z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "EditOff16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$11($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class EditOff16 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$11, create_fragment$10, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\NumberInput\NumberInput.svelte generated by Svelte v3.46.4 */
const get_label_slot_changes_1 = dirty => ({});
const get_label_slot_context_1 = ctx => ({});
const get_label_slot_changes$1 = dirty => ({});
const get_label_slot_context$1 = ctx => ({});

// (245:4) {:else}
function create_else_block$b(ctx) {
	let t0;
	let div;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_aria_label_value;
	let input_value_value;
	let t1;
	let t2;
	let t3;
	let t4;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*label*/ ctx[17] && create_if_block_9$2(ctx);

	let input_levels = [
		{ type: "number" },
		{ pattern: "[0-9]*" },
		{ "aria-describedby": /*errorId*/ ctx[22] },
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[12] || undefined
		},
		{
			"aria-invalid": input_aria_invalid_value = /*invalid*/ ctx[12] || undefined
		},
		{
			"aria-label": input_aria_label_value = /*label*/ ctx[17] ? undefined : /*ariaLabel*/ ctx[21]
		},
		{ disabled: /*disabled*/ ctx[9] },
		{ id: /*id*/ ctx[19] },
		{ name: /*name*/ ctx[20] },
		{ max: /*max*/ ctx[4] },
		{ min: /*min*/ ctx[5] },
		{ step: /*step*/ ctx[3] },
		{
			value: input_value_value = /*value*/ ctx[0] ?? ''
		},
		{ readOnly: /*readonly*/ ctx[7] },
		/*$$restProps*/ ctx[29]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block1 = /*invalid*/ ctx[12] && create_if_block_8$2();
	let if_block2 = !/*invalid*/ ctx[12] && /*warn*/ ctx[14] && create_if_block_7$2();
	let if_block3 = /*readonly*/ ctx[7] && create_if_block_6$4();
	let if_block4 = !/*hideSteppers*/ ctx[10] && create_if_block_5$4(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			input = element("input");
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			set_attributes(input, input_data);
			toggle_class(div, "bx--number__input-wrapper", true);
			toggle_class(div, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[12] && /*warn*/ ctx[14]);
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, input);
			if (input.autofocus) input.focus();
			/*input_binding_1*/ ctx[46](input);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			append(div, t2);
			if (if_block2) if_block2.m(div, null);
			append(div, t3);
			if (if_block3) if_block3.m(div, null);
			append(div, t4);
			if (if_block4) if_block4.m(div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*onChange*/ ctx[28]),
					listen(input, "input", /*onInput*/ ctx[27]),
					listen(input, "focus", /*focus_handler_1*/ ctx[41]),
					listen(input, "blur", /*blur_handler_1*/ ctx[42])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*label*/ ctx[17]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*label*/ 131072) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_9$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "number" },
				{ pattern: "[0-9]*" },
				(!current || dirty[0] & /*errorId*/ 4194304) && { "aria-describedby": /*errorId*/ ctx[22] },
				(!current || dirty[0] & /*invalid*/ 4096 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[12] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*invalid*/ 4096 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[12] || undefined)) && { "aria-invalid": input_aria_invalid_value },
				(!current || dirty[0] & /*label, ariaLabel*/ 2228224 && input_aria_label_value !== (input_aria_label_value = /*label*/ ctx[17] ? undefined : /*ariaLabel*/ ctx[21])) && { "aria-label": input_aria_label_value },
				(!current || dirty[0] & /*disabled*/ 512) && { disabled: /*disabled*/ ctx[9] },
				(!current || dirty[0] & /*id*/ 524288) && { id: /*id*/ ctx[19] },
				(!current || dirty[0] & /*name*/ 1048576) && { name: /*name*/ ctx[20] },
				(!current || dirty[0] & /*max*/ 16) && { max: /*max*/ ctx[4] },
				(!current || dirty[0] & /*min*/ 32) && { min: /*min*/ ctx[5] },
				(!current || dirty[0] & /*step*/ 8) && { step: /*step*/ ctx[3] },
				(!current || dirty[0] & /*value*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[0] ?? '') && input.value !== input_value_value) && { value: input_value_value },
				(!current || dirty[0] & /*readonly*/ 128) && { readOnly: /*readonly*/ ctx[7] },
				dirty[0] & /*$$restProps*/ 536870912 && /*$$restProps*/ ctx[29]
			]));

			if (/*invalid*/ ctx[12]) {
				if (if_block1) {
					if (dirty[0] & /*invalid*/ 4096) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_8$2();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[12] && /*warn*/ ctx[14]) {
				if (if_block2) {
					if (dirty[0] & /*invalid, warn*/ 20480) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_7$2();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*readonly*/ ctx[7]) {
				if (if_block3) {
					if (dirty[0] & /*readonly*/ 128) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_6$4();
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div, t4);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (!/*hideSteppers*/ ctx[10]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*hideSteppers*/ 1024) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_5$4(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*invalid, warn*/ 20480) {
				toggle_class(div, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[12] && /*warn*/ ctx[14]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			/*input_binding_1*/ ctx[46](null);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (180:4) {#if mobile}
function create_if_block_3$5(ctx) {
	let t0;
	let div;
	let button0;
	let subtract16;
	let button0_aria_label_value;
	let t1;
	let input;
	let input_aria_label_value;
	let input_value_value;
	let t2;
	let button1;
	let add16;
	let button1_aria_label_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*label*/ ctx[17] && create_if_block_4$5(ctx);
	subtract16 = new Subtract16({ props: { class: "down-icon" } });

	let input_levels = [
		{ type: "number" },
		{ pattern: "[0-9]*" },
		{
			"aria-label": input_aria_label_value = /*label*/ ctx[17] ? undefined : /*ariaLabel*/ ctx[21]
		},
		{ disabled: /*disabled*/ ctx[9] },
		{ id: /*id*/ ctx[19] },
		{ name: /*name*/ ctx[20] },
		{ max: /*max*/ ctx[4] },
		{ min: /*min*/ ctx[5] },
		{ step: /*step*/ ctx[3] },
		{
			value: input_value_value = /*value*/ ctx[0] ?? ''
		},
		{ readOnly: /*readonly*/ ctx[7] },
		/*$$restProps*/ ctx[29]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	add16 = new Add16({ props: { class: "up-icon" } });

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			div = element("div");
			button0 = element("button");
			create_component(subtract16.$$.fragment);
			t1 = space();
			input = element("input");
			t2 = space();
			button1 = element("button");
			create_component(add16.$$.fragment);
			attr(button0, "type", "button");
			attr(button0, "aria-live", "polite");
			attr(button0, "aria-atomic", "true");
			attr(button0, "title", /*decrementLabel*/ ctx[24]);
			attr(button0, "aria-label", button0_aria_label_value = /*decrementLabel*/ ctx[24] || /*iconDescription*/ ctx[11]);
			button0.disabled = /*disabled*/ ctx[9];
			toggle_class(button0, "bx--number__control-btn", true);
			toggle_class(button0, "down-icon", true);
			set_attributes(input, input_data);
			attr(button1, "type", "button");
			attr(button1, "aria-live", "polite");
			attr(button1, "aria-atomic", "true");
			attr(button1, "title", /*incrementLabel*/ ctx[25]);
			attr(button1, "aria-label", button1_aria_label_value = /*incrementLabel*/ ctx[25] || /*iconDescription*/ ctx[11]);
			button1.disabled = /*disabled*/ ctx[9];
			toggle_class(button1, "bx--number__control-btn", true);
			toggle_class(button1, "up-icon", true);
			toggle_class(div, "bx--number__input-wrapper", true);
			toggle_class(div, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[12] && /*warn*/ ctx[14]);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, button0);
			mount_component(subtract16, button0, null);
			append(div, t1);
			append(div, input);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[44](input);
			append(div, t2);
			append(div, button1);
			mount_component(add16, button1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler_1*/ ctx[43]),
					listen(input, "change", /*onChange*/ ctx[28]),
					listen(input, "input", /*onInput*/ ctx[27]),
					listen(input, "focus", /*focus_handler*/ ctx[39]),
					listen(input, "blur", /*blur_handler*/ ctx[40]),
					listen(button1, "click", /*click_handler_2*/ ctx[45])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*label*/ ctx[17]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*label*/ 131072) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4$5(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*decrementLabel*/ 16777216) {
				attr(button0, "title", /*decrementLabel*/ ctx[24]);
			}

			if (!current || dirty[0] & /*decrementLabel, iconDescription*/ 16779264 && button0_aria_label_value !== (button0_aria_label_value = /*decrementLabel*/ ctx[24] || /*iconDescription*/ ctx[11])) {
				attr(button0, "aria-label", button0_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button0.disabled = /*disabled*/ ctx[9];
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "number" },
				{ pattern: "[0-9]*" },
				(!current || dirty[0] & /*label, ariaLabel*/ 2228224 && input_aria_label_value !== (input_aria_label_value = /*label*/ ctx[17] ? undefined : /*ariaLabel*/ ctx[21])) && { "aria-label": input_aria_label_value },
				(!current || dirty[0] & /*disabled*/ 512) && { disabled: /*disabled*/ ctx[9] },
				(!current || dirty[0] & /*id*/ 524288) && { id: /*id*/ ctx[19] },
				(!current || dirty[0] & /*name*/ 1048576) && { name: /*name*/ ctx[20] },
				(!current || dirty[0] & /*max*/ 16) && { max: /*max*/ ctx[4] },
				(!current || dirty[0] & /*min*/ 32) && { min: /*min*/ ctx[5] },
				(!current || dirty[0] & /*step*/ 8) && { step: /*step*/ ctx[3] },
				(!current || dirty[0] & /*value*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[0] ?? '') && input.value !== input_value_value) && { value: input_value_value },
				(!current || dirty[0] & /*readonly*/ 128) && { readOnly: /*readonly*/ ctx[7] },
				dirty[0] & /*$$restProps*/ 536870912 && /*$$restProps*/ ctx[29]
			]));

			if (!current || dirty[0] & /*incrementLabel*/ 33554432) {
				attr(button1, "title", /*incrementLabel*/ ctx[25]);
			}

			if (!current || dirty[0] & /*incrementLabel, iconDescription*/ 33556480 && button1_aria_label_value !== (button1_aria_label_value = /*incrementLabel*/ ctx[25] || /*iconDescription*/ ctx[11])) {
				attr(button1, "aria-label", button1_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button1.disabled = /*disabled*/ ctx[9];
			}

			if (dirty[0] & /*invalid, warn*/ 20480) {
				toggle_class(div, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[12] && /*warn*/ ctx[14]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(subtract16.$$.fragment, local);
			transition_in(add16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(subtract16.$$.fragment, local);
			transition_out(add16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			destroy_component(subtract16);
			/*input_binding*/ ctx[44](null);
			destroy_component(add16);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (246:6) {#if label}
function create_if_block_9$2(ctx) {
	let label_1;
	let current;
	const label_slot_template = /*#slots*/ ctx[34].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[33], get_label_slot_context_1);
	const label_slot_or_fallback = label_slot || fallback_block_1$4(ctx);

	return {
		c() {
			label_1 = element("label");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(label_1, "for", /*id*/ ctx[19]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[18]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(label_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && (!current || dirty[1] & /*$$scope*/ 4)) {
					update_slot_base(
						label_slot,
						label_slot_template,
						ctx,
						/*$$scope*/ ctx[33],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[33])
						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[33], dirty, get_label_slot_changes_1),
						get_label_slot_context_1
					);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && (!current || dirty[0] & /*label*/ 131072)) {
					label_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 524288) {
				attr(label_1, "for", /*id*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			}

			if (dirty[0] & /*hideLabel*/ 262144) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[18]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label_1);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (253:29) {label}
function fallback_block_1$4(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*label*/ 131072) set_data(t, /*label*/ ctx[17]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (282:8) {#if invalid}
function create_if_block_8$2(ctx) {
	let warningfilled16;
	let current;
	warningfilled16 = new WarningFilled16({ props: { class: "bx--number__invalid" } });

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (285:8) {#if !invalid && warn}
function create_if_block_7$2(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--number__invalid bx--number__invalid--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (290:8) {#if readonly}
function create_if_block_6$4(ctx) {
	let editoff16;
	let current;

	editoff16 = new EditOff16({
			props: { class: "bx--text-input__readonly-icon" }
		});

	return {
		c() {
			create_component(editoff16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(editoff16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(editoff16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(editoff16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(editoff16, detaching);
		}
	};
}

// (293:8) {#if !hideSteppers}
function create_if_block_5$4(ctx) {
	let div2;
	let button0;
	let subtract16;
	let button0_title_value;
	let button0_aria_label_value;
	let t0;
	let div0;
	let t1;
	let button1;
	let add16;
	let button1_title_value;
	let button1_aria_label_value;
	let t2;
	let div1;
	let current;
	let mounted;
	let dispose;
	subtract16 = new Subtract16({ props: { class: "down-icon" } });
	add16 = new Add16({ props: { class: "up-icon" } });

	return {
		c() {
			div2 = element("div");
			button0 = element("button");
			create_component(subtract16.$$.fragment);
			t0 = space();
			div0 = element("div");
			t1 = space();
			button1 = element("button");
			create_component(add16.$$.fragment);
			t2 = space();
			div1 = element("div");
			attr(button0, "type", "button");
			attr(button0, "tabindex", "-1");
			attr(button0, "title", button0_title_value = /*decrementLabel*/ ctx[24] || /*iconDescription*/ ctx[11]);
			attr(button0, "aria-label", button0_aria_label_value = /*decrementLabel*/ ctx[24] || /*iconDescription*/ ctx[11]);
			button0.disabled = /*disabled*/ ctx[9];
			toggle_class(button0, "bx--number__control-btn", true);
			toggle_class(button0, "down-icon", true);
			toggle_class(div0, "bx--number__rule-divider", true);
			attr(button1, "type", "button");
			attr(button1, "tabindex", "-1");
			attr(button1, "title", button1_title_value = /*incrementLabel*/ ctx[25] || /*iconDescription*/ ctx[11]);
			attr(button1, "aria-label", button1_aria_label_value = /*incrementLabel*/ ctx[25] || /*iconDescription*/ ctx[11]);
			button1.disabled = /*disabled*/ ctx[9];
			toggle_class(button1, "bx--number__control-btn", true);
			toggle_class(button1, "up-icon", true);
			toggle_class(div1, "bx--number__rule-divider", true);
			toggle_class(div2, "bx--number__controls", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, button0);
			mount_component(subtract16, button0, null);
			append(div2, t0);
			append(div2, div0);
			append(div2, t1);
			append(div2, button1);
			mount_component(add16, button1, null);
			append(div2, t2);
			append(div2, div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler_3*/ ctx[47]),
					listen(button1, "click", /*click_handler_4*/ ctx[48])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*decrementLabel, iconDescription*/ 16779264 && button0_title_value !== (button0_title_value = /*decrementLabel*/ ctx[24] || /*iconDescription*/ ctx[11])) {
				attr(button0, "title", button0_title_value);
			}

			if (!current || dirty[0] & /*decrementLabel, iconDescription*/ 16779264 && button0_aria_label_value !== (button0_aria_label_value = /*decrementLabel*/ ctx[24] || /*iconDescription*/ ctx[11])) {
				attr(button0, "aria-label", button0_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button0.disabled = /*disabled*/ ctx[9];
			}

			if (!current || dirty[0] & /*incrementLabel, iconDescription*/ 33556480 && button1_title_value !== (button1_title_value = /*incrementLabel*/ ctx[25] || /*iconDescription*/ ctx[11])) {
				attr(button1, "title", button1_title_value);
			}

			if (!current || dirty[0] & /*incrementLabel, iconDescription*/ 33556480 && button1_aria_label_value !== (button1_aria_label_value = /*incrementLabel*/ ctx[25] || /*iconDescription*/ ctx[11])) {
				attr(button1, "aria-label", button1_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button1.disabled = /*disabled*/ ctx[9];
			}
		},
		i(local) {
			if (current) return;
			transition_in(subtract16.$$.fragment, local);
			transition_in(add16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(subtract16.$$.fragment, local);
			transition_out(add16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(subtract16);
			destroy_component(add16);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (181:6) {#if label}
function create_if_block_4$5(ctx) {
	let label_1;
	let current;
	const label_slot_template = /*#slots*/ ctx[34].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[33], get_label_slot_context$1);
	const label_slot_or_fallback = label_slot || fallback_block$w(ctx);

	return {
		c() {
			label_1 = element("label");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(label_1, "for", /*id*/ ctx[19]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[18]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(label_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && (!current || dirty[1] & /*$$scope*/ 4)) {
					update_slot_base(
						label_slot,
						label_slot_template,
						ctx,
						/*$$scope*/ ctx[33],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[33])
						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[33], dirty, get_label_slot_changes$1),
						get_label_slot_context$1
					);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && (!current || dirty[0] & /*label*/ 131072)) {
					label_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 524288) {
				attr(label_1, "for", /*id*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			}

			if (dirty[0] & /*hideLabel*/ 262144) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[18]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label_1);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (188:29) {label}
function fallback_block$w(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*label*/ 131072) set_data(t, /*label*/ ctx[17]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (329:4) {#if !error && !warn && helperText}
function create_if_block_2$6(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[16]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 65536) set_data(t, /*helperText*/ ctx[16]);

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[9]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (337:4) {#if error}
function create_if_block_1$a(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			attr(div, "id", /*errorId*/ ctx[22]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 4194304) {
				attr(div, "id", /*errorId*/ ctx[22]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (342:4) {#if !error && warn}
function create_if_block$H(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[15]);
			attr(div, "id", /*errorId*/ ctx[22]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 32768) set_data(t, /*warnText*/ ctx[15]);

			if (dirty[0] & /*errorId*/ 4194304) {
				attr(div, "id", /*errorId*/ ctx[22]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$11(ctx) {
	let div1;
	let div0;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1;
	let t2;
	let div0_data_invalid_value;
	let div0_class_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_3$5, create_else_block$b];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*mobile*/ ctx[8]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = !/*error*/ ctx[23] && !/*warn*/ ctx[14] && /*helperText*/ ctx[16] && create_if_block_2$6(ctx);
	let if_block2 = /*error*/ ctx[23] && create_if_block_1$a(ctx);
	let if_block3 = !/*error*/ ctx[23] && /*warn*/ ctx[14] && create_if_block$H(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			attr(div0, "data-invalid", div0_data_invalid_value = /*error*/ ctx[23] || undefined);
			attr(div0, "class", div0_class_value = /*size*/ ctx[2] && `bx--number--${/*size*/ ctx[2]}`);
			toggle_class(div0, "bx--number", true);
			toggle_class(div0, "bx--number--helpertext", true);
			toggle_class(div0, "bx--number--readonly", /*readonly*/ ctx[7]);
			toggle_class(div0, "bx--number--light", /*light*/ ctx[6]);
			toggle_class(div0, "bx--number--nolabel", /*hideLabel*/ ctx[18]);
			toggle_class(div0, "bx--number--nosteppers", /*hideSteppers*/ ctx[10]);
			toggle_class(div0, "bx--number--mobile", /*mobile*/ ctx[8]);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if_blocks[current_block_type_index].m(div0, null);
			append(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[35]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[36]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[37]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[38])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div0, t0);
			}

			if (!/*error*/ ctx[23] && !/*warn*/ ctx[14] && /*helperText*/ ctx[16]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2$6(ctx);
					if_block1.c();
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*error*/ ctx[23]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$a(ctx);
					if_block2.c();
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (!/*error*/ ctx[23] && /*warn*/ ctx[14]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block$H(ctx);
					if_block3.c();
					if_block3.m(div0, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!current || dirty[0] & /*error*/ 8388608 && div0_data_invalid_value !== (div0_data_invalid_value = /*error*/ ctx[23] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!current || dirty[0] & /*size*/ 4 && div0_class_value !== (div0_class_value = /*size*/ ctx[2] && `bx--number--${/*size*/ ctx[2]}`)) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div0, "bx--number", true);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div0, "bx--number--helpertext", true);
			}

			if (dirty[0] & /*size, readonly*/ 132) {
				toggle_class(div0, "bx--number--readonly", /*readonly*/ ctx[7]);
			}

			if (dirty[0] & /*size, light*/ 68) {
				toggle_class(div0, "bx--number--light", /*light*/ ctx[6]);
			}

			if (dirty[0] & /*size, hideLabel*/ 262148) {
				toggle_class(div0, "bx--number--nolabel", /*hideLabel*/ ctx[18]);
			}

			if (dirty[0] & /*size, hideSteppers*/ 1028) {
				toggle_class(div0, "bx--number--nosteppers", /*hideSteppers*/ ctx[10]);
			}

			if (dirty[0] & /*size, mobile*/ 260) {
				toggle_class(div0, "bx--number--mobile", /*mobile*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function parse(raw) {
	return raw != "" ? Number(raw) : null;
}

function instance$12($$self, $$props, $$invalidate) {
	let incrementLabel;
	let decrementLabel;
	let error;
	let errorId;
	let ariaLabel;

	const omit_props_names = [
		"size","value","step","max","min","light","readonly","mobile","allowEmpty","disabled","hideSteppers","iconDescription","invalid","invalidText","warn","warnText","helperText","label","hideLabel","translateWithId","translationIds","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { value = null } = $$props;
	let { step = 1 } = $$props;
	let { max = undefined } = $$props;
	let { min = undefined } = $$props;
	let { light = false } = $$props;
	let { readonly = false } = $$props;
	let { mobile = false } = $$props;
	let { allowEmpty = false } = $$props;
	let { disabled = false } = $$props;
	let { hideSteppers = false } = $$props;
	let { iconDescription = "" } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { label = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { translateWithId = id => defaultTranslations[id] } = $$props;

	const translationIds = {
		increment: "increment",
		decrement: "decrement"
	};

	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.increment]: "Increment number",
		[translationIds.decrement]: "Decrement number"
	};

	const dispatch = createEventDispatcher();

	function updateValue(direction) {
		const nextValue = $$invalidate(0, value += direction * step);

		if (nextValue < min) {
			$$invalidate(0, value = min);
		} else if (nextValue > max) {
			$$invalidate(0, value = max);
		} else {
			$$invalidate(0, value = nextValue);
		}

		dispatch("input", value);
		dispatch("change", value);
	}

	function onInput({ target }) {
		$$invalidate(0, value = parse(target.value));
		dispatch("input", value);
	}

	function onChange({ target }) {
		dispatch("change", parse(target.value));
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = () => {
		updateValue(-1);
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_2 = () => {
		updateValue(1);
	};

	function input_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_3 = () => {
		updateValue(-1);
	};

	const click_handler_4 = () => {
		updateValue(1);
	};

	$$self.$$set = $$new_props => {
		$$invalidate(51, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(29, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('step' in $$new_props) $$invalidate(3, step = $$new_props.step);
		if ('max' in $$new_props) $$invalidate(4, max = $$new_props.max);
		if ('min' in $$new_props) $$invalidate(5, min = $$new_props.min);
		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ('readonly' in $$new_props) $$invalidate(7, readonly = $$new_props.readonly);
		if ('mobile' in $$new_props) $$invalidate(8, mobile = $$new_props.mobile);
		if ('allowEmpty' in $$new_props) $$invalidate(30, allowEmpty = $$new_props.allowEmpty);
		if ('disabled' in $$new_props) $$invalidate(9, disabled = $$new_props.disabled);
		if ('hideSteppers' in $$new_props) $$invalidate(10, hideSteppers = $$new_props.hideSteppers);
		if ('iconDescription' in $$new_props) $$invalidate(11, iconDescription = $$new_props.iconDescription);
		if ('invalid' in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(13, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(14, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(15, warnText = $$new_props.warnText);
		if ('helperText' in $$new_props) $$invalidate(16, helperText = $$new_props.helperText);
		if ('label' in $$new_props) $$invalidate(17, label = $$new_props.label);
		if ('hideLabel' in $$new_props) $$invalidate(18, hideLabel = $$new_props.hideLabel);
		if ('translateWithId' in $$new_props) $$invalidate(31, translateWithId = $$new_props.translateWithId);
		if ('id' in $$new_props) $$invalidate(19, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(20, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(33, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[1] & /*translateWithId*/ 1) {
			 $$invalidate(25, incrementLabel = translateWithId("increment"));
		}

		if ($$self.$$.dirty[1] & /*translateWithId*/ 1) {
			 $$invalidate(24, decrementLabel = translateWithId("decrement"));
		}

		if ($$self.$$.dirty[0] & /*invalid, allowEmpty, value, max, min*/ 1073745969) {
			 $$invalidate(23, error = invalid || !allowEmpty && value == null || value > max || value < min);
		}

		if ($$self.$$.dirty[0] & /*id*/ 524288) {
			 $$invalidate(22, errorId = `error-${id}`);
		}

		 $$invalidate(21, ariaLabel = $$props["aria-label"] || "Numeric input field with increment and decrement buttons");
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		ref,
		size,
		step,
		max,
		min,
		light,
		readonly,
		mobile,
		disabled,
		hideSteppers,
		iconDescription,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		label,
		hideLabel,
		id,
		name,
		ariaLabel,
		errorId,
		error,
		decrementLabel,
		incrementLabel,
		updateValue,
		onInput,
		onChange,
		$$restProps,
		allowEmpty,
		translateWithId,
		translationIds,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		focus_handler,
		blur_handler,
		focus_handler_1,
		blur_handler_1,
		click_handler_1,
		input_binding,
		click_handler_2,
		input_binding_1,
		click_handler_3,
		click_handler_4
	];
}

class NumberInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$12,
			create_fragment$11,
			safe_not_equal,
			{
				size: 2,
				value: 0,
				step: 3,
				max: 4,
				min: 5,
				light: 6,
				readonly: 7,
				mobile: 8,
				allowEmpty: 30,
				disabled: 9,
				hideSteppers: 10,
				iconDescription: 11,
				invalid: 12,
				invalidText: 13,
				warn: 14,
				warnText: 15,
				helperText: 16,
				label: 17,
				hideLabel: 18,
				translateWithId: 31,
				translationIds: 32,
				id: 19,
				name: 20,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}

	get translationIds() {
		return this.$$.ctx[32];
	}
}

/* node_modules\carbon-components-svelte\src\TextArea\TextArea.svelte generated by Svelte v3.46.4 */
const get_labelText_slot_changes$3 = dirty => ({});
const get_labelText_slot_context$3 = ctx => ({});

// (69:2) {#if (labelText || $$slots.labelText) && !hideLabel}
function create_if_block_3$6(ctx) {
	let div;
	let label;
	let t;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[20].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[19], get_labelText_slot_context$3);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$x(ctx);
	let if_block = /*maxCount*/ ctx[5] && create_if_block_4$6(ctx);

	return {
		c() {
			div = element("div");
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t = space();
			if (if_block) if_block.c();
			attr(label, "for", /*id*/ ctx[14]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[7]);
			toggle_class(div, "bx--text-area__label-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			append(div, t);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[19],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[19], dirty, get_labelText_slot_changes$3),
						get_labelText_slot_context$3
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 1024)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 16384) {
				attr(label, "for", /*id*/ ctx[14]);
			}

			if (dirty[0] & /*hideLabel*/ 2048) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (dirty[0] & /*disabled*/ 128) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[7]);
			}

			if (/*maxCount*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4$6(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (if_block) if_block.d();
		}
	};
}

// (77:31)            
function fallback_block$x(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data(t, /*labelText*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (81:6) {#if maxCount}
function create_if_block_4$6(ctx) {
	let div;
	let t0_value = /*value*/ ctx[0].length + "";
	let t0;
	let t1;
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text("/");
			t2 = text(/*maxCount*/ ctx[5]);
			toggle_class(div, "bx--label", true);
			toggle_class(div, "bx--label--disabled", /*disabled*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].length + "")) set_data(t0, t0_value);
			if (dirty[0] & /*maxCount*/ 32) set_data(t2, /*maxCount*/ ctx[5]);

			if (dirty[0] & /*disabled*/ 128) {
				toggle_class(div, "bx--label--disabled", /*disabled*/ ctx[7]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (92:4) {#if invalid}
function create_if_block_2$7(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--text-area__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (122:2) {#if !invalid && helperText}
function create_if_block_1$b(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[9]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 512) set_data(t, /*helperText*/ ctx[9]);

			if (dirty[0] & /*disabled*/ 128) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[7]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (130:2) {#if invalid}
function create_if_block$I(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			attr(div, "id", /*errorId*/ ctx[16]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 65536) {
				attr(div, "id", /*errorId*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$12(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let textarea;
	let textarea_aria_invalid_value;
	let textarea_aria_describedby_value;
	let textarea_value_value;
	let textarea_maxlength_value;
	let div0_data_invalid_value;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	let if_block0 = (/*labelText*/ ctx[10] || /*$$slots*/ ctx[17].labelText) && !/*hideLabel*/ ctx[11] && create_if_block_3$6(ctx);
	let if_block1 = /*invalid*/ ctx[12] && create_if_block_2$7();

	let textarea_levels = [
		{
			"aria-invalid": textarea_aria_invalid_value = /*invalid*/ ctx[12] || undefined
		},
		{
			"aria-describedby": textarea_aria_describedby_value = /*invalid*/ ctx[12] ? /*errorId*/ ctx[16] : undefined
		},
		{ disabled: /*disabled*/ ctx[7] },
		{ id: /*id*/ ctx[14] },
		{ name: /*name*/ ctx[15] },
		{ cols: /*cols*/ ctx[3] },
		{ rows: /*rows*/ ctx[4] },
		{
			value: textarea_value_value = /*value*/ ctx[0] ?? ''
		},
		{ placeholder: /*placeholder*/ ctx[2] },
		{ readOnly: /*readonly*/ ctx[8] },
		{
			maxlength: textarea_maxlength_value = /*maxCount*/ ctx[5] ?? undefined
		},
		/*$$restProps*/ ctx[18]
	];

	let textarea_data = {};

	for (let i = 0; i < textarea_levels.length; i += 1) {
		textarea_data = assign(textarea_data, textarea_levels[i]);
	}

	let if_block2 = !/*invalid*/ ctx[12] && /*helperText*/ ctx[9] && create_if_block_1$b(ctx);
	let if_block3 = /*invalid*/ ctx[12] && create_if_block$I(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			textarea = element("textarea");
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			set_attributes(textarea, textarea_data);
			toggle_class(textarea, "bx--text-area", true);
			toggle_class(textarea, "bx--text-area--light", /*light*/ ctx[6]);
			toggle_class(textarea, "bx--text-area--invalid", /*invalid*/ ctx[12]);
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[12] || undefined);
			toggle_class(div0, "bx--text-area__wrapper", true);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, textarea);
			if (textarea.autofocus) textarea.focus();
			/*textarea_binding*/ ctx[31](textarea);
			append(div1, t2);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t3);
			if (if_block3) if_block3.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(textarea, "change", /*change_handler*/ ctx[25]),
					listen(textarea, "input", /*input_handler*/ ctx[26]),
					listen(textarea, "input", /*input_handler_1*/ ctx[32]),
					listen(textarea, "keydown", /*keydown_handler*/ ctx[27]),
					listen(textarea, "keyup", /*keyup_handler*/ ctx[28]),
					listen(textarea, "focus", /*focus_handler*/ ctx[29]),
					listen(textarea, "blur", /*blur_handler*/ ctx[30]),
					listen(div1, "click", /*click_handler*/ ctx[21]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[22]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[23]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[24])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((/*labelText*/ ctx[10] || /*$$slots*/ ctx[17].labelText) && !/*hideLabel*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*labelText, $$slots, hideLabel*/ 134144) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$6(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*invalid*/ ctx[12]) {
				if (if_block1) {
					if (dirty[0] & /*invalid*/ 4096) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$7();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
				(!current || dirty[0] & /*invalid*/ 4096 && textarea_aria_invalid_value !== (textarea_aria_invalid_value = /*invalid*/ ctx[12] || undefined)) && {
					"aria-invalid": textarea_aria_invalid_value
				},
				(!current || dirty[0] & /*invalid, errorId*/ 69632 && textarea_aria_describedby_value !== (textarea_aria_describedby_value = /*invalid*/ ctx[12] ? /*errorId*/ ctx[16] : undefined)) && {
					"aria-describedby": textarea_aria_describedby_value
				},
				(!current || dirty[0] & /*disabled*/ 128) && { disabled: /*disabled*/ ctx[7] },
				(!current || dirty[0] & /*id*/ 16384) && { id: /*id*/ ctx[14] },
				(!current || dirty[0] & /*name*/ 32768) && { name: /*name*/ ctx[15] },
				(!current || dirty[0] & /*cols*/ 8) && { cols: /*cols*/ ctx[3] },
				(!current || dirty[0] & /*rows*/ 16) && { rows: /*rows*/ ctx[4] },
				(!current || dirty[0] & /*value*/ 1 && textarea_value_value !== (textarea_value_value = /*value*/ ctx[0] ?? '')) && { value: textarea_value_value },
				(!current || dirty[0] & /*placeholder*/ 4) && { placeholder: /*placeholder*/ ctx[2] },
				(!current || dirty[0] & /*readonly*/ 256) && { readOnly: /*readonly*/ ctx[8] },
				(!current || dirty[0] & /*maxCount*/ 32 && textarea_maxlength_value !== (textarea_maxlength_value = /*maxCount*/ ctx[5] ?? undefined)) && { maxlength: textarea_maxlength_value },
				dirty[0] & /*$$restProps*/ 262144 && /*$$restProps*/ ctx[18]
			]));

			toggle_class(textarea, "bx--text-area", true);
			toggle_class(textarea, "bx--text-area--light", /*light*/ ctx[6]);
			toggle_class(textarea, "bx--text-area--invalid", /*invalid*/ ctx[12]);

			if (!current || dirty[0] & /*invalid*/ 4096 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!/*invalid*/ ctx[12] && /*helperText*/ ctx[9]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$b(ctx);
					if_block2.c();
					if_block2.m(div1, t3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*invalid*/ ctx[12]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block$I(ctx);
					if_block3.c();
					if_block3.m(div1, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			/*textarea_binding*/ ctx[31](null);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$13($$self, $$props, $$invalidate) {
	let errorId;

	const omit_props_names = [
		"value","placeholder","cols","rows","maxCount","light","disabled","readonly","helperText","labelText","hideLabel","invalid","invalidText","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { value = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { cols = 50 } = $$props;
	let { rows = 4 } = $$props;
	let { maxCount = undefined } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { readonly = false } = $$props;
	let { helperText = "" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function textarea_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('placeholder' in $$new_props) $$invalidate(2, placeholder = $$new_props.placeholder);
		if ('cols' in $$new_props) $$invalidate(3, cols = $$new_props.cols);
		if ('rows' in $$new_props) $$invalidate(4, rows = $$new_props.rows);
		if ('maxCount' in $$new_props) $$invalidate(5, maxCount = $$new_props.maxCount);
		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ('readonly' in $$new_props) $$invalidate(8, readonly = $$new_props.readonly);
		if ('helperText' in $$new_props) $$invalidate(9, helperText = $$new_props.helperText);
		if ('labelText' in $$new_props) $$invalidate(10, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(11, hideLabel = $$new_props.hideLabel);
		if ('invalid' in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(13, invalidText = $$new_props.invalidText);
		if ('id' in $$new_props) $$invalidate(14, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(15, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 16384) {
			 $$invalidate(16, errorId = `error-${id}`);
		}
	};

	return [
		value,
		ref,
		placeholder,
		cols,
		rows,
		maxCount,
		light,
		disabled,
		readonly,
		helperText,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		id,
		name,
		errorId,
		$$slots,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		textarea_binding,
		input_handler_1
	];
}

class TextArea extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$13,
			create_fragment$12,
			safe_not_equal,
			{
				value: 0,
				placeholder: 2,
				cols: 3,
				rows: 4,
				maxCount: 5,
				light: 6,
				disabled: 7,
				readonly: 8,
				helperText: 9,
				labelText: 10,
				hideLabel: 11,
				invalid: 12,
				invalidText: 13,
				id: 14,
				name: 15,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

/* node_modules\carbon-components-svelte\src\TextInput\TextInput.svelte generated by Svelte v3.46.4 */
const get_labelText_slot_changes_1 = dirty => ({});
const get_labelText_slot_context_1 = ctx => ({});
const get_labelText_slot_changes$4 = dirty => ({});
const get_labelText_slot_context$4 = ctx => ({});

// (114:2) {#if inline}
function create_if_block_10$1(ctx) {
	let div;
	let t;
	let current;
	let if_block0 = /*labelText*/ ctx[9] && create_if_block_12$1(ctx);
	let if_block1 = !/*isFluid*/ ctx[20] && /*helperText*/ ctx[6] && create_if_block_11$1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--text-input__label-helper-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*labelText*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*labelText*/ 512) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_12$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*isFluid*/ ctx[20] && /*helperText*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_11$1(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (116:6) {#if labelText}
function create_if_block_12$1(ctx) {
	let label;
	let label_class_value;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[26].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[25], get_labelText_slot_context$4);
	const labelText_slot_or_fallback = labelText_slot || fallback_block_1$5(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[7]);
			attr(label, "class", label_class_value = /*inline*/ ctx[16] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[25], dirty, get_labelText_slot_changes$4),
						get_labelText_slot_context$4
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 512)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 128) {
				attr(label, "for", /*id*/ ctx[7]);
			}

			if (!current || dirty[0] & /*inline, size*/ 65540 && label_class_value !== (label_class_value = /*inline*/ ctx[16] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`)) {
				attr(label, "class", label_class_value);
			}

			if (dirty[0] & /*inline, size*/ 65540) {
				toggle_class(label, "bx--label", true);
			}

			if (dirty[0] & /*inline, size, hideLabel*/ 66564) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			}

			if (dirty[0] & /*inline, size, disabled*/ 65572) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*inline, size, inline*/ 65540) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (125:33)              
function fallback_block_1$5(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 512) set_data(t, /*labelText*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (130:6) {#if !isFluid && helperText}
function create_if_block_11$1(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 64) set_data(t, /*helperText*/ ctx[6]);

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (141:2) {#if !inline && (labelText || $$slots.labelText)}
function create_if_block_9$3(ctx) {
	let label;
	let label_class_value;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[26].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[25], get_labelText_slot_context_1);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$y(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[7]);
			attr(label, "class", label_class_value = /*inline*/ ctx[16] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[25], dirty, get_labelText_slot_changes_1),
						get_labelText_slot_context_1
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 512)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 128) {
				attr(label, "for", /*id*/ ctx[7]);
			}

			if (!current || dirty[0] & /*inline, size*/ 65540 && label_class_value !== (label_class_value = /*inline*/ ctx[16] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`)) {
				attr(label, "class", label_class_value);
			}

			if (dirty[0] & /*inline, size*/ 65540) {
				toggle_class(label, "bx--label", true);
			}

			if (dirty[0] & /*inline, size, hideLabel*/ 66564) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			}

			if (dirty[0] & /*inline, size, disabled*/ 65572) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*inline, size, inline*/ 65540) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (150:29)          
function fallback_block$y(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 512) set_data(t, /*labelText*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (165:6) {#if invalid}
function create_if_block_8$3(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--text-input__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};
}

// (168:6) {#if !invalid && warn}
function create_if_block_7$3(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--text-input__invalid-icon\n            bx--text-input__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};
}

// (174:6) {#if readonly}
function create_if_block_6$5(ctx) {
	let editoff16;
	let current;

	editoff16 = new EditOff16({
			props: { class: "bx--text-input__readonly-icon" }
		});

	return {
		c() {
			create_component(editoff16.$$.fragment);
		},
		m(target, anchor) {
			mount_component(editoff16, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(editoff16.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(editoff16.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(editoff16, detaching);
		}
	};
}

// (203:6) {#if isFluid}
function create_if_block_5$5(ctx) {
	let hr;

	return {
		c() {
			hr = element("hr");
			toggle_class(hr, "bx--text-input__divider", true);
		},
		m(target, anchor) {
			insert(target, hr, anchor);
		},
		d(detaching) {
			if (detaching) detach(hr);
		}
	};
}

// (206:6) {#if isFluid && !inline && invalid}
function create_if_block_4$7(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[12]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 4096) set_data(t, /*invalidText*/ ctx[12]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (211:6) {#if isFluid && !inline && warn}
function create_if_block_3$7(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[14]);
			attr(div, "id", /*warnId*/ ctx[18]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 16384) set_data(t, /*warnText*/ ctx[14]);

			if (dirty[0] & /*warnId*/ 262144) {
				attr(div, "id", /*warnId*/ ctx[18]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (215:4) {#if !invalid && !warn && !isFluid && !inline && helperText}
function create_if_block_2$8(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 64) set_data(t, /*helperText*/ ctx[6]);

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (224:4) {#if !isFluid && invalid}
function create_if_block_1$c(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[12]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 4096) set_data(t, /*invalidText*/ ctx[12]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (229:4) {#if !isFluid && !invalid && warn}
function create_if_block$J(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[14]);
			attr(div, "id", /*warnId*/ ctx[18]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 16384) set_data(t, /*warnText*/ ctx[14]);

			if (dirty[0] & /*warnId*/ 262144) {
				attr(div, "id", /*warnId*/ ctx[18]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$13(ctx) {
	let div2;
	let t0;
	let t1;
	let div1;
	let div0;
	let t2;
	let t3;
	let t4;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_data_warn_value;
	let input_aria_describedby_value;
	let input_class_value;
	let t5;
	let t6;
	let t7;
	let div0_data_invalid_value;
	let div0_data_warn_value;
	let t8;
	let t9;
	let t10;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*inline*/ ctx[16] && create_if_block_10$1(ctx);
	let if_block1 = !/*inline*/ ctx[16] && (/*labelText*/ ctx[9] || /*$$slots*/ ctx[24].labelText) && create_if_block_9$3(ctx);
	let if_block2 = /*invalid*/ ctx[11] && create_if_block_8$3();
	let if_block3 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_7$3();
	let if_block4 = /*readonly*/ ctx[17] && create_if_block_6$5();

	let input_levels = [
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{
			"aria-invalid": input_aria_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{
			"data-warn": input_data_warn_value = /*warn*/ ctx[13] || undefined
		},
		{
			"aria-describedby": input_aria_describedby_value = /*invalid*/ ctx[11]
			? /*errorId*/ ctx[19]
			: /*warn*/ ctx[13] ? /*warnId*/ ctx[18] : undefined
		},
		{ disabled: /*disabled*/ ctx[5] },
		{ id: /*id*/ ctx[7] },
		{ name: /*name*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[3] },
		{ required: /*required*/ ctx[15] },
		{ readOnly: /*readonly*/ ctx[17] },
		/*$$restProps*/ ctx[23],
		{
			class: input_class_value = /*size*/ ctx[2] && `bx--text-input--${/*size*/ ctx[2]}`
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block5 = /*isFluid*/ ctx[20] && create_if_block_5$5();
	let if_block6 = /*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*invalid*/ ctx[11] && create_if_block_4$7(ctx);
	let if_block7 = /*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*warn*/ ctx[13] && create_if_block_3$7(ctx);
	let if_block8 = !/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && !/*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*helperText*/ ctx[6] && create_if_block_2$8(ctx);
	let if_block9 = !/*isFluid*/ ctx[20] && /*invalid*/ ctx[11] && create_if_block_1$c(ctx);
	let if_block10 = !/*isFluid*/ ctx[20] && !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block$J(ctx);

	return {
		c() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			input = element("input");
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();
			if (if_block6) if_block6.c();
			t7 = space();
			if (if_block7) if_block7.c();
			t8 = space();
			if (if_block8) if_block8.c();
			t9 = space();
			if (if_block9) if_block9.c();
			t10 = space();
			if (if_block10) if_block10.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[4]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[11]);
			toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[13]);
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[11] || undefined);
			attr(div0, "data-warn", div0_data_warn_value = /*warn*/ ctx[13] || undefined);
			toggle_class(div0, "bx--text-input__field-wrapper", true);
			toggle_class(div0, "bx--text-input__field-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
			toggle_class(div1, "bx--text-input__field-outer-wrapper", true);
			toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[16]);
			toggle_class(div2, "bx--form-item", true);
			toggle_class(div2, "bx--text-input-wrapper", true);
			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[16]);
			toggle_class(div2, "bx--text-input-wrapper--light", /*light*/ ctx[4]);
			toggle_class(div2, "bx--text-input-wrapper--readonly", /*readonly*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t0);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t1);
			append(div2, div1);
			append(div1, div0);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t3);
			if (if_block4) if_block4.m(div0, null);
			append(div0, t4);
			append(div0, input);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[35](input);
			set_input_value(input, /*value*/ ctx[0]);
			append(div0, t5);
			if (if_block5) if_block5.m(div0, null);
			append(div0, t6);
			if (if_block6) if_block6.m(div0, null);
			append(div0, t7);
			if (if_block7) if_block7.m(div0, null);
			append(div1, t8);
			if (if_block8) if_block8.m(div1, null);
			append(div1, t9);
			if (if_block9) if_block9.m(div1, null);
			append(div1, t10);
			if (if_block10) if_block10.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[36]),
					listen(input, "change", /*onChange*/ ctx[22]),
					listen(input, "input", /*onInput*/ ctx[21]),
					listen(input, "keydown", /*keydown_handler*/ ctx[31]),
					listen(input, "keyup", /*keyup_handler*/ ctx[32]),
					listen(input, "focus", /*focus_handler*/ ctx[33]),
					listen(input, "blur", /*blur_handler*/ ctx[34]),
					listen(div2, "click", /*click_handler*/ ctx[27]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[28]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[29]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[30])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*inline*/ ctx[16]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*inline*/ 65536) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_10$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*inline*/ ctx[16] && (/*labelText*/ ctx[9] || /*$$slots*/ ctx[24].labelText)) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*inline, labelText, $$slots*/ 16843264) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_9$3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*invalid*/ ctx[11]) {
				if (if_block2) {
					if (dirty[0] & /*invalid*/ 2048) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_8$3();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block3) {
					if (dirty[0] & /*invalid, warn*/ 10240) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_7$3();
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*readonly*/ ctx[17]) {
				if (if_block4) {
					if (dirty[0] & /*readonly*/ 131072) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_6$5();
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div0, t4);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty[0] & /*invalid*/ 2048 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*invalid*/ 2048 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "aria-invalid": input_aria_invalid_value },
				(!current || dirty[0] & /*warn*/ 8192 && input_data_warn_value !== (input_data_warn_value = /*warn*/ ctx[13] || undefined)) && { "data-warn": input_data_warn_value },
				(!current || dirty[0] & /*invalid, errorId, warn, warnId*/ 796672 && input_aria_describedby_value !== (input_aria_describedby_value = /*invalid*/ ctx[11]
				? /*errorId*/ ctx[19]
				: /*warn*/ ctx[13] ? /*warnId*/ ctx[18] : undefined)) && {
					"aria-describedby": input_aria_describedby_value
				},
				(!current || dirty[0] & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
				(!current || dirty[0] & /*id*/ 128) && { id: /*id*/ ctx[7] },
				(!current || dirty[0] & /*name*/ 256) && { name: /*name*/ ctx[8] },
				(!current || dirty[0] & /*placeholder*/ 8) && { placeholder: /*placeholder*/ ctx[3] },
				(!current || dirty[0] & /*required*/ 32768) && { required: /*required*/ ctx[15] },
				(!current || dirty[0] & /*readonly*/ 131072) && { readOnly: /*readonly*/ ctx[17] },
				dirty[0] & /*$$restProps*/ 8388608 && /*$$restProps*/ ctx[23],
				(!current || dirty[0] & /*size*/ 4 && input_class_value !== (input_class_value = /*size*/ ctx[2] && `bx--text-input--${/*size*/ ctx[2]}`)) && { class: input_class_value }
			]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[4]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[11]);
			toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[13]);

			if (/*isFluid*/ ctx[20]) {
				if (if_block5) ; else {
					if_block5 = create_if_block_5$5();
					if_block5.c();
					if_block5.m(div0, t6);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*invalid*/ ctx[11]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_4$7(ctx);
					if_block6.c();
					if_block6.m(div0, t7);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (/*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*warn*/ ctx[13]) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_3$7(ctx);
					if_block7.c();
					if_block7.m(div0, null);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (!current || dirty[0] & /*invalid*/ 2048 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[11] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!current || dirty[0] & /*warn*/ 8192 && div0_data_warn_value !== (div0_data_warn_value = /*warn*/ ctx[13] || undefined)) {
				attr(div0, "data-warn", div0_data_warn_value);
			}

			if (dirty[0] & /*invalid, warn*/ 10240) {
				toggle_class(div0, "bx--text-input__field-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
			}

			if (!/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && !/*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*helperText*/ ctx[6]) {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block_2$8(ctx);
					if_block8.c();
					if_block8.m(div1, t9);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (!/*isFluid*/ ctx[20] && /*invalid*/ ctx[11]) {
				if (if_block9) {
					if_block9.p(ctx, dirty);
				} else {
					if_block9 = create_if_block_1$c(ctx);
					if_block9.c();
					if_block9.m(div1, t10);
				}
			} else if (if_block9) {
				if_block9.d(1);
				if_block9 = null;
			}

			if (!/*isFluid*/ ctx[20] && !/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block10) {
					if_block10.p(ctx, dirty);
				} else {
					if_block10 = create_if_block$J(ctx);
					if_block10.c();
					if_block10.m(div1, null);
				}
			} else if (if_block10) {
				if_block10.d(1);
				if_block10 = null;
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[16]);
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[16]);
			}

			if (dirty[0] & /*light*/ 16) {
				toggle_class(div2, "bx--text-input-wrapper--light", /*light*/ ctx[4]);
			}

			if (dirty[0] & /*readonly*/ 131072) {
				toggle_class(div2, "bx--text-input-wrapper--readonly", /*readonly*/ ctx[17]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			/*input_binding*/ ctx[35](null);
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (if_block8) if_block8.d();
			if (if_block9) if_block9.d();
			if (if_block10) if_block10.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$14($$self, $$props, $$invalidate) {
	let isFluid;
	let errorId;
	let warnId;

	const omit_props_names = [
		"size","value","placeholder","light","disabled","helperText","id","name","labelText","hideLabel","invalid","invalidText","warn","warnText","ref","required","inline","readonly"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { ref = null } = $$props;
	let { required = false } = $$props;
	let { inline = false } = $$props;
	let { readonly = false } = $$props;
	const ctx = getContext("Form");
	const dispatch = createEventDispatcher();

	function parse(raw) {
		if ($$restProps.type !== "number") return raw;
		return raw != "" ? Number(raw) : null;
	}

	/** @type {(e: Event) => void} */
	const onInput = e => {
		$$invalidate(0, value = parse(e.target.value));
		dispatch("input", value);
	};

	/** @type {(e: Event) => void} */
	const onChange = e => {
		dispatch("change", parse(e.target.value));
	};

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(23, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('placeholder' in $$new_props) $$invalidate(3, placeholder = $$new_props.placeholder);
		if ('light' in $$new_props) $$invalidate(4, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('helperText' in $$new_props) $$invalidate(6, helperText = $$new_props.helperText);
		if ('id' in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ('labelText' in $$new_props) $$invalidate(9, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(10, hideLabel = $$new_props.hideLabel);
		if ('invalid' in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(13, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('required' in $$new_props) $$invalidate(15, required = $$new_props.required);
		if ('inline' in $$new_props) $$invalidate(16, inline = $$new_props.inline);
		if ('readonly' in $$new_props) $$invalidate(17, readonly = $$new_props.readonly);
		if ('$$scope' in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 128) {
			 $$invalidate(19, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 128) {
			 $$invalidate(18, warnId = `warn-${id}`);
		}
	};

	 $$invalidate(20, isFluid = !!ctx && ctx.isFluid);

	return [
		value,
		ref,
		size,
		placeholder,
		light,
		disabled,
		helperText,
		id,
		name,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		required,
		inline,
		readonly,
		warnId,
		errorId,
		isFluid,
		onInput,
		onChange,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		input_binding,
		input_input_handler
	];
}

class TextInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$14,
			create_fragment$13,
			safe_not_equal,
			{
				size: 2,
				value: 0,
				placeholder: 3,
				light: 4,
				disabled: 5,
				helperText: 6,
				id: 7,
				name: 8,
				labelText: 9,
				hideLabel: 10,
				invalid: 11,
				invalidText: 12,
				warn: 13,
				warnText: 14,
				ref: 1,
				required: 15,
				inline: 16,
				readonly: 17
			},
			null,
			[-1, -1]
		);
	}
}

/* node_modules\carbon-components-svelte\src\Tile\Tile.svelte generated by Svelte v3.46.4 */

function create_fragment$14(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div_levels = [/*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[4]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$15($$self, $$props, $$invalidate) {
	const omit_props_names = ["light"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { light = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('light' in $$new_props) $$invalidate(0, light = $$new_props.light);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [
		light,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Tile extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$15, create_fragment$14, safe_not_equal, { light: 0 });
	}
}

/* node_modules\carbon-components-svelte\src\icons\Menu20.svelte generated by Svelte v3.46.4 */

function create_if_block$K(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$z(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$K(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$K(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$15(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$z(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Menu20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 20 20" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M2 14.8H18V16H2zM2 11.2H18V12.399999999999999H2zM2 7.6H18V8.799999999999999H2zM2 4H18V5.2H2z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Menu20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 20 20" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$16($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Menu20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$16, create_fragment$15, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

const shouldRenderHamburgerMenu = writable(false);

/* node_modules\carbon-components-svelte\src\UIShell\SideNav\HamburgerMenu.svelte generated by Svelte v3.46.4 */

function create_fragment$16(ctx) {
	let button;
	let switch_instance;
	let current;
	let mounted;
	let dispose;

	var switch_value = /*isOpen*/ ctx[0]
	? /*iconClose*/ ctx[4]
	: /*iconMenu*/ ctx[3];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	let button_levels = [
		{ type: "button" },
		{ title: /*ariaLabel*/ ctx[2] },
		{ "aria-label": /*ariaLabel*/ ctx[2] },
		/*$$restProps*/ ctx[5]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__menu-trigger", true);
			toggle_class(button, "bx--header__menu-toggle", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[7](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[6]),
					listen(button, "click", /*click_handler_1*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (switch_value !== (switch_value = /*isOpen*/ ctx[0]
			? /*iconClose*/ ctx[4]
			: /*iconMenu*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*ariaLabel*/ 4) && { title: /*ariaLabel*/ ctx[2] },
				(!current || dirty & /*ariaLabel*/ 4) && { "aria-label": /*ariaLabel*/ ctx[2] },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
			]));

			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__menu-trigger", true);
			toggle_class(button, "bx--header__menu-toggle", true);
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$17($$self, $$props, $$invalidate) {
	const omit_props_names = ["ariaLabel","isOpen","iconMenu","iconClose","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { ariaLabel = undefined } = $$props;
	let { isOpen = false } = $$props;
	let { iconMenu = Menu20 } = $$props;
	let { iconClose = Close20 } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => $$invalidate(0, isOpen = !isOpen);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('ariaLabel' in $$new_props) $$invalidate(2, ariaLabel = $$new_props.ariaLabel);
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('iconMenu' in $$new_props) $$invalidate(3, iconMenu = $$new_props.iconMenu);
		if ('iconClose' in $$new_props) $$invalidate(4, iconClose = $$new_props.iconClose);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	return [
		isOpen,
		ref,
		ariaLabel,
		iconMenu,
		iconClose,
		$$restProps,
		click_handler,
		button_binding,
		click_handler_1
	];
}

class HamburgerMenu extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$17, create_fragment$16, safe_not_equal, {
			ariaLabel: 2,
			isOpen: 0,
			iconMenu: 3,
			iconClose: 4,
			ref: 1
		});
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\GlobalHeader\Header.svelte generated by Svelte v3.46.4 */
const get_platform_slot_changes = dirty => ({});
const get_platform_slot_context = ctx => ({});
const get_skip_to_content_slot_changes = dirty => ({});
const get_skip_to_content_slot_context = ctx => ({});

// (83:2) {#if ($shouldRenderHamburgerMenu && winWidth < expansionBreakpoint) || persistentHamburgerMenu}
function create_if_block_1$d(ctx) {
	let hamburgermenu;
	let updating_isOpen;
	let current;

	function hamburgermenu_isOpen_binding(value) {
		/*hamburgermenu_isOpen_binding*/ ctx[19](value);
	}

	let hamburgermenu_props = {
		iconClose: /*iconClose*/ ctx[8],
		iconMenu: /*iconMenu*/ ctx[7]
	};

	if (/*isSideNavOpen*/ ctx[0] !== void 0) {
		hamburgermenu_props.isOpen = /*isSideNavOpen*/ ctx[0];
	}

	hamburgermenu = new HamburgerMenu({ props: hamburgermenu_props });
	binding_callbacks.push(() => bind(hamburgermenu, 'isOpen', hamburgermenu_isOpen_binding));

	return {
		c() {
			create_component(hamburgermenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(hamburgermenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const hamburgermenu_changes = {};
			if (dirty & /*iconClose*/ 256) hamburgermenu_changes.iconClose = /*iconClose*/ ctx[8];
			if (dirty & /*iconMenu*/ 128) hamburgermenu_changes.iconMenu = /*iconMenu*/ ctx[7];

			if (!updating_isOpen && dirty & /*isSideNavOpen*/ 1) {
				updating_isOpen = true;
				hamburgermenu_changes.isOpen = /*isSideNavOpen*/ ctx[0];
				add_flush_callback(() => updating_isOpen = false);
			}

			hamburgermenu.$set(hamburgermenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(hamburgermenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(hamburgermenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(hamburgermenu, detaching);
		}
	};
}

// (97:4) {#if company}
function create_if_block$L(ctx) {
	let span;
	let t0;
	let t1;

	return {
		c() {
			span = element("span");
			t0 = text(/*company*/ ctx[3]);
			t1 = text(" ");
			toggle_class(span, "bx--header__name--prefix", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*company*/ 8) set_data(t0, /*company*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (100:26) {platformName}
function fallback_block$A(ctx) {
	let t;

	return {
		c() {
			t = text(/*platformName*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*platformName*/ 16) set_data(t, /*platformName*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$17(ctx) {
	let header;
	let t0;
	let t1;
	let a;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[18]);
	const skip_to_content_slot_template = /*#slots*/ ctx[16]["skip-to-content"];
	const skip_to_content_slot = create_slot(skip_to_content_slot_template, ctx, /*$$scope*/ ctx[15], get_skip_to_content_slot_context);
	let if_block0 = (/*$shouldRenderHamburgerMenu*/ ctx[11] && /*winWidth*/ ctx[9] < /*expansionBreakpoint*/ ctx[6] || /*persistentHamburgerMenu*/ ctx[5]) && create_if_block_1$d(ctx);
	let if_block1 = /*company*/ ctx[3] && create_if_block$L(ctx);
	const platform_slot_template = /*#slots*/ ctx[16].platform;
	const platform_slot = create_slot(platform_slot_template, ctx, /*$$scope*/ ctx[15], get_platform_slot_context);
	const platform_slot_or_fallback = platform_slot || fallback_block$A(ctx);
	let a_levels = [{ href: /*href*/ ctx[2] }, /*$$restProps*/ ctx[12]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);

	return {
		c() {
			header = element("header");
			if (skip_to_content_slot) skip_to_content_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			a = element("a");
			if (if_block1) if_block1.c();
			t2 = space();
			if (platform_slot_or_fallback) platform_slot_or_fallback.c();
			t3 = space();
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__name", true);
			attr(header, "aria-label", /*ariaLabel*/ ctx[10]);
			toggle_class(header, "bx--header", true);
		},
		m(target, anchor) {
			insert(target, header, anchor);

			if (skip_to_content_slot) {
				skip_to_content_slot.m(header, null);
			}

			append(header, t0);
			if (if_block0) if_block0.m(header, null);
			append(header, t1);
			append(header, a);
			if (if_block1) if_block1.m(a, null);
			append(a, t2);

			if (platform_slot_or_fallback) {
				platform_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[20](a);
			append(header, t3);

			if (default_slot) {
				default_slot.m(header, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "resize", /*onwindowresize*/ ctx[18]),
					listen(a, "click", /*click_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (skip_to_content_slot) {
				if (skip_to_content_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						skip_to_content_slot,
						skip_to_content_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(skip_to_content_slot_template, /*$$scope*/ ctx[15], dirty, get_skip_to_content_slot_changes),
						get_skip_to_content_slot_context
					);
				}
			}

			if (/*$shouldRenderHamburgerMenu*/ ctx[11] && /*winWidth*/ ctx[9] < /*expansionBreakpoint*/ ctx[6] || /*persistentHamburgerMenu*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$shouldRenderHamburgerMenu, winWidth, expansionBreakpoint, persistentHamburgerMenu*/ 2656) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$d(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(header, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*company*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$L(ctx);
					if_block1.c();
					if_block1.m(a, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (platform_slot) {
				if (platform_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						platform_slot,
						platform_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(platform_slot_template, /*$$scope*/ ctx[15], dirty, get_platform_slot_changes),
						get_platform_slot_context
					);
				}
			} else {
				if (platform_slot_or_fallback && platform_slot_or_fallback.p && (!current || dirty & /*platformName*/ 16)) {
					platform_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
			]));

			toggle_class(a, "bx--header__name", true);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*ariaLabel*/ 1024) {
				attr(header, "aria-label", /*ariaLabel*/ ctx[10]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(skip_to_content_slot, local);
			transition_in(if_block0);
			transition_in(platform_slot_or_fallback, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(skip_to_content_slot, local);
			transition_out(if_block0);
			transition_out(platform_slot_or_fallback, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			if (skip_to_content_slot) skip_to_content_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (platform_slot_or_fallback) platform_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[20](null);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$18($$self, $$props, $$invalidate) {
	let ariaLabel;

	const omit_props_names = [
		"expandedByDefault","isSideNavOpen","uiShellAriaLabel","href","company","platformName","persistentHamburgerMenu","expansionBreakpoint","ref","iconMenu","iconClose"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $shouldRenderHamburgerMenu;
	component_subscribe($$self, shouldRenderHamburgerMenu, $$value => $$invalidate(11, $shouldRenderHamburgerMenu = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	let { expandedByDefault = true } = $$props;
	let { isSideNavOpen = false } = $$props;
	let { uiShellAriaLabel = undefined } = $$props;
	let { href = undefined } = $$props;
	let { company = undefined } = $$props;
	let { platformName = "" } = $$props;
	let { persistentHamburgerMenu = false } = $$props;
	let { expansionBreakpoint = 1056 } = $$props;
	let { ref = null } = $$props;
	let { iconMenu = Menu20 } = $$props;
	let { iconClose = Close20 } = $$props;
	let winWidth = undefined;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function onwindowresize() {
		$$invalidate(9, winWidth = window.innerWidth);
	}

	function hamburgermenu_isOpen_binding(value) {
		isSideNavOpen = value;
		(((($$invalidate(0, isSideNavOpen), $$invalidate(13, expandedByDefault)), $$invalidate(9, winWidth)), $$invalidate(6, expansionBreakpoint)), $$invalidate(5, persistentHamburgerMenu));
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(21, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('expandedByDefault' in $$new_props) $$invalidate(13, expandedByDefault = $$new_props.expandedByDefault);
		if ('isSideNavOpen' in $$new_props) $$invalidate(0, isSideNavOpen = $$new_props.isSideNavOpen);
		if ('uiShellAriaLabel' in $$new_props) $$invalidate(14, uiShellAriaLabel = $$new_props.uiShellAriaLabel);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('company' in $$new_props) $$invalidate(3, company = $$new_props.company);
		if ('platformName' in $$new_props) $$invalidate(4, platformName = $$new_props.platformName);
		if ('persistentHamburgerMenu' in $$new_props) $$invalidate(5, persistentHamburgerMenu = $$new_props.persistentHamburgerMenu);
		if ('expansionBreakpoint' in $$new_props) $$invalidate(6, expansionBreakpoint = $$new_props.expansionBreakpoint);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('iconMenu' in $$new_props) $$invalidate(7, iconMenu = $$new_props.iconMenu);
		if ('iconClose' in $$new_props) $$invalidate(8, iconClose = $$new_props.iconClose);
		if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*expandedByDefault, winWidth, expansionBreakpoint, persistentHamburgerMenu*/ 8800) {
			 $$invalidate(0, isSideNavOpen = expandedByDefault && winWidth >= expansionBreakpoint && !persistentHamburgerMenu);
		}

		 $$invalidate(10, ariaLabel = company
		? `${company} `
		: "" + (uiShellAriaLabel || $$props["aria-label"] || platformName));
	};

	$$props = exclude_internal_props($$props);

	return [
		isSideNavOpen,
		ref,
		href,
		company,
		platformName,
		persistentHamburgerMenu,
		expansionBreakpoint,
		iconMenu,
		iconClose,
		winWidth,
		ariaLabel,
		$shouldRenderHamburgerMenu,
		$$restProps,
		expandedByDefault,
		uiShellAriaLabel,
		$$scope,
		slots,
		click_handler,
		onwindowresize,
		hamburgermenu_isOpen_binding,
		a_binding
	];
}

class Header extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$18, create_fragment$17, safe_not_equal, {
			expandedByDefault: 13,
			isSideNavOpen: 0,
			uiShellAriaLabel: 14,
			href: 2,
			company: 3,
			platformName: 4,
			persistentHamburgerMenu: 5,
			expansionBreakpoint: 6,
			ref: 1,
			iconMenu: 7,
			iconClose: 8
		});
	}
}

/* node_modules\carbon-components-svelte\src\icons\AppSwitcher20.svelte generated by Svelte v3.46.4 */

function create_if_block$M(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

// (46:8)      
function fallback_block$B(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$M(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$M(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$18(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	const default_slot_or_fallback = default_slot || fallback_block$B(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "AppSwitcher20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(path, "d", "M14 4H18V8H14zM4 4H8V8H4zM24 4H28V8H24zM14 14H18V18H14zM4 14H8V18H4zM24 14H28V18H24zM14 24H18V28H14zM4 24H8V28H4zM24 24H28V28H24z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(svg, "click", /*click_handler*/ ctx[12]),
					listen(svg, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(svg, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(svg, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(svg, "keyup", /*keyup_handler*/ ctx[16]),
					listen(svg, "keydown", /*keydown_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "AppSwitcher20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$19($$self, $$props, $$invalidate) {
	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('focusable' in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(9, ariaLabel = $$props["aria-label"]);
		 $$invalidate(8, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 772) {
			 $$invalidate(7, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 992) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		labelled,
		ariaLabelledBy,
		ariaLabel,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class AppSwitcher20 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$19, create_fragment$18, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\GlobalHeader\HeaderAction.svelte generated by Svelte v3.46.4 */

function add_css(target) {
	append_styles(target, "svelte-19vx6se", ".action-text.svelte-19vx6se.svelte-19vx6se{font-size:16px;line-height:20px;text-decoration:none;color:#fff;width:100%;padding:0 1rem}.action-text.svelte-19vx6se>span.svelte-19vx6se{margin-left:0.75rem;vertical-align:top}");
}

const get_text_slot_changes = dirty => ({});
const get_text_slot_context = ctx => ({});

// (75:6) {#if text}
function create_if_block_1$e(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*text*/ ctx[4]);
			attr(span, "class", "svelte-19vx6se");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 16) set_data(t, /*text*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (74:22)        
function fallback_block$C(ctx) {
	let if_block_anchor;
	let if_block = /*text*/ ctx[4] && create_if_block_1$e(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*text*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$e(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (78:2) {#if isOpen}
function create_if_block$N(ctx) {
	let div;
	let div_transition;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--header-panel", true);
			toggle_class(div, "bx--header-panel--expanded", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[15](div);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(
					div,
					slide,
					{
						.../*transition*/ ctx[5],
						duration: /*transition*/ ctx[5] === false
						? 0
						: /*transition*/ ctx[5].duration
					},
					true
				);

				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(default_slot, local);

			if (!div_transition) div_transition = create_bidirectional_transition(
				div,
				slide,
				{
					.../*transition*/ ctx[5],
					duration: /*transition*/ ctx[5] === false
					? 0
					: /*transition*/ ctx[5].duration
				},
				false
			);

			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[15](null);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

function create_fragment$19(ctx) {
	let div;
	let button;
	let icon0;
	let t0;
	let icon1;
	let t1;
	let t2;
	let current;
	let mounted;
	let dispose;

	icon0 = new Icon({
			props: {
				render: /*icon*/ ctx[2],
				style: /*isOpen*/ ctx[0] ? 'display: none' : ''
			}
		});

	icon1 = new Icon({
			props: {
				render: /*closeIcon*/ ctx[3],
				style: !/*isOpen*/ ctx[0] ? 'display: none' : ''
			}
		});

	const text_slot_template = /*#slots*/ ctx[10].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[9], get_text_slot_context);
	const text_slot_or_fallback = text_slot || fallback_block$C(ctx);
	let button_levels = [{ type: "button" }, /*$$restProps*/ ctx[8]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	let if_block = /*isOpen*/ ctx[0] && create_if_block$N(ctx);

	return {
		c() {
			div = element("div");
			button = element("button");
			create_component(icon0.$$.fragment);
			t0 = space();
			create_component(icon1.$$.fragment);
			t1 = space();
			if (text_slot_or_fallback) text_slot_or_fallback.c();
			t2 = space();
			if (if_block) if_block.c();
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isOpen*/ ctx[0]);
			toggle_class(button, "action-text", /*text*/ ctx[4]);
			toggle_class(button, "svelte-19vx6se", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);
			mount_component(icon0, button, null);
			append(button, t0);
			mount_component(icon1, button, null);
			append(button, t1);

			if (text_slot_or_fallback) {
				text_slot_or_fallback.m(button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[13](button);
			append(div, t2);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*click_handler_1*/ ctx[12]),
					listen(button, "click", /*click_handler*/ ctx[11]),
					listen(button, "click", /*click_handler_2*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const icon0_changes = {};
			if (dirty & /*icon*/ 4) icon0_changes.render = /*icon*/ ctx[2];
			if (dirty & /*isOpen*/ 1) icon0_changes.style = /*isOpen*/ ctx[0] ? 'display: none' : '';
			icon0.$set(icon0_changes);
			const icon1_changes = {};
			if (dirty & /*closeIcon*/ 8) icon1_changes.render = /*closeIcon*/ ctx[3];
			if (dirty & /*isOpen*/ 1) icon1_changes.style = !/*isOpen*/ ctx[0] ? 'display: none' : '';
			icon1.$set(icon1_changes);

			if (text_slot) {
				if (text_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						text_slot,
						text_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(text_slot_template, /*$$scope*/ ctx[9], dirty, get_text_slot_changes),
						get_text_slot_context
					);
				}
			} else {
				if (text_slot_or_fallback && text_slot_or_fallback.p && (!current || dirty & /*text*/ 16)) {
					text_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [{ type: "button" }, dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isOpen*/ ctx[0]);
			toggle_class(button, "action-text", /*text*/ ctx[4]);
			toggle_class(button, "svelte-19vx6se", true);

			if (/*isOpen*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isOpen*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$N(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			transition_in(text_slot_or_fallback, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			transition_out(text_slot_or_fallback, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(icon0);
			destroy_component(icon1);
			if (text_slot_or_fallback) text_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[13](null);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1a($$self, $$props, $$invalidate) {
	const omit_props_names = ["isOpen","icon","closeIcon","text","ref","transition"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isOpen = false } = $$props;
	let { icon = AppSwitcher20 } = $$props;
	let { closeIcon = Close20 } = $$props;
	let { text = undefined } = $$props;
	let { ref = null } = $$props;
	let { transition = { duration: 200 } } = $$props;
	const dispatch = createEventDispatcher();
	let refPanel = null;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (isOpen && !ref.contains(target) && !refPanel.contains(target)) {
			$$invalidate(0, isOpen = false);
			dispatch('close');
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_2 = () => {
		$$invalidate(0, isOpen = !isOpen);
		dispatch(isOpen ? 'open' : 'close');
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refPanel = $$value;
			$$invalidate(6, refPanel);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('closeIcon' in $$new_props) $$invalidate(3, closeIcon = $$new_props.closeIcon);
		if ('text' in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('transition' in $$new_props) $$invalidate(5, transition = $$new_props.transition);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	return [
		isOpen,
		ref,
		icon,
		closeIcon,
		text,
		transition,
		refPanel,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		click_handler_1,
		button_binding,
		click_handler_2,
		div_binding
	];
}

class HeaderAction extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1a,
			create_fragment$19,
			safe_not_equal,
			{
				isOpen: 0,
				icon: 2,
				closeIcon: 3,
				text: 4,
				ref: 1,
				transition: 5
			},
			add_css
		);
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\GlobalHeader\HeaderPanelDivider.svelte generated by Svelte v3.46.4 */

function add_css$1(target) {
	append_styles(target, "svelte-1tbdbmc", "li.svelte-1tbdbmc{margin:2rem 1rem 0;color:#525252}span.svelte-1tbdbmc{font-size:0.75rem;line-height:1.3;letter-spacing:0.02rem;color:#c6c6c6}");
}

// (1:0) {#if $$slots.default}
function create_if_block$O(ctx) {
	let li;
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

	return {
		c() {
			li = element("li");
			span = element("span");
			if (default_slot) default_slot.c();
			attr(span, "class", "svelte-1tbdbmc");
			attr(li, "class", "svelte-1tbdbmc");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1a(ctx) {
	let t;
	let hr;
	let current;
	let if_block = /*$$slots*/ ctx[0].default && create_if_block$O(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			hr = element("hr");
			toggle_class(hr, "bx--switcher__item--divider", true);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, hr, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$$slots*/ ctx[0].default) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$O(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(hr);
		}
	};
}

function instance$1b($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	return [$$slots, $$scope, slots];
}

class HeaderPanelDivider extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1b, create_fragment$1a, safe_not_equal, {}, add_css$1);
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\GlobalHeader\HeaderPanelLink.svelte generated by Svelte v3.46.4 */

function create_fragment$1b(ctx) {
	let li;
	let a;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let a_levels = [
		{ href: /*href*/ ctx[1] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--switcher__item-link", true);
			toggle_class(li, "bx--switcher__item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);

			if (default_slot) {
				default_slot.m(a, null);
			}

			/*a_binding*/ ctx[6](a);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 2) && { href: /*href*/ ctx[1] },
				(!current || dirty & /*$$restProps*/ 4 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
				? 'noopener noreferrer'
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--switcher__item-link", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
			/*a_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$1c($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [ref, href, $$restProps, $$scope, slots, click_handler, a_binding];
}

class HeaderPanelLink extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1c, create_fragment$1b, safe_not_equal, { href: 1, ref: 0 });
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\GlobalHeader\HeaderPanelLinks.svelte generated by Svelte v3.46.4 */

function create_fragment$1c(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			toggle_class(ul, "bx--switcher__item", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$1d($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class HeaderPanelLinks extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1d, create_fragment$1c, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\GlobalHeader\HeaderUtilities.svelte generated by Svelte v3.46.4 */

function create_fragment$1d(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--header__global", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$1e($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class HeaderUtilities extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1e, create_fragment$1d, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\SideNav\SideNav.svelte generated by Svelte v3.46.4 */

function create_if_block$P(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			toggle_class(div, "bx--side-nav__overlay", true);
			toggle_class(div, "bx--side-nav__overlay-active", /*isOpen*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[11]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*isOpen*/ 1) {
				toggle_class(div, "bx--side-nav__overlay-active", /*isOpen*/ ctx[0]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$1e(ctx) {
	let t;
	let nav;
	let nav_aria_hidden_value;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[10]);
	let if_block = !/*fixed*/ ctx[1] && create_if_block$P(ctx);
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	let nav_levels = [
		{
			"aria-hidden": nav_aria_hidden_value = !/*isOpen*/ ctx[0]
		},
		{ "aria-label": /*ariaLabel*/ ctx[3] },
		/*$$restProps*/ ctx[7]
	];

	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			nav = element("nav");
			if (default_slot) default_slot.c();
			set_attributes(nav, nav_data);
			toggle_class(nav, "bx--side-nav__navigation", true);
			toggle_class(nav, "bx--side-nav", true);
			toggle_class(nav, "bx--side-nav--ux", true);

			toggle_class(nav, "bx--side-nav--expanded", /*rail*/ ctx[2] && /*winWidth*/ ctx[5] >= /*expansionBreakpoint*/ ctx[4]
			? false
			: /*isOpen*/ ctx[0]);

			toggle_class(nav, "bx--side-nav--collapsed", !/*isOpen*/ ctx[0] && !/*rail*/ ctx[2]);
			toggle_class(nav, "bx--side-nav--rail", /*rail*/ ctx[2]);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, nav, anchor);

			if (default_slot) {
				default_slot.m(nav, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(window, "resize", /*onwindowresize*/ ctx[10]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*fixed*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$P(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				(!current || dirty & /*isOpen*/ 1 && nav_aria_hidden_value !== (nav_aria_hidden_value = !/*isOpen*/ ctx[0])) && { "aria-hidden": nav_aria_hidden_value },
				(!current || dirty & /*ariaLabel*/ 8) && { "aria-label": /*ariaLabel*/ ctx[3] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(nav, "bx--side-nav__navigation", true);
			toggle_class(nav, "bx--side-nav", true);
			toggle_class(nav, "bx--side-nav--ux", true);

			toggle_class(nav, "bx--side-nav--expanded", /*rail*/ ctx[2] && /*winWidth*/ ctx[5] >= /*expansionBreakpoint*/ ctx[4]
			? false
			: /*isOpen*/ ctx[0]);

			toggle_class(nav, "bx--side-nav--collapsed", !/*isOpen*/ ctx[0] && !/*rail*/ ctx[2]);
			toggle_class(nav, "bx--side-nav--rail", /*rail*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$1f($$self, $$props, $$invalidate) {
	const omit_props_names = ["fixed","rail","ariaLabel","isOpen","expansionBreakpoint"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { fixed = false } = $$props;
	let { rail = false } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { isOpen = false } = $$props;
	let { expansionBreakpoint = 1056 } = $$props;
	const dispatch = createEventDispatcher();
	let winWidth = undefined;

	onMount(() => {
		shouldRenderHamburgerMenu.set(true);
		return () => shouldRenderHamburgerMenu.set(false);
	});

	function onwindowresize() {
		$$invalidate(5, winWidth = window.innerWidth);
	}

	const click_handler = () => {
		dispatch('click:overlay');
		$$invalidate(0, isOpen = false);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('fixed' in $$new_props) $$invalidate(1, fixed = $$new_props.fixed);
		if ('rail' in $$new_props) $$invalidate(2, rail = $$new_props.rail);
		if ('ariaLabel' in $$new_props) $$invalidate(3, ariaLabel = $$new_props.ariaLabel);
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('expansionBreakpoint' in $$new_props) $$invalidate(4, expansionBreakpoint = $$new_props.expansionBreakpoint);
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*isOpen*/ 1) {
			 dispatch(isOpen ? "open" : "close");
		}
	};

	return [
		isOpen,
		fixed,
		rail,
		ariaLabel,
		expansionBreakpoint,
		winWidth,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		onwindowresize,
		click_handler
	];
}

class SideNav extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1f, create_fragment$1e, safe_not_equal, {
			fixed: 1,
			rail: 2,
			ariaLabel: 3,
			isOpen: 0,
			expansionBreakpoint: 4
		});
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\SideNav\SideNavItems.svelte generated by Svelte v3.46.4 */

function create_fragment$1f(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			toggle_class(ul, "bx--side-nav__items", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$1g($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class SideNavItems extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1g, create_fragment$1f, safe_not_equal, {});
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\SideNav\SideNavLink.svelte generated by Svelte v3.46.4 */

function create_if_block$Q(ctx) {
	let div;
	let switch_instance;
	let current;
	var switch_value = /*icon*/ ctx[4];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			toggle_class(div, "bx--side-nav__icon", true);
			toggle_class(div, "bx--side-nav__icon--small", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[4])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, null);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};
}

function create_fragment$1g(ctx) {
	let li;
	let a;
	let t0;
	let span;
	let t1;
	let a_aria_current_value;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*icon*/ ctx[4] && create_if_block$Q(ctx);

	let a_levels = [
		{
			"aria-current": a_aria_current_value = /*isSelected*/ ctx[1] ? 'page' : undefined
		},
		{ href: /*href*/ ctx[2] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[5].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		/*$$restProps*/ ctx[5]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			t1 = text(/*text*/ ctx[3]);
			toggle_class(span, "bx--side-nav__link-text", true);
			set_attributes(a, a_data);
			toggle_class(a, "bx--side-nav__link", true);
			toggle_class(a, "bx--side-nav__link--current", /*isSelected*/ ctx[1]);
			toggle_class(li, "bx--side-nav__item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			if (if_block) if_block.m(a, null);
			append(a, t0);
			append(a, span);
			append(span, t1);
			/*a_binding*/ ctx[7](a);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*icon*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*icon*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$Q(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*text*/ 8) set_data(t1, /*text*/ ctx[3]);

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*isSelected*/ 2 && a_aria_current_value !== (a_aria_current_value = /*isSelected*/ ctx[1] ? 'page' : undefined)) && { "aria-current": a_aria_current_value },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				(!current || dirty & /*$$restProps*/ 32 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[5].target === '_blank'
				? 'noopener noreferrer'
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
			]));

			toggle_class(a, "bx--side-nav__link", true);
			toggle_class(a, "bx--side-nav__link--current", /*isSelected*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (if_block) if_block.d();
			/*a_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$1h($$self, $$props, $$invalidate) {
	const omit_props_names = ["isSelected","href","text","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { isSelected = false } = $$props;
	let { href = undefined } = $$props;
	let { text = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('isSelected' in $$new_props) $$invalidate(1, isSelected = $$new_props.isSelected);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('text' in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ('icon' in $$new_props) $$invalidate(4, icon = $$new_props.icon);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	return [ref, isSelected, href, text, icon, $$restProps, click_handler, a_binding];
}

class SideNavLink extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1h, create_fragment$1g, safe_not_equal, {
			isSelected: 1,
			href: 2,
			text: 3,
			icon: 4,
			ref: 0
		});
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\Content.svelte generated by Svelte v3.46.4 */

function create_fragment$1h(ctx) {
	let main;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let main_levels = [{ id: /*id*/ ctx[0] }, /*$$restProps*/ ctx[1]];
	let main_data = {};

	for (let i = 0; i < main_levels.length; i += 1) {
		main_data = assign(main_data, main_levels[i]);
	}

	return {
		c() {
			main = element("main");
			if (default_slot) default_slot.c();
			set_attributes(main, main_data);
			toggle_class(main, "bx--content", true);
		},
		m(target, anchor) {
			insert(target, main, anchor);

			if (default_slot) {
				default_slot.m(main, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(main, main_data = get_spread_update(main_levels, [
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
			]));

			toggle_class(main, "bx--content", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$1i($$self, $$props, $$invalidate) {
	const omit_props_names = ["id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "main-content" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('id' in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [id, $$restProps, $$scope, slots];
}

class Content extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1i, create_fragment$1h, safe_not_equal, { id: 0 });
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\SkipToContent.svelte generated by Svelte v3.46.4 */

function fallback_block$D(ctx) {
	let t;

	return {
		c() {
			t = text("Skip to main content");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1i(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	const default_slot_or_fallback = default_slot || fallback_block$D();

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{ tabindex: /*tabindex*/ ctx[1] },
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--skip-to-content", true);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
				(!current || dirty & /*tabindex*/ 2) && { tabindex: /*tabindex*/ ctx[1] },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--skip-to-content", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$1j($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","tabindex"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href = "#main-content" } = $$props;
	let { tabindex = "0" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('tabindex' in $$new_props) $$invalidate(1, tabindex = $$new_props.tabindex);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [href, tabindex, $$restProps, $$scope, slots, click_handler];
}

class SkipToContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1j, create_fragment$1i, safe_not_equal, { href: 0, tabindex: 1 });
	}
}

/* node_modules\carbon-components-svelte\src\UIShell\SideNavDivider.svelte generated by Svelte v3.46.4 */

function create_fragment$1j(ctx) {
	let li;
	let li_levels = [{ role: "separator" }, /*$$restProps*/ ctx[0]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			set_attributes(li, li_data);
			toggle_class(li, "bx--side-nav__divider", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		p(ctx, [dirty]) {
			set_attributes(li, li_data = get_spread_update(li_levels, [{ role: "separator" }, dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(li, "bx--side-nav__divider", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function instance$1k($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [$$restProps];
}

class SideNavDivider extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1k, create_fragment$1j, safe_not_equal, {});
	}
}

export { Button, ComboBox, Content, ContentSwitcher, DataTable, DataTableSkeleton, Form, FormGroup, Header, HeaderAction, HeaderPanelDivider, HeaderPanelLink, HeaderPanelLinks, HeaderUtilities, LocalStorage, Modal, MultiSelect, NumberInput, OverflowMenu, OverflowMenuItem, Search, SideNav, SideNavDivider, SideNavItems, SideNavLink, SkipToContent, Switch, TextArea, TextInput, Tile, ToastNotification, Toolbar, ToolbarBatchActions, ToolbarContent, ToolbarMenu, ToolbarMenuItem, ToolbarSearch };
